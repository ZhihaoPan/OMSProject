// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gateway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Gateway_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Gateway_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Gateway_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Gateway_2eproto;
namespace GatewayProto {
class Cancel_Order;
class Cancel_OrderDefaultTypeInternal;
extern Cancel_OrderDefaultTypeInternal _Cancel_Order_default_instance_;
class Cancel_Order_Fail;
class Cancel_Order_FailDefaultTypeInternal;
extern Cancel_Order_FailDefaultTypeInternal _Cancel_Order_Fail_default_instance_;
class Executive_Report;
class Executive_ReportDefaultTypeInternal;
extern Executive_ReportDefaultTypeInternal _Executive_Report_default_instance_;
class Extend_Fields;
class Extend_FieldsDefaultTypeInternal;
extern Extend_FieldsDefaultTypeInternal _Extend_Fields_default_instance_;
class Heart_Beat;
class Heart_BeatDefaultTypeInternal;
extern Heart_BeatDefaultTypeInternal _Heart_Beat_default_instance_;
class Logon;
class LogonDefaultTypeInternal;
extern LogonDefaultTypeInternal _Logon_default_instance_;
class Logout;
class LogoutDefaultTypeInternal;
extern LogoutDefaultTypeInternal _Logout_default_instance_;
class New_Order;
class New_OrderDefaultTypeInternal;
extern New_OrderDefaultTypeInternal _New_Order_default_instance_;
class Retransmission_Report;
class Retransmission_ReportDefaultTypeInternal;
extern Retransmission_ReportDefaultTypeInternal _Retransmission_Report_default_instance_;
class Standard_Header;
class Standard_HeaderDefaultTypeInternal;
extern Standard_HeaderDefaultTypeInternal _Standard_Header_default_instance_;
class Standard_Message;
class Standard_MessageDefaultTypeInternal;
extern Standard_MessageDefaultTypeInternal _Standard_Message_default_instance_;
class Transaction_Report;
class Transaction_ReportDefaultTypeInternal;
extern Transaction_ReportDefaultTypeInternal _Transaction_Report_default_instance_;
}  // namespace GatewayProto
PROTOBUF_NAMESPACE_OPEN
template<> ::GatewayProto::Cancel_Order* Arena::CreateMaybeMessage<::GatewayProto::Cancel_Order>(Arena*);
template<> ::GatewayProto::Cancel_Order_Fail* Arena::CreateMaybeMessage<::GatewayProto::Cancel_Order_Fail>(Arena*);
template<> ::GatewayProto::Executive_Report* Arena::CreateMaybeMessage<::GatewayProto::Executive_Report>(Arena*);
template<> ::GatewayProto::Extend_Fields* Arena::CreateMaybeMessage<::GatewayProto::Extend_Fields>(Arena*);
template<> ::GatewayProto::Heart_Beat* Arena::CreateMaybeMessage<::GatewayProto::Heart_Beat>(Arena*);
template<> ::GatewayProto::Logon* Arena::CreateMaybeMessage<::GatewayProto::Logon>(Arena*);
template<> ::GatewayProto::Logout* Arena::CreateMaybeMessage<::GatewayProto::Logout>(Arena*);
template<> ::GatewayProto::New_Order* Arena::CreateMaybeMessage<::GatewayProto::New_Order>(Arena*);
template<> ::GatewayProto::Retransmission_Report* Arena::CreateMaybeMessage<::GatewayProto::Retransmission_Report>(Arena*);
template<> ::GatewayProto::Standard_Header* Arena::CreateMaybeMessage<::GatewayProto::Standard_Header>(Arena*);
template<> ::GatewayProto::Standard_Message* Arena::CreateMaybeMessage<::GatewayProto::Standard_Message>(Arena*);
template<> ::GatewayProto::Transaction_Report* Arena::CreateMaybeMessage<::GatewayProto::Transaction_Report>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GatewayProto {

// ===================================================================

class Standard_Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Standard_Header) */ {
 public:
  inline Standard_Header() : Standard_Header(nullptr) {};
  virtual ~Standard_Header();

  Standard_Header(const Standard_Header& from);
  Standard_Header(Standard_Header&& from) noexcept
    : Standard_Header() {
    *this = ::std::move(from);
  }

  inline Standard_Header& operator=(const Standard_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Standard_Header& operator=(Standard_Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Standard_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Standard_Header* internal_default_instance() {
    return reinterpret_cast<const Standard_Header*>(
               &_Standard_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Standard_Header& a, Standard_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Standard_Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Standard_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Standard_Header* New() const final {
    return CreateMaybeMessage<Standard_Header>(nullptr);
  }

  Standard_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Standard_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Standard_Header& from);
  void MergeFrom(const Standard_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Standard_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Standard_Header";
  }
  protected:
  explicit Standard_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 1,
    kBodyLengthFieldNumber = 2,
  };
  // required int32 MsgType = 1;
  bool has_msgtype() const;
  private:
  bool _internal_has_msgtype() const;
  public:
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 BodyLength = 2;
  bool has_bodylength() const;
  private:
  bool _internal_has_bodylength() const;
  public:
  void clear_bodylength();
  ::PROTOBUF_NAMESPACE_ID::int32 bodylength() const;
  void set_bodylength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bodylength() const;
  void _internal_set_bodylength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Standard_Header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 bodylength_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Logon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Logon) */ {
 public:
  inline Logon() : Logon(nullptr) {};
  virtual ~Logon();

  Logon(const Logon& from);
  Logon(Logon&& from) noexcept
    : Logon() {
    *this = ::std::move(from);
  }

  inline Logon& operator=(const Logon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logon& operator=(Logon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logon* internal_default_instance() {
    return reinterpret_cast<const Logon*>(
               &_Logon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Logon& a, Logon& b) {
    a.Swap(&b);
  }
  inline void Swap(Logon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logon* New() const final {
    return CreateMaybeMessage<Logon>(nullptr);
  }

  Logon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logon& from);
  void MergeFrom(const Logon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Logon";
  }
  protected:
  explicit Logon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderCompIDFieldNumber = 1,
    kTargetCompIDFieldNumber = 2,
    kPasswordFieldNumber = 4,
    kDefaultApplVerIDFieldNumber = 5,
    kHeartBtIntFieldNumber = 3,
  };
  // required string SenderCompID = 1;
  bool has_sendercompid() const;
  private:
  bool _internal_has_sendercompid() const;
  public:
  void clear_sendercompid();
  const std::string& sendercompid() const;
  void set_sendercompid(const std::string& value);
  void set_sendercompid(std::string&& value);
  void set_sendercompid(const char* value);
  void set_sendercompid(const char* value, size_t size);
  std::string* mutable_sendercompid();
  std::string* release_sendercompid();
  void set_allocated_sendercompid(std::string* sendercompid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sendercompid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sendercompid(
      std::string* sendercompid);
  private:
  const std::string& _internal_sendercompid() const;
  void _internal_set_sendercompid(const std::string& value);
  std::string* _internal_mutable_sendercompid();
  public:

  // required string TargetCompID = 2;
  bool has_targetcompid() const;
  private:
  bool _internal_has_targetcompid() const;
  public:
  void clear_targetcompid();
  const std::string& targetcompid() const;
  void set_targetcompid(const std::string& value);
  void set_targetcompid(std::string&& value);
  void set_targetcompid(const char* value);
  void set_targetcompid(const char* value, size_t size);
  std::string* mutable_targetcompid();
  std::string* release_targetcompid();
  void set_allocated_targetcompid(std::string* targetcompid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetcompid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetcompid(
      std::string* targetcompid);
  private:
  const std::string& _internal_targetcompid() const;
  void _internal_set_targetcompid(const std::string& value);
  std::string* _internal_mutable_targetcompid();
  public:

  // required string Password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required string DefaultApplVerID = 5;
  bool has_defaultapplverid() const;
  private:
  bool _internal_has_defaultapplverid() const;
  public:
  void clear_defaultapplverid();
  const std::string& defaultapplverid() const;
  void set_defaultapplverid(const std::string& value);
  void set_defaultapplverid(std::string&& value);
  void set_defaultapplverid(const char* value);
  void set_defaultapplverid(const char* value, size_t size);
  std::string* mutable_defaultapplverid();
  std::string* release_defaultapplverid();
  void set_allocated_defaultapplverid(std::string* defaultapplverid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_defaultapplverid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_defaultapplverid(
      std::string* defaultapplverid);
  private:
  const std::string& _internal_defaultapplverid() const;
  void _internal_set_defaultapplverid(const std::string& value);
  std::string* _internal_mutable_defaultapplverid();
  public:

  // required uint32 HeartBtInt = 3;
  bool has_heartbtint() const;
  private:
  bool _internal_has_heartbtint() const;
  public:
  void clear_heartbtint();
  ::PROTOBUF_NAMESPACE_ID::uint32 heartbtint() const;
  void set_heartbtint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heartbtint() const;
  void _internal_set_heartbtint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Logon)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendercompid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetcompid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defaultapplverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heartbtint_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Logout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Logout) */ {
 public:
  inline Logout() : Logout(nullptr) {};
  virtual ~Logout();

  Logout(const Logout& from);
  Logout(Logout&& from) noexcept
    : Logout() {
    *this = ::std::move(from);
  }

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logout& operator=(Logout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logout* internal_default_instance() {
    return reinterpret_cast<const Logout*>(
               &_Logout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Logout& a, Logout& b) {
    a.Swap(&b);
  }
  inline void Swap(Logout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logout* New() const final {
    return CreateMaybeMessage<Logout>(nullptr);
  }

  Logout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Logout";
  }
  protected:
  explicit Logout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kSessionStatusFieldNumber = 1,
  };
  // required string Text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // required int32 SessionStatus = 1;
  bool has_sessionstatus() const;
  private:
  bool _internal_has_sessionstatus() const;
  public:
  void clear_sessionstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 sessionstatus() const;
  void set_sessionstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessionstatus() const;
  void _internal_set_sessionstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Logout)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessionstatus_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Heart_Beat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Heart_Beat) */ {
 public:
  inline Heart_Beat() : Heart_Beat(nullptr) {};
  virtual ~Heart_Beat();

  Heart_Beat(const Heart_Beat& from);
  Heart_Beat(Heart_Beat&& from) noexcept
    : Heart_Beat() {
    *this = ::std::move(from);
  }

  inline Heart_Beat& operator=(const Heart_Beat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heart_Beat& operator=(Heart_Beat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heart_Beat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Heart_Beat* internal_default_instance() {
    return reinterpret_cast<const Heart_Beat*>(
               &_Heart_Beat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Heart_Beat& a, Heart_Beat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heart_Beat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heart_Beat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heart_Beat* New() const final {
    return CreateMaybeMessage<Heart_Beat>(nullptr);
  }

  Heart_Beat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heart_Beat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heart_Beat& from);
  void MergeFrom(const Heart_Beat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heart_Beat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Heart_Beat";
  }
  protected:
  explicit Heart_Beat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // optional string Text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Heart_Beat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class New_Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.New_Order) */ {
 public:
  inline New_Order() : New_Order(nullptr) {};
  virtual ~New_Order();

  New_Order(const New_Order& from);
  New_Order(New_Order&& from) noexcept
    : New_Order() {
    *this = ::std::move(from);
  }

  inline New_Order& operator=(const New_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline New_Order& operator=(New_Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const New_Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const New_Order* internal_default_instance() {
    return reinterpret_cast<const New_Order*>(
               &_New_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(New_Order& a, New_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(New_Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(New_Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline New_Order* New() const final {
    return CreateMaybeMessage<New_Order>(nullptr);
  }

  New_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<New_Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const New_Order& from);
  void MergeFrom(const New_Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(New_Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.New_Order";
  }
  protected:
  explicit New_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplIDFieldNumber = 1,
    kSubmittingPBUIDFieldNumber = 2,
    kSecurityIDFieldNumber = 3,
    kSecurityIDSourceFieldNumber = 4,
    kClearingFirmFieldNumber = 6,
    kTransactTimeFieldNumber = 7,
    kUserInfoFieldNumber = 8,
    kClOrdIDFieldNumber = 9,
    kAccountIDFieldNumber = 10,
    kBranchIDFieldNumber = 11,
    kOrderRestrictionsFieldNumber = 12,
    kSideFieldNumber = 13,
    kOrdTypeFieldNumber = 14,
    kExtendFieldsFieldNumber = 17,
    kOwnerTypeFieldNumber = 5,
    kOrderQtyFieldNumber = 15,
    kPriceFieldNumber = 16,
  };
  // required string ApplID = 1;
  bool has_applid() const;
  private:
  bool _internal_has_applid() const;
  public:
  void clear_applid();
  const std::string& applid() const;
  void set_applid(const std::string& value);
  void set_applid(std::string&& value);
  void set_applid(const char* value);
  void set_applid(const char* value, size_t size);
  std::string* mutable_applid();
  std::string* release_applid();
  void set_allocated_applid(std::string* applid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_applid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_applid(
      std::string* applid);
  private:
  const std::string& _internal_applid() const;
  void _internal_set_applid(const std::string& value);
  std::string* _internal_mutable_applid();
  public:

  // required string SubmittingPBUID = 2;
  bool has_submittingpbuid() const;
  private:
  bool _internal_has_submittingpbuid() const;
  public:
  void clear_submittingpbuid();
  const std::string& submittingpbuid() const;
  void set_submittingpbuid(const std::string& value);
  void set_submittingpbuid(std::string&& value);
  void set_submittingpbuid(const char* value);
  void set_submittingpbuid(const char* value, size_t size);
  std::string* mutable_submittingpbuid();
  std::string* release_submittingpbuid();
  void set_allocated_submittingpbuid(std::string* submittingpbuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_submittingpbuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_submittingpbuid(
      std::string* submittingpbuid);
  private:
  const std::string& _internal_submittingpbuid() const;
  void _internal_set_submittingpbuid(const std::string& value);
  std::string* _internal_mutable_submittingpbuid();
  public:

  // required string SecurityID = 3;
  bool has_securityid() const;
  private:
  bool _internal_has_securityid() const;
  public:
  void clear_securityid();
  const std::string& securityid() const;
  void set_securityid(const std::string& value);
  void set_securityid(std::string&& value);
  void set_securityid(const char* value);
  void set_securityid(const char* value, size_t size);
  std::string* mutable_securityid();
  std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityid(
      std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // required string SecurityIDSource = 4;
  bool has_securityidsource() const;
  private:
  bool _internal_has_securityidsource() const;
  public:
  void clear_securityidsource();
  const std::string& securityidsource() const;
  void set_securityidsource(const std::string& value);
  void set_securityidsource(std::string&& value);
  void set_securityidsource(const char* value);
  void set_securityidsource(const char* value, size_t size);
  std::string* mutable_securityidsource();
  std::string* release_securityidsource();
  void set_allocated_securityidsource(std::string* securityidsource);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityidsource();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityidsource(
      std::string* securityidsource);
  private:
  const std::string& _internal_securityidsource() const;
  void _internal_set_securityidsource(const std::string& value);
  std::string* _internal_mutable_securityidsource();
  public:

  // required string ClearingFirm = 6;
  bool has_clearingfirm() const;
  private:
  bool _internal_has_clearingfirm() const;
  public:
  void clear_clearingfirm();
  const std::string& clearingfirm() const;
  void set_clearingfirm(const std::string& value);
  void set_clearingfirm(std::string&& value);
  void set_clearingfirm(const char* value);
  void set_clearingfirm(const char* value, size_t size);
  std::string* mutable_clearingfirm();
  std::string* release_clearingfirm();
  void set_allocated_clearingfirm(std::string* clearingfirm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clearingfirm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clearingfirm(
      std::string* clearingfirm);
  private:
  const std::string& _internal_clearingfirm() const;
  void _internal_set_clearingfirm(const std::string& value);
  std::string* _internal_mutable_clearingfirm();
  public:

  // required string TransactTime = 7;
  bool has_transacttime() const;
  private:
  bool _internal_has_transacttime() const;
  public:
  void clear_transacttime();
  const std::string& transacttime() const;
  void set_transacttime(const std::string& value);
  void set_transacttime(std::string&& value);
  void set_transacttime(const char* value);
  void set_transacttime(const char* value, size_t size);
  std::string* mutable_transacttime();
  std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transacttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transacttime(
      std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // required string UserInfo = 8;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const std::string& userinfo() const;
  void set_userinfo(const std::string& value);
  void set_userinfo(std::string&& value);
  void set_userinfo(const char* value);
  void set_userinfo(const char* value, size_t size);
  std::string* mutable_userinfo();
  std::string* release_userinfo();
  void set_allocated_userinfo(std::string* userinfo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userinfo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userinfo(
      std::string* userinfo);
  private:
  const std::string& _internal_userinfo() const;
  void _internal_set_userinfo(const std::string& value);
  std::string* _internal_mutable_userinfo();
  public:

  // required string ClOrdID = 9;
  bool has_clordid() const;
  private:
  bool _internal_has_clordid() const;
  public:
  void clear_clordid();
  const std::string& clordid() const;
  void set_clordid(const std::string& value);
  void set_clordid(std::string&& value);
  void set_clordid(const char* value);
  void set_clordid(const char* value, size_t size);
  std::string* mutable_clordid();
  std::string* release_clordid();
  void set_allocated_clordid(std::string* clordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clordid(
      std::string* clordid);
  private:
  const std::string& _internal_clordid() const;
  void _internal_set_clordid(const std::string& value);
  std::string* _internal_mutable_clordid();
  public:

  // required string AccountID = 10;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accountid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accountid(
      std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // required string BranchID = 11;
  bool has_branchid() const;
  private:
  bool _internal_has_branchid() const;
  public:
  void clear_branchid();
  const std::string& branchid() const;
  void set_branchid(const std::string& value);
  void set_branchid(std::string&& value);
  void set_branchid(const char* value);
  void set_branchid(const char* value, size_t size);
  std::string* mutable_branchid();
  std::string* release_branchid();
  void set_allocated_branchid(std::string* branchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branchid(
      std::string* branchid);
  private:
  const std::string& _internal_branchid() const;
  void _internal_set_branchid(const std::string& value);
  std::string* _internal_mutable_branchid();
  public:

  // required string OrderRestrictions = 12;
  bool has_orderrestrictions() const;
  private:
  bool _internal_has_orderrestrictions() const;
  public:
  void clear_orderrestrictions();
  const std::string& orderrestrictions() const;
  void set_orderrestrictions(const std::string& value);
  void set_orderrestrictions(std::string&& value);
  void set_orderrestrictions(const char* value);
  void set_orderrestrictions(const char* value, size_t size);
  std::string* mutable_orderrestrictions();
  std::string* release_orderrestrictions();
  void set_allocated_orderrestrictions(std::string* orderrestrictions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_orderrestrictions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_orderrestrictions(
      std::string* orderrestrictions);
  private:
  const std::string& _internal_orderrestrictions() const;
  void _internal_set_orderrestrictions(const std::string& value);
  std::string* _internal_mutable_orderrestrictions();
  public:

  // required string Side = 13;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  const std::string& side() const;
  void set_side(const std::string& value);
  void set_side(std::string&& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  std::string* mutable_side();
  std::string* release_side();
  void set_allocated_side(std::string* side);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_side();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_side(
      std::string* side);
  private:
  const std::string& _internal_side() const;
  void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // required string OrdType = 14;
  bool has_ordtype() const;
  private:
  bool _internal_has_ordtype() const;
  public:
  void clear_ordtype();
  const std::string& ordtype() const;
  void set_ordtype(const std::string& value);
  void set_ordtype(std::string&& value);
  void set_ordtype(const char* value);
  void set_ordtype(const char* value, size_t size);
  std::string* mutable_ordtype();
  std::string* release_ordtype();
  void set_allocated_ordtype(std::string* ordtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordtype(
      std::string* ordtype);
  private:
  const std::string& _internal_ordtype() const;
  void _internal_set_ordtype(const std::string& value);
  std::string* _internal_mutable_ordtype();
  public:

  // optional .GatewayProto.Extend_Fields ExtendFields = 17;
  bool has_extendfields() const;
  private:
  bool _internal_has_extendfields() const;
  public:
  void clear_extendfields();
  const ::GatewayProto::Extend_Fields& extendfields() const;
  ::GatewayProto::Extend_Fields* release_extendfields();
  ::GatewayProto::Extend_Fields* mutable_extendfields();
  void set_allocated_extendfields(::GatewayProto::Extend_Fields* extendfields);
  private:
  const ::GatewayProto::Extend_Fields& _internal_extendfields() const;
  ::GatewayProto::Extend_Fields* _internal_mutable_extendfields();
  public:
  void unsafe_arena_set_allocated_extendfields(
      ::GatewayProto::Extend_Fields* extendfields);
  ::GatewayProto::Extend_Fields* unsafe_arena_release_extendfields();

  // required uint32 OwnerType = 5;
  bool has_ownertype() const;
  private:
  bool _internal_has_ownertype() const;
  public:
  void clear_ownertype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype() const;
  void set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ownertype() const;
  void _internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 OrderQty = 15;
  bool has_orderqty() const;
  private:
  bool _internal_has_orderqty() const;
  public:
  void clear_orderqty();
  ::PROTOBUF_NAMESPACE_ID::uint32 orderqty() const;
  void set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_orderqty() const;
  void _internal_set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float Price = 16;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.New_Order)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submittingpbuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityidsource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearingfirm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branchid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderrestrictions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordtype_;
  ::GatewayProto::Extend_Fields* extendfields_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orderqty_;
  float price_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Executive_Report PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Executive_Report) */ {
 public:
  inline Executive_Report() : Executive_Report(nullptr) {};
  virtual ~Executive_Report();

  Executive_Report(const Executive_Report& from);
  Executive_Report(Executive_Report&& from) noexcept
    : Executive_Report() {
    *this = ::std::move(from);
  }

  inline Executive_Report& operator=(const Executive_Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline Executive_Report& operator=(Executive_Report&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Executive_Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Executive_Report* internal_default_instance() {
    return reinterpret_cast<const Executive_Report*>(
               &_Executive_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Executive_Report& a, Executive_Report& b) {
    a.Swap(&b);
  }
  inline void Swap(Executive_Report* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Executive_Report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Executive_Report* New() const final {
    return CreateMaybeMessage<Executive_Report>(nullptr);
  }

  Executive_Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Executive_Report>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Executive_Report& from);
  void MergeFrom(const Executive_Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Executive_Report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Executive_Report";
  }
  protected:
  explicit Executive_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplIDFieldNumber = 4,
    kReportingPBUIDFieldNumber = 5,
    kSubmittingPBUIDFieldNumber = 6,
    kSecurityIDFieldNumber = 7,
    kSecurityIDSourceFieldNumber = 8,
    kClearingFirmFieldNumber = 10,
    kTransactTimeFieldNumber = 11,
    kUserInfoFieldNumber = 12,
    kOrderIDFieldNumber = 13,
    kClOrdIDFieldNumber = 14,
    kOrigClOrdIDFieldNumber = 15,
    kExecIDFieldNumber = 16,
    kExecTypeFieldNumber = 17,
    kOrdStatusFieldNumber = 18,
    kOrdRejReasonFieldNumber = 19,
    kSideFieldNumber = 22,
    kOrdTypeFieldNumber = 23,
    kAccountIDFieldNumber = 26,
    kBranchIDFieldNumber = 27,
    kOrderRestrictionsFieldNumber = 28,
    kExtendFieldsFieldNumber = 29,
    kPartitionNoFieldNumber = 2,
    kReportIndexFieldNumber = 3,
    kOwnerTypeFieldNumber = 9,
    kLeavesQtyFieldNumber = 20,
    kCumQtyFieldNumber = 21,
    kOrderQtyFieldNumber = 24,
    kPriceFieldNumber = 25,
  };
  // required string ApplID = 4;
  bool has_applid() const;
  private:
  bool _internal_has_applid() const;
  public:
  void clear_applid();
  const std::string& applid() const;
  void set_applid(const std::string& value);
  void set_applid(std::string&& value);
  void set_applid(const char* value);
  void set_applid(const char* value, size_t size);
  std::string* mutable_applid();
  std::string* release_applid();
  void set_allocated_applid(std::string* applid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_applid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_applid(
      std::string* applid);
  private:
  const std::string& _internal_applid() const;
  void _internal_set_applid(const std::string& value);
  std::string* _internal_mutable_applid();
  public:

  // required string ReportingPBUID = 5;
  bool has_reportingpbuid() const;
  private:
  bool _internal_has_reportingpbuid() const;
  public:
  void clear_reportingpbuid();
  const std::string& reportingpbuid() const;
  void set_reportingpbuid(const std::string& value);
  void set_reportingpbuid(std::string&& value);
  void set_reportingpbuid(const char* value);
  void set_reportingpbuid(const char* value, size_t size);
  std::string* mutable_reportingpbuid();
  std::string* release_reportingpbuid();
  void set_allocated_reportingpbuid(std::string* reportingpbuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reportingpbuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reportingpbuid(
      std::string* reportingpbuid);
  private:
  const std::string& _internal_reportingpbuid() const;
  void _internal_set_reportingpbuid(const std::string& value);
  std::string* _internal_mutable_reportingpbuid();
  public:

  // required string SubmittingPBUID = 6;
  bool has_submittingpbuid() const;
  private:
  bool _internal_has_submittingpbuid() const;
  public:
  void clear_submittingpbuid();
  const std::string& submittingpbuid() const;
  void set_submittingpbuid(const std::string& value);
  void set_submittingpbuid(std::string&& value);
  void set_submittingpbuid(const char* value);
  void set_submittingpbuid(const char* value, size_t size);
  std::string* mutable_submittingpbuid();
  std::string* release_submittingpbuid();
  void set_allocated_submittingpbuid(std::string* submittingpbuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_submittingpbuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_submittingpbuid(
      std::string* submittingpbuid);
  private:
  const std::string& _internal_submittingpbuid() const;
  void _internal_set_submittingpbuid(const std::string& value);
  std::string* _internal_mutable_submittingpbuid();
  public:

  // required string SecurityID = 7;
  bool has_securityid() const;
  private:
  bool _internal_has_securityid() const;
  public:
  void clear_securityid();
  const std::string& securityid() const;
  void set_securityid(const std::string& value);
  void set_securityid(std::string&& value);
  void set_securityid(const char* value);
  void set_securityid(const char* value, size_t size);
  std::string* mutable_securityid();
  std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityid(
      std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // required string SecurityIDSource = 8;
  bool has_securityidsource() const;
  private:
  bool _internal_has_securityidsource() const;
  public:
  void clear_securityidsource();
  const std::string& securityidsource() const;
  void set_securityidsource(const std::string& value);
  void set_securityidsource(std::string&& value);
  void set_securityidsource(const char* value);
  void set_securityidsource(const char* value, size_t size);
  std::string* mutable_securityidsource();
  std::string* release_securityidsource();
  void set_allocated_securityidsource(std::string* securityidsource);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityidsource();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityidsource(
      std::string* securityidsource);
  private:
  const std::string& _internal_securityidsource() const;
  void _internal_set_securityidsource(const std::string& value);
  std::string* _internal_mutable_securityidsource();
  public:

  // required string ClearingFirm = 10;
  bool has_clearingfirm() const;
  private:
  bool _internal_has_clearingfirm() const;
  public:
  void clear_clearingfirm();
  const std::string& clearingfirm() const;
  void set_clearingfirm(const std::string& value);
  void set_clearingfirm(std::string&& value);
  void set_clearingfirm(const char* value);
  void set_clearingfirm(const char* value, size_t size);
  std::string* mutable_clearingfirm();
  std::string* release_clearingfirm();
  void set_allocated_clearingfirm(std::string* clearingfirm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clearingfirm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clearingfirm(
      std::string* clearingfirm);
  private:
  const std::string& _internal_clearingfirm() const;
  void _internal_set_clearingfirm(const std::string& value);
  std::string* _internal_mutable_clearingfirm();
  public:

  // required string TransactTime = 11;
  bool has_transacttime() const;
  private:
  bool _internal_has_transacttime() const;
  public:
  void clear_transacttime();
  const std::string& transacttime() const;
  void set_transacttime(const std::string& value);
  void set_transacttime(std::string&& value);
  void set_transacttime(const char* value);
  void set_transacttime(const char* value, size_t size);
  std::string* mutable_transacttime();
  std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transacttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transacttime(
      std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // required string UserInfo = 12;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const std::string& userinfo() const;
  void set_userinfo(const std::string& value);
  void set_userinfo(std::string&& value);
  void set_userinfo(const char* value);
  void set_userinfo(const char* value, size_t size);
  std::string* mutable_userinfo();
  std::string* release_userinfo();
  void set_allocated_userinfo(std::string* userinfo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userinfo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userinfo(
      std::string* userinfo);
  private:
  const std::string& _internal_userinfo() const;
  void _internal_set_userinfo(const std::string& value);
  std::string* _internal_mutable_userinfo();
  public:

  // required string OrderID = 13;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_orderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_orderid(
      std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // required string ClOrdID = 14;
  bool has_clordid() const;
  private:
  bool _internal_has_clordid() const;
  public:
  void clear_clordid();
  const std::string& clordid() const;
  void set_clordid(const std::string& value);
  void set_clordid(std::string&& value);
  void set_clordid(const char* value);
  void set_clordid(const char* value, size_t size);
  std::string* mutable_clordid();
  std::string* release_clordid();
  void set_allocated_clordid(std::string* clordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clordid(
      std::string* clordid);
  private:
  const std::string& _internal_clordid() const;
  void _internal_set_clordid(const std::string& value);
  std::string* _internal_mutable_clordid();
  public:

  // required string OrigClOrdID = 15;
  bool has_origclordid() const;
  private:
  bool _internal_has_origclordid() const;
  public:
  void clear_origclordid();
  const std::string& origclordid() const;
  void set_origclordid(const std::string& value);
  void set_origclordid(std::string&& value);
  void set_origclordid(const char* value);
  void set_origclordid(const char* value, size_t size);
  std::string* mutable_origclordid();
  std::string* release_origclordid();
  void set_allocated_origclordid(std::string* origclordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_origclordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_origclordid(
      std::string* origclordid);
  private:
  const std::string& _internal_origclordid() const;
  void _internal_set_origclordid(const std::string& value);
  std::string* _internal_mutable_origclordid();
  public:

  // required string ExecID = 16;
  bool has_execid() const;
  private:
  bool _internal_has_execid() const;
  public:
  void clear_execid();
  const std::string& execid() const;
  void set_execid(const std::string& value);
  void set_execid(std::string&& value);
  void set_execid(const char* value);
  void set_execid(const char* value, size_t size);
  std::string* mutable_execid();
  std::string* release_execid();
  void set_allocated_execid(std::string* execid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_execid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_execid(
      std::string* execid);
  private:
  const std::string& _internal_execid() const;
  void _internal_set_execid(const std::string& value);
  std::string* _internal_mutable_execid();
  public:

  // required string ExecType = 17;
  bool has_exectype() const;
  private:
  bool _internal_has_exectype() const;
  public:
  void clear_exectype();
  const std::string& exectype() const;
  void set_exectype(const std::string& value);
  void set_exectype(std::string&& value);
  void set_exectype(const char* value);
  void set_exectype(const char* value, size_t size);
  std::string* mutable_exectype();
  std::string* release_exectype();
  void set_allocated_exectype(std::string* exectype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exectype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exectype(
      std::string* exectype);
  private:
  const std::string& _internal_exectype() const;
  void _internal_set_exectype(const std::string& value);
  std::string* _internal_mutable_exectype();
  public:

  // required string OrdStatus = 18;
  bool has_ordstatus() const;
  private:
  bool _internal_has_ordstatus() const;
  public:
  void clear_ordstatus();
  const std::string& ordstatus() const;
  void set_ordstatus(const std::string& value);
  void set_ordstatus(std::string&& value);
  void set_ordstatus(const char* value);
  void set_ordstatus(const char* value, size_t size);
  std::string* mutable_ordstatus();
  std::string* release_ordstatus();
  void set_allocated_ordstatus(std::string* ordstatus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordstatus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordstatus(
      std::string* ordstatus);
  private:
  const std::string& _internal_ordstatus() const;
  void _internal_set_ordstatus(const std::string& value);
  std::string* _internal_mutable_ordstatus();
  public:

  // required string OrdRejReason = 19;
  bool has_ordrejreason() const;
  private:
  bool _internal_has_ordrejreason() const;
  public:
  void clear_ordrejreason();
  const std::string& ordrejreason() const;
  void set_ordrejreason(const std::string& value);
  void set_ordrejreason(std::string&& value);
  void set_ordrejreason(const char* value);
  void set_ordrejreason(const char* value, size_t size);
  std::string* mutable_ordrejreason();
  std::string* release_ordrejreason();
  void set_allocated_ordrejreason(std::string* ordrejreason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordrejreason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordrejreason(
      std::string* ordrejreason);
  private:
  const std::string& _internal_ordrejreason() const;
  void _internal_set_ordrejreason(const std::string& value);
  std::string* _internal_mutable_ordrejreason();
  public:

  // required string Side = 22;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  const std::string& side() const;
  void set_side(const std::string& value);
  void set_side(std::string&& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  std::string* mutable_side();
  std::string* release_side();
  void set_allocated_side(std::string* side);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_side();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_side(
      std::string* side);
  private:
  const std::string& _internal_side() const;
  void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // required string OrdType = 23;
  bool has_ordtype() const;
  private:
  bool _internal_has_ordtype() const;
  public:
  void clear_ordtype();
  const std::string& ordtype() const;
  void set_ordtype(const std::string& value);
  void set_ordtype(std::string&& value);
  void set_ordtype(const char* value);
  void set_ordtype(const char* value, size_t size);
  std::string* mutable_ordtype();
  std::string* release_ordtype();
  void set_allocated_ordtype(std::string* ordtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordtype(
      std::string* ordtype);
  private:
  const std::string& _internal_ordtype() const;
  void _internal_set_ordtype(const std::string& value);
  std::string* _internal_mutable_ordtype();
  public:

  // required string AccountID = 26;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accountid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accountid(
      std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // required string BranchID = 27;
  bool has_branchid() const;
  private:
  bool _internal_has_branchid() const;
  public:
  void clear_branchid();
  const std::string& branchid() const;
  void set_branchid(const std::string& value);
  void set_branchid(std::string&& value);
  void set_branchid(const char* value);
  void set_branchid(const char* value, size_t size);
  std::string* mutable_branchid();
  std::string* release_branchid();
  void set_allocated_branchid(std::string* branchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branchid(
      std::string* branchid);
  private:
  const std::string& _internal_branchid() const;
  void _internal_set_branchid(const std::string& value);
  std::string* _internal_mutable_branchid();
  public:

  // required string OrderRestrictions = 28;
  bool has_orderrestrictions() const;
  private:
  bool _internal_has_orderrestrictions() const;
  public:
  void clear_orderrestrictions();
  const std::string& orderrestrictions() const;
  void set_orderrestrictions(const std::string& value);
  void set_orderrestrictions(std::string&& value);
  void set_orderrestrictions(const char* value);
  void set_orderrestrictions(const char* value, size_t size);
  std::string* mutable_orderrestrictions();
  std::string* release_orderrestrictions();
  void set_allocated_orderrestrictions(std::string* orderrestrictions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_orderrestrictions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_orderrestrictions(
      std::string* orderrestrictions);
  private:
  const std::string& _internal_orderrestrictions() const;
  void _internal_set_orderrestrictions(const std::string& value);
  std::string* _internal_mutable_orderrestrictions();
  public:

  // optional .GatewayProto.Extend_Fields ExtendFields = 29;
  bool has_extendfields() const;
  private:
  bool _internal_has_extendfields() const;
  public:
  void clear_extendfields();
  const ::GatewayProto::Extend_Fields& extendfields() const;
  ::GatewayProto::Extend_Fields* release_extendfields();
  ::GatewayProto::Extend_Fields* mutable_extendfields();
  void set_allocated_extendfields(::GatewayProto::Extend_Fields* extendfields);
  private:
  const ::GatewayProto::Extend_Fields& _internal_extendfields() const;
  ::GatewayProto::Extend_Fields* _internal_mutable_extendfields();
  public:
  void unsafe_arena_set_allocated_extendfields(
      ::GatewayProto::Extend_Fields* extendfields);
  ::GatewayProto::Extend_Fields* unsafe_arena_release_extendfields();

  // required int32 PartitionNo = 2;
  bool has_partitionno() const;
  private:
  bool _internal_has_partitionno() const;
  public:
  void clear_partitionno();
  ::PROTOBUF_NAMESPACE_ID::int32 partitionno() const;
  void set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partitionno() const;
  void _internal_set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 ReportIndex = 3;
  bool has_reportindex() const;
  private:
  bool _internal_has_reportindex() const;
  public:
  void clear_reportindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 reportindex() const;
  void set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reportindex() const;
  void _internal_set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 OwnerType = 9;
  bool has_ownertype() const;
  private:
  bool _internal_has_ownertype() const;
  public:
  void clear_ownertype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype() const;
  void set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ownertype() const;
  void _internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 LeavesQty = 20;
  bool has_leavesqty() const;
  private:
  bool _internal_has_leavesqty() const;
  public:
  void clear_leavesqty();
  ::PROTOBUF_NAMESPACE_ID::int32 leavesqty() const;
  void set_leavesqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leavesqty() const;
  void _internal_set_leavesqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 CumQty = 21;
  bool has_cumqty() const;
  private:
  bool _internal_has_cumqty() const;
  public:
  void clear_cumqty();
  ::PROTOBUF_NAMESPACE_ID::int32 cumqty() const;
  void set_cumqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cumqty() const;
  void _internal_set_cumqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 OrderQty = 24;
  bool has_orderqty() const;
  private:
  bool _internal_has_orderqty() const;
  public:
  void clear_orderqty();
  ::PROTOBUF_NAMESPACE_ID::uint32 orderqty() const;
  void set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_orderqty() const;
  void _internal_set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float Price = 25;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Executive_Report)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reportingpbuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submittingpbuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityidsource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearingfirm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origclordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exectype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordrejreason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branchid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderrestrictions_;
  ::GatewayProto::Extend_Fields* extendfields_;
  ::PROTOBUF_NAMESPACE_ID::int32 partitionno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reportindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype_;
  ::PROTOBUF_NAMESPACE_ID::int32 leavesqty_;
  ::PROTOBUF_NAMESPACE_ID::int32 cumqty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orderqty_;
  float price_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Report PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Transaction_Report) */ {
 public:
  inline Transaction_Report() : Transaction_Report(nullptr) {};
  virtual ~Transaction_Report();

  Transaction_Report(const Transaction_Report& from);
  Transaction_Report(Transaction_Report&& from) noexcept
    : Transaction_Report() {
    *this = ::std::move(from);
  }

  inline Transaction_Report& operator=(const Transaction_Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Report& operator=(Transaction_Report&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction_Report* internal_default_instance() {
    return reinterpret_cast<const Transaction_Report*>(
               &_Transaction_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Transaction_Report& a, Transaction_Report& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Report* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Report* New() const final {
    return CreateMaybeMessage<Transaction_Report>(nullptr);
  }

  Transaction_Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Report>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Report& from);
  void MergeFrom(const Transaction_Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Transaction_Report";
  }
  protected:
  explicit Transaction_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplIDFieldNumber = 4,
    kReportingPBUIDFieldNumber = 5,
    kSubmittingPBUIDFieldNumber = 6,
    kSecurityIDFieldNumber = 7,
    kSecurityIDSourceFieldNumber = 8,
    kClearingFirmFieldNumber = 10,
    kTransactTimeFieldNumber = 11,
    kUserInfoFieldNumber = 12,
    kOrderIDFieldNumber = 13,
    kClOrdIDFieldNumber = 14,
    kExecIDFieldNumber = 15,
    kExecTypeFieldNumber = 16,
    kOrdStatusFieldNumber = 17,
    kSideFieldNumber = 22,
    kAccountIDFieldNumber = 23,
    kBranchIDFieldNumber = 24,
    kExtendFieldsFieldNumber = 25,
    kPartitionNoFieldNumber = 2,
    kReportIndexFieldNumber = 3,
    kOwnerTypeFieldNumber = 9,
    kLastPxFieldNumber = 18,
    kLastQtyFieldNumber = 19,
    kLeavesQtyFieldNumber = 20,
    kCumQtyFieldNumber = 21,
  };
  // required string ApplID = 4;
  bool has_applid() const;
  private:
  bool _internal_has_applid() const;
  public:
  void clear_applid();
  const std::string& applid() const;
  void set_applid(const std::string& value);
  void set_applid(std::string&& value);
  void set_applid(const char* value);
  void set_applid(const char* value, size_t size);
  std::string* mutable_applid();
  std::string* release_applid();
  void set_allocated_applid(std::string* applid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_applid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_applid(
      std::string* applid);
  private:
  const std::string& _internal_applid() const;
  void _internal_set_applid(const std::string& value);
  std::string* _internal_mutable_applid();
  public:

  // required string ReportingPBUID = 5;
  bool has_reportingpbuid() const;
  private:
  bool _internal_has_reportingpbuid() const;
  public:
  void clear_reportingpbuid();
  const std::string& reportingpbuid() const;
  void set_reportingpbuid(const std::string& value);
  void set_reportingpbuid(std::string&& value);
  void set_reportingpbuid(const char* value);
  void set_reportingpbuid(const char* value, size_t size);
  std::string* mutable_reportingpbuid();
  std::string* release_reportingpbuid();
  void set_allocated_reportingpbuid(std::string* reportingpbuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reportingpbuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reportingpbuid(
      std::string* reportingpbuid);
  private:
  const std::string& _internal_reportingpbuid() const;
  void _internal_set_reportingpbuid(const std::string& value);
  std::string* _internal_mutable_reportingpbuid();
  public:

  // required string SubmittingPBUID = 6;
  bool has_submittingpbuid() const;
  private:
  bool _internal_has_submittingpbuid() const;
  public:
  void clear_submittingpbuid();
  const std::string& submittingpbuid() const;
  void set_submittingpbuid(const std::string& value);
  void set_submittingpbuid(std::string&& value);
  void set_submittingpbuid(const char* value);
  void set_submittingpbuid(const char* value, size_t size);
  std::string* mutable_submittingpbuid();
  std::string* release_submittingpbuid();
  void set_allocated_submittingpbuid(std::string* submittingpbuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_submittingpbuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_submittingpbuid(
      std::string* submittingpbuid);
  private:
  const std::string& _internal_submittingpbuid() const;
  void _internal_set_submittingpbuid(const std::string& value);
  std::string* _internal_mutable_submittingpbuid();
  public:

  // required string SecurityID = 7;
  bool has_securityid() const;
  private:
  bool _internal_has_securityid() const;
  public:
  void clear_securityid();
  const std::string& securityid() const;
  void set_securityid(const std::string& value);
  void set_securityid(std::string&& value);
  void set_securityid(const char* value);
  void set_securityid(const char* value, size_t size);
  std::string* mutable_securityid();
  std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityid(
      std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // required string SecurityIDSource = 8;
  bool has_securityidsource() const;
  private:
  bool _internal_has_securityidsource() const;
  public:
  void clear_securityidsource();
  const std::string& securityidsource() const;
  void set_securityidsource(const std::string& value);
  void set_securityidsource(std::string&& value);
  void set_securityidsource(const char* value);
  void set_securityidsource(const char* value, size_t size);
  std::string* mutable_securityidsource();
  std::string* release_securityidsource();
  void set_allocated_securityidsource(std::string* securityidsource);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityidsource();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityidsource(
      std::string* securityidsource);
  private:
  const std::string& _internal_securityidsource() const;
  void _internal_set_securityidsource(const std::string& value);
  std::string* _internal_mutable_securityidsource();
  public:

  // required string ClearingFirm = 10;
  bool has_clearingfirm() const;
  private:
  bool _internal_has_clearingfirm() const;
  public:
  void clear_clearingfirm();
  const std::string& clearingfirm() const;
  void set_clearingfirm(const std::string& value);
  void set_clearingfirm(std::string&& value);
  void set_clearingfirm(const char* value);
  void set_clearingfirm(const char* value, size_t size);
  std::string* mutable_clearingfirm();
  std::string* release_clearingfirm();
  void set_allocated_clearingfirm(std::string* clearingfirm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clearingfirm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clearingfirm(
      std::string* clearingfirm);
  private:
  const std::string& _internal_clearingfirm() const;
  void _internal_set_clearingfirm(const std::string& value);
  std::string* _internal_mutable_clearingfirm();
  public:

  // required string TransactTime = 11;
  bool has_transacttime() const;
  private:
  bool _internal_has_transacttime() const;
  public:
  void clear_transacttime();
  const std::string& transacttime() const;
  void set_transacttime(const std::string& value);
  void set_transacttime(std::string&& value);
  void set_transacttime(const char* value);
  void set_transacttime(const char* value, size_t size);
  std::string* mutable_transacttime();
  std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transacttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transacttime(
      std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // required string UserInfo = 12;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const std::string& userinfo() const;
  void set_userinfo(const std::string& value);
  void set_userinfo(std::string&& value);
  void set_userinfo(const char* value);
  void set_userinfo(const char* value, size_t size);
  std::string* mutable_userinfo();
  std::string* release_userinfo();
  void set_allocated_userinfo(std::string* userinfo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userinfo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userinfo(
      std::string* userinfo);
  private:
  const std::string& _internal_userinfo() const;
  void _internal_set_userinfo(const std::string& value);
  std::string* _internal_mutable_userinfo();
  public:

  // required string OrderID = 13;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_orderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_orderid(
      std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // required string ClOrdID = 14;
  bool has_clordid() const;
  private:
  bool _internal_has_clordid() const;
  public:
  void clear_clordid();
  const std::string& clordid() const;
  void set_clordid(const std::string& value);
  void set_clordid(std::string&& value);
  void set_clordid(const char* value);
  void set_clordid(const char* value, size_t size);
  std::string* mutable_clordid();
  std::string* release_clordid();
  void set_allocated_clordid(std::string* clordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clordid(
      std::string* clordid);
  private:
  const std::string& _internal_clordid() const;
  void _internal_set_clordid(const std::string& value);
  std::string* _internal_mutable_clordid();
  public:

  // required string ExecID = 15;
  bool has_execid() const;
  private:
  bool _internal_has_execid() const;
  public:
  void clear_execid();
  const std::string& execid() const;
  void set_execid(const std::string& value);
  void set_execid(std::string&& value);
  void set_execid(const char* value);
  void set_execid(const char* value, size_t size);
  std::string* mutable_execid();
  std::string* release_execid();
  void set_allocated_execid(std::string* execid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_execid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_execid(
      std::string* execid);
  private:
  const std::string& _internal_execid() const;
  void _internal_set_execid(const std::string& value);
  std::string* _internal_mutable_execid();
  public:

  // required string ExecType = 16;
  bool has_exectype() const;
  private:
  bool _internal_has_exectype() const;
  public:
  void clear_exectype();
  const std::string& exectype() const;
  void set_exectype(const std::string& value);
  void set_exectype(std::string&& value);
  void set_exectype(const char* value);
  void set_exectype(const char* value, size_t size);
  std::string* mutable_exectype();
  std::string* release_exectype();
  void set_allocated_exectype(std::string* exectype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exectype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exectype(
      std::string* exectype);
  private:
  const std::string& _internal_exectype() const;
  void _internal_set_exectype(const std::string& value);
  std::string* _internal_mutable_exectype();
  public:

  // required string OrdStatus = 17;
  bool has_ordstatus() const;
  private:
  bool _internal_has_ordstatus() const;
  public:
  void clear_ordstatus();
  const std::string& ordstatus() const;
  void set_ordstatus(const std::string& value);
  void set_ordstatus(std::string&& value);
  void set_ordstatus(const char* value);
  void set_ordstatus(const char* value, size_t size);
  std::string* mutable_ordstatus();
  std::string* release_ordstatus();
  void set_allocated_ordstatus(std::string* ordstatus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordstatus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordstatus(
      std::string* ordstatus);
  private:
  const std::string& _internal_ordstatus() const;
  void _internal_set_ordstatus(const std::string& value);
  std::string* _internal_mutable_ordstatus();
  public:

  // required string Side = 22;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  const std::string& side() const;
  void set_side(const std::string& value);
  void set_side(std::string&& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  std::string* mutable_side();
  std::string* release_side();
  void set_allocated_side(std::string* side);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_side();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_side(
      std::string* side);
  private:
  const std::string& _internal_side() const;
  void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // required string AccountID = 23;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accountid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accountid(
      std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // required string BranchID = 24;
  bool has_branchid() const;
  private:
  bool _internal_has_branchid() const;
  public:
  void clear_branchid();
  const std::string& branchid() const;
  void set_branchid(const std::string& value);
  void set_branchid(std::string&& value);
  void set_branchid(const char* value);
  void set_branchid(const char* value, size_t size);
  std::string* mutable_branchid();
  std::string* release_branchid();
  void set_allocated_branchid(std::string* branchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_branchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_branchid(
      std::string* branchid);
  private:
  const std::string& _internal_branchid() const;
  void _internal_set_branchid(const std::string& value);
  std::string* _internal_mutable_branchid();
  public:

  // optional .GatewayProto.Extend_Fields ExtendFields = 25;
  bool has_extendfields() const;
  private:
  bool _internal_has_extendfields() const;
  public:
  void clear_extendfields();
  const ::GatewayProto::Extend_Fields& extendfields() const;
  ::GatewayProto::Extend_Fields* release_extendfields();
  ::GatewayProto::Extend_Fields* mutable_extendfields();
  void set_allocated_extendfields(::GatewayProto::Extend_Fields* extendfields);
  private:
  const ::GatewayProto::Extend_Fields& _internal_extendfields() const;
  ::GatewayProto::Extend_Fields* _internal_mutable_extendfields();
  public:
  void unsafe_arena_set_allocated_extendfields(
      ::GatewayProto::Extend_Fields* extendfields);
  ::GatewayProto::Extend_Fields* unsafe_arena_release_extendfields();

  // required int32 PartitionNo = 2;
  bool has_partitionno() const;
  private:
  bool _internal_has_partitionno() const;
  public:
  void clear_partitionno();
  ::PROTOBUF_NAMESPACE_ID::int32 partitionno() const;
  void set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partitionno() const;
  void _internal_set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 ReportIndex = 3;
  bool has_reportindex() const;
  private:
  bool _internal_has_reportindex() const;
  public:
  void clear_reportindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 reportindex() const;
  void set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reportindex() const;
  void _internal_set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 OwnerType = 9;
  bool has_ownertype() const;
  private:
  bool _internal_has_ownertype() const;
  public:
  void clear_ownertype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype() const;
  void set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ownertype() const;
  void _internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float LastPx = 18;
  bool has_lastpx() const;
  private:
  bool _internal_has_lastpx() const;
  public:
  void clear_lastpx();
  float lastpx() const;
  void set_lastpx(float value);
  private:
  float _internal_lastpx() const;
  void _internal_set_lastpx(float value);
  public:

  // required int32 LastQty = 19;
  bool has_lastqty() const;
  private:
  bool _internal_has_lastqty() const;
  public:
  void clear_lastqty();
  ::PROTOBUF_NAMESPACE_ID::int32 lastqty() const;
  void set_lastqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastqty() const;
  void _internal_set_lastqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 LeavesQty = 20;
  bool has_leavesqty() const;
  private:
  bool _internal_has_leavesqty() const;
  public:
  void clear_leavesqty();
  ::PROTOBUF_NAMESPACE_ID::int32 leavesqty() const;
  void set_leavesqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leavesqty() const;
  void _internal_set_leavesqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 CumQty = 21;
  bool has_cumqty() const;
  private:
  bool _internal_has_cumqty() const;
  public:
  void clear_cumqty();
  ::PROTOBUF_NAMESPACE_ID::int32 cumqty() const;
  void set_cumqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cumqty() const;
  void _internal_set_cumqty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Transaction_Report)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reportingpbuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submittingpbuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityidsource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearingfirm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exectype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branchid_;
  ::GatewayProto::Extend_Fields* extendfields_;
  ::PROTOBUF_NAMESPACE_ID::int32 partitionno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reportindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype_;
  float lastpx_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastqty_;
  ::PROTOBUF_NAMESPACE_ID::int32 leavesqty_;
  ::PROTOBUF_NAMESPACE_ID::int32 cumqty_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Cancel_Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Cancel_Order) */ {
 public:
  inline Cancel_Order() : Cancel_Order(nullptr) {};
  virtual ~Cancel_Order();

  Cancel_Order(const Cancel_Order& from);
  Cancel_Order(Cancel_Order&& from) noexcept
    : Cancel_Order() {
    *this = ::std::move(from);
  }

  inline Cancel_Order& operator=(const Cancel_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cancel_Order& operator=(Cancel_Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cancel_Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cancel_Order* internal_default_instance() {
    return reinterpret_cast<const Cancel_Order*>(
               &_Cancel_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Cancel_Order& a, Cancel_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Cancel_Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cancel_Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cancel_Order* New() const final {
    return CreateMaybeMessage<Cancel_Order>(nullptr);
  }

  Cancel_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cancel_Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cancel_Order& from);
  void MergeFrom(const Cancel_Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cancel_Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Cancel_Order";
  }
  protected:
  explicit Cancel_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplIDFieldNumber = 2,
    kSubmittingPBUIDFieldNumber = 3,
    kSecurityIDFieldNumber = 4,
    kSecurityIDSourceFieldNumber = 5,
    kClearingFirmFieldNumber = 7,
    kTransactTimeFieldNumber = 8,
    kUserInfoFieldNumber = 9,
    kClOrdIDFieldNumber = 10,
    kOrigClOrdIDFieldNumber = 11,
    kSideFieldNumber = 12,
    kOrderIDFieldNumber = 13,
    kOwnerTypeFieldNumber = 6,
    kOrderQtyFieldNumber = 14,
  };
  // required string ApplID = 2;
  bool has_applid() const;
  private:
  bool _internal_has_applid() const;
  public:
  void clear_applid();
  const std::string& applid() const;
  void set_applid(const std::string& value);
  void set_applid(std::string&& value);
  void set_applid(const char* value);
  void set_applid(const char* value, size_t size);
  std::string* mutable_applid();
  std::string* release_applid();
  void set_allocated_applid(std::string* applid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_applid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_applid(
      std::string* applid);
  private:
  const std::string& _internal_applid() const;
  void _internal_set_applid(const std::string& value);
  std::string* _internal_mutable_applid();
  public:

  // required string SubmittingPBUID = 3;
  bool has_submittingpbuid() const;
  private:
  bool _internal_has_submittingpbuid() const;
  public:
  void clear_submittingpbuid();
  const std::string& submittingpbuid() const;
  void set_submittingpbuid(const std::string& value);
  void set_submittingpbuid(std::string&& value);
  void set_submittingpbuid(const char* value);
  void set_submittingpbuid(const char* value, size_t size);
  std::string* mutable_submittingpbuid();
  std::string* release_submittingpbuid();
  void set_allocated_submittingpbuid(std::string* submittingpbuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_submittingpbuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_submittingpbuid(
      std::string* submittingpbuid);
  private:
  const std::string& _internal_submittingpbuid() const;
  void _internal_set_submittingpbuid(const std::string& value);
  std::string* _internal_mutable_submittingpbuid();
  public:

  // required string SecurityID = 4;
  bool has_securityid() const;
  private:
  bool _internal_has_securityid() const;
  public:
  void clear_securityid();
  const std::string& securityid() const;
  void set_securityid(const std::string& value);
  void set_securityid(std::string&& value);
  void set_securityid(const char* value);
  void set_securityid(const char* value, size_t size);
  std::string* mutable_securityid();
  std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityid(
      std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // required string SecurityIDSource = 5;
  bool has_securityidsource() const;
  private:
  bool _internal_has_securityidsource() const;
  public:
  void clear_securityidsource();
  const std::string& securityidsource() const;
  void set_securityidsource(const std::string& value);
  void set_securityidsource(std::string&& value);
  void set_securityidsource(const char* value);
  void set_securityidsource(const char* value, size_t size);
  std::string* mutable_securityidsource();
  std::string* release_securityidsource();
  void set_allocated_securityidsource(std::string* securityidsource);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityidsource();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityidsource(
      std::string* securityidsource);
  private:
  const std::string& _internal_securityidsource() const;
  void _internal_set_securityidsource(const std::string& value);
  std::string* _internal_mutable_securityidsource();
  public:

  // required string ClearingFirm = 7;
  bool has_clearingfirm() const;
  private:
  bool _internal_has_clearingfirm() const;
  public:
  void clear_clearingfirm();
  const std::string& clearingfirm() const;
  void set_clearingfirm(const std::string& value);
  void set_clearingfirm(std::string&& value);
  void set_clearingfirm(const char* value);
  void set_clearingfirm(const char* value, size_t size);
  std::string* mutable_clearingfirm();
  std::string* release_clearingfirm();
  void set_allocated_clearingfirm(std::string* clearingfirm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clearingfirm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clearingfirm(
      std::string* clearingfirm);
  private:
  const std::string& _internal_clearingfirm() const;
  void _internal_set_clearingfirm(const std::string& value);
  std::string* _internal_mutable_clearingfirm();
  public:

  // required string TransactTime = 8;
  bool has_transacttime() const;
  private:
  bool _internal_has_transacttime() const;
  public:
  void clear_transacttime();
  const std::string& transacttime() const;
  void set_transacttime(const std::string& value);
  void set_transacttime(std::string&& value);
  void set_transacttime(const char* value);
  void set_transacttime(const char* value, size_t size);
  std::string* mutable_transacttime();
  std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transacttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transacttime(
      std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // required string UserInfo = 9;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const std::string& userinfo() const;
  void set_userinfo(const std::string& value);
  void set_userinfo(std::string&& value);
  void set_userinfo(const char* value);
  void set_userinfo(const char* value, size_t size);
  std::string* mutable_userinfo();
  std::string* release_userinfo();
  void set_allocated_userinfo(std::string* userinfo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userinfo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userinfo(
      std::string* userinfo);
  private:
  const std::string& _internal_userinfo() const;
  void _internal_set_userinfo(const std::string& value);
  std::string* _internal_mutable_userinfo();
  public:

  // required string ClOrdID = 10;
  bool has_clordid() const;
  private:
  bool _internal_has_clordid() const;
  public:
  void clear_clordid();
  const std::string& clordid() const;
  void set_clordid(const std::string& value);
  void set_clordid(std::string&& value);
  void set_clordid(const char* value);
  void set_clordid(const char* value, size_t size);
  std::string* mutable_clordid();
  std::string* release_clordid();
  void set_allocated_clordid(std::string* clordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clordid(
      std::string* clordid);
  private:
  const std::string& _internal_clordid() const;
  void _internal_set_clordid(const std::string& value);
  std::string* _internal_mutable_clordid();
  public:

  // required string OrigClOrdID = 11;
  bool has_origclordid() const;
  private:
  bool _internal_has_origclordid() const;
  public:
  void clear_origclordid();
  const std::string& origclordid() const;
  void set_origclordid(const std::string& value);
  void set_origclordid(std::string&& value);
  void set_origclordid(const char* value);
  void set_origclordid(const char* value, size_t size);
  std::string* mutable_origclordid();
  std::string* release_origclordid();
  void set_allocated_origclordid(std::string* origclordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_origclordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_origclordid(
      std::string* origclordid);
  private:
  const std::string& _internal_origclordid() const;
  void _internal_set_origclordid(const std::string& value);
  std::string* _internal_mutable_origclordid();
  public:

  // required string Side = 12;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  const std::string& side() const;
  void set_side(const std::string& value);
  void set_side(std::string&& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  std::string* mutable_side();
  std::string* release_side();
  void set_allocated_side(std::string* side);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_side();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_side(
      std::string* side);
  private:
  const std::string& _internal_side() const;
  void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // required string OrderID = 13;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_orderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_orderid(
      std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // required uint32 OwnerType = 6;
  bool has_ownertype() const;
  private:
  bool _internal_has_ownertype() const;
  public:
  void clear_ownertype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype() const;
  void set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ownertype() const;
  void _internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 OrderQty = 14;
  bool has_orderqty() const;
  private:
  bool _internal_has_orderqty() const;
  public:
  void clear_orderqty();
  ::PROTOBUF_NAMESPACE_ID::uint32 orderqty() const;
  void set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_orderqty() const;
  void _internal_set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Cancel_Order)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submittingpbuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityidsource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearingfirm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origclordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orderqty_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Cancel_Order_Fail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Cancel_Order_Fail) */ {
 public:
  inline Cancel_Order_Fail() : Cancel_Order_Fail(nullptr) {};
  virtual ~Cancel_Order_Fail();

  Cancel_Order_Fail(const Cancel_Order_Fail& from);
  Cancel_Order_Fail(Cancel_Order_Fail&& from) noexcept
    : Cancel_Order_Fail() {
    *this = ::std::move(from);
  }

  inline Cancel_Order_Fail& operator=(const Cancel_Order_Fail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cancel_Order_Fail& operator=(Cancel_Order_Fail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cancel_Order_Fail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cancel_Order_Fail* internal_default_instance() {
    return reinterpret_cast<const Cancel_Order_Fail*>(
               &_Cancel_Order_Fail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Cancel_Order_Fail& a, Cancel_Order_Fail& b) {
    a.Swap(&b);
  }
  inline void Swap(Cancel_Order_Fail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cancel_Order_Fail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cancel_Order_Fail* New() const final {
    return CreateMaybeMessage<Cancel_Order_Fail>(nullptr);
  }

  Cancel_Order_Fail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cancel_Order_Fail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cancel_Order_Fail& from);
  void MergeFrom(const Cancel_Order_Fail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cancel_Order_Fail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Cancel_Order_Fail";
  }
  protected:
  explicit Cancel_Order_Fail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplIDFieldNumber = 4,
    kReportingPBUIDFieldNumber = 5,
    kSubmittingPBUIDFieldNumber = 6,
    kSecurityIDFieldNumber = 7,
    kSecurityIDSourceFieldNumber = 8,
    kClearingFirmFieldNumber = 10,
    kTransactTimeFieldNumber = 11,
    kUserInfoFieldNumber = 12,
    kClOrdIDFieldNumber = 13,
    kExecIDFieldNumber = 14,
    kOrigClOrdIDFieldNumber = 15,
    kSideFieldNumber = 16,
    kOrdStatusFieldNumber = 17,
    kRejectTextFieldNumber = 19,
    kOrderIDFieldNumber = 20,
    kPartitionNoFieldNumber = 2,
    kReportIndexFieldNumber = 3,
    kOwnerTypeFieldNumber = 9,
    kCxlRejReasonFieldNumber = 18,
  };
  // required string ApplID = 4;
  bool has_applid() const;
  private:
  bool _internal_has_applid() const;
  public:
  void clear_applid();
  const std::string& applid() const;
  void set_applid(const std::string& value);
  void set_applid(std::string&& value);
  void set_applid(const char* value);
  void set_applid(const char* value, size_t size);
  std::string* mutable_applid();
  std::string* release_applid();
  void set_allocated_applid(std::string* applid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_applid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_applid(
      std::string* applid);
  private:
  const std::string& _internal_applid() const;
  void _internal_set_applid(const std::string& value);
  std::string* _internal_mutable_applid();
  public:

  // required string ReportingPBUID = 5;
  bool has_reportingpbuid() const;
  private:
  bool _internal_has_reportingpbuid() const;
  public:
  void clear_reportingpbuid();
  const std::string& reportingpbuid() const;
  void set_reportingpbuid(const std::string& value);
  void set_reportingpbuid(std::string&& value);
  void set_reportingpbuid(const char* value);
  void set_reportingpbuid(const char* value, size_t size);
  std::string* mutable_reportingpbuid();
  std::string* release_reportingpbuid();
  void set_allocated_reportingpbuid(std::string* reportingpbuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reportingpbuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reportingpbuid(
      std::string* reportingpbuid);
  private:
  const std::string& _internal_reportingpbuid() const;
  void _internal_set_reportingpbuid(const std::string& value);
  std::string* _internal_mutable_reportingpbuid();
  public:

  // required string SubmittingPBUID = 6;
  bool has_submittingpbuid() const;
  private:
  bool _internal_has_submittingpbuid() const;
  public:
  void clear_submittingpbuid();
  const std::string& submittingpbuid() const;
  void set_submittingpbuid(const std::string& value);
  void set_submittingpbuid(std::string&& value);
  void set_submittingpbuid(const char* value);
  void set_submittingpbuid(const char* value, size_t size);
  std::string* mutable_submittingpbuid();
  std::string* release_submittingpbuid();
  void set_allocated_submittingpbuid(std::string* submittingpbuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_submittingpbuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_submittingpbuid(
      std::string* submittingpbuid);
  private:
  const std::string& _internal_submittingpbuid() const;
  void _internal_set_submittingpbuid(const std::string& value);
  std::string* _internal_mutable_submittingpbuid();
  public:

  // required string SecurityID = 7;
  bool has_securityid() const;
  private:
  bool _internal_has_securityid() const;
  public:
  void clear_securityid();
  const std::string& securityid() const;
  void set_securityid(const std::string& value);
  void set_securityid(std::string&& value);
  void set_securityid(const char* value);
  void set_securityid(const char* value, size_t size);
  std::string* mutable_securityid();
  std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityid(
      std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // required string SecurityIDSource = 8;
  bool has_securityidsource() const;
  private:
  bool _internal_has_securityidsource() const;
  public:
  void clear_securityidsource();
  const std::string& securityidsource() const;
  void set_securityidsource(const std::string& value);
  void set_securityidsource(std::string&& value);
  void set_securityidsource(const char* value);
  void set_securityidsource(const char* value, size_t size);
  std::string* mutable_securityidsource();
  std::string* release_securityidsource();
  void set_allocated_securityidsource(std::string* securityidsource);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_securityidsource();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_securityidsource(
      std::string* securityidsource);
  private:
  const std::string& _internal_securityidsource() const;
  void _internal_set_securityidsource(const std::string& value);
  std::string* _internal_mutable_securityidsource();
  public:

  // required string ClearingFirm = 10;
  bool has_clearingfirm() const;
  private:
  bool _internal_has_clearingfirm() const;
  public:
  void clear_clearingfirm();
  const std::string& clearingfirm() const;
  void set_clearingfirm(const std::string& value);
  void set_clearingfirm(std::string&& value);
  void set_clearingfirm(const char* value);
  void set_clearingfirm(const char* value, size_t size);
  std::string* mutable_clearingfirm();
  std::string* release_clearingfirm();
  void set_allocated_clearingfirm(std::string* clearingfirm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clearingfirm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clearingfirm(
      std::string* clearingfirm);
  private:
  const std::string& _internal_clearingfirm() const;
  void _internal_set_clearingfirm(const std::string& value);
  std::string* _internal_mutable_clearingfirm();
  public:

  // required string TransactTime = 11;
  bool has_transacttime() const;
  private:
  bool _internal_has_transacttime() const;
  public:
  void clear_transacttime();
  const std::string& transacttime() const;
  void set_transacttime(const std::string& value);
  void set_transacttime(std::string&& value);
  void set_transacttime(const char* value);
  void set_transacttime(const char* value, size_t size);
  std::string* mutable_transacttime();
  std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transacttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transacttime(
      std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // required string UserInfo = 12;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const std::string& userinfo() const;
  void set_userinfo(const std::string& value);
  void set_userinfo(std::string&& value);
  void set_userinfo(const char* value);
  void set_userinfo(const char* value, size_t size);
  std::string* mutable_userinfo();
  std::string* release_userinfo();
  void set_allocated_userinfo(std::string* userinfo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userinfo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userinfo(
      std::string* userinfo);
  private:
  const std::string& _internal_userinfo() const;
  void _internal_set_userinfo(const std::string& value);
  std::string* _internal_mutable_userinfo();
  public:

  // required string ClOrdID = 13;
  bool has_clordid() const;
  private:
  bool _internal_has_clordid() const;
  public:
  void clear_clordid();
  const std::string& clordid() const;
  void set_clordid(const std::string& value);
  void set_clordid(std::string&& value);
  void set_clordid(const char* value);
  void set_clordid(const char* value, size_t size);
  std::string* mutable_clordid();
  std::string* release_clordid();
  void set_allocated_clordid(std::string* clordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clordid(
      std::string* clordid);
  private:
  const std::string& _internal_clordid() const;
  void _internal_set_clordid(const std::string& value);
  std::string* _internal_mutable_clordid();
  public:

  // required string ExecID = 14;
  bool has_execid() const;
  private:
  bool _internal_has_execid() const;
  public:
  void clear_execid();
  const std::string& execid() const;
  void set_execid(const std::string& value);
  void set_execid(std::string&& value);
  void set_execid(const char* value);
  void set_execid(const char* value, size_t size);
  std::string* mutable_execid();
  std::string* release_execid();
  void set_allocated_execid(std::string* execid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_execid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_execid(
      std::string* execid);
  private:
  const std::string& _internal_execid() const;
  void _internal_set_execid(const std::string& value);
  std::string* _internal_mutable_execid();
  public:

  // required string OrigClOrdID = 15;
  bool has_origclordid() const;
  private:
  bool _internal_has_origclordid() const;
  public:
  void clear_origclordid();
  const std::string& origclordid() const;
  void set_origclordid(const std::string& value);
  void set_origclordid(std::string&& value);
  void set_origclordid(const char* value);
  void set_origclordid(const char* value, size_t size);
  std::string* mutable_origclordid();
  std::string* release_origclordid();
  void set_allocated_origclordid(std::string* origclordid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_origclordid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_origclordid(
      std::string* origclordid);
  private:
  const std::string& _internal_origclordid() const;
  void _internal_set_origclordid(const std::string& value);
  std::string* _internal_mutable_origclordid();
  public:

  // required string Side = 16;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  const std::string& side() const;
  void set_side(const std::string& value);
  void set_side(std::string&& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  std::string* mutable_side();
  std::string* release_side();
  void set_allocated_side(std::string* side);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_side();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_side(
      std::string* side);
  private:
  const std::string& _internal_side() const;
  void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // required string OrdStatus = 17;
  bool has_ordstatus() const;
  private:
  bool _internal_has_ordstatus() const;
  public:
  void clear_ordstatus();
  const std::string& ordstatus() const;
  void set_ordstatus(const std::string& value);
  void set_ordstatus(std::string&& value);
  void set_ordstatus(const char* value);
  void set_ordstatus(const char* value, size_t size);
  std::string* mutable_ordstatus();
  std::string* release_ordstatus();
  void set_allocated_ordstatus(std::string* ordstatus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordstatus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordstatus(
      std::string* ordstatus);
  private:
  const std::string& _internal_ordstatus() const;
  void _internal_set_ordstatus(const std::string& value);
  std::string* _internal_mutable_ordstatus();
  public:

  // required string RejectText = 19;
  bool has_rejecttext() const;
  private:
  bool _internal_has_rejecttext() const;
  public:
  void clear_rejecttext();
  const std::string& rejecttext() const;
  void set_rejecttext(const std::string& value);
  void set_rejecttext(std::string&& value);
  void set_rejecttext(const char* value);
  void set_rejecttext(const char* value, size_t size);
  std::string* mutable_rejecttext();
  std::string* release_rejecttext();
  void set_allocated_rejecttext(std::string* rejecttext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rejecttext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rejecttext(
      std::string* rejecttext);
  private:
  const std::string& _internal_rejecttext() const;
  void _internal_set_rejecttext(const std::string& value);
  std::string* _internal_mutable_rejecttext();
  public:

  // required string OrderID = 20;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_orderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_orderid(
      std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // required int32 PartitionNo = 2;
  bool has_partitionno() const;
  private:
  bool _internal_has_partitionno() const;
  public:
  void clear_partitionno();
  ::PROTOBUF_NAMESPACE_ID::int32 partitionno() const;
  void set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partitionno() const;
  void _internal_set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 ReportIndex = 3;
  bool has_reportindex() const;
  private:
  bool _internal_has_reportindex() const;
  public:
  void clear_reportindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 reportindex() const;
  void set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reportindex() const;
  void _internal_set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 OwnerType = 9;
  bool has_ownertype() const;
  private:
  bool _internal_has_ownertype() const;
  public:
  void clear_ownertype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype() const;
  void set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ownertype() const;
  void _internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 CxlRejReason = 18;
  bool has_cxlrejreason() const;
  private:
  bool _internal_has_cxlrejreason() const;
  public:
  void clear_cxlrejreason();
  ::PROTOBUF_NAMESPACE_ID::uint32 cxlrejreason() const;
  void set_cxlrejreason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cxlrejreason() const;
  void _internal_set_cxlrejreason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Cancel_Order_Fail)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reportingpbuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submittingpbuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityidsource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearingfirm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr execid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origclordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rejecttext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 partitionno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reportindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ownertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cxlrejreason_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Extend_Fields PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Extend_Fields) */ {
 public:
  inline Extend_Fields() : Extend_Fields(nullptr) {};
  virtual ~Extend_Fields();

  Extend_Fields(const Extend_Fields& from);
  Extend_Fields(Extend_Fields&& from) noexcept
    : Extend_Fields() {
    *this = ::std::move(from);
  }

  inline Extend_Fields& operator=(const Extend_Fields& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extend_Fields& operator=(Extend_Fields&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extend_Fields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extend_Fields* internal_default_instance() {
    return reinterpret_cast<const Extend_Fields*>(
               &_Extend_Fields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Extend_Fields& a, Extend_Fields& b) {
    a.Swap(&b);
  }
  inline void Swap(Extend_Fields* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extend_Fields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extend_Fields* New() const final {
    return CreateMaybeMessage<Extend_Fields>(nullptr);
  }

  Extend_Fields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extend_Fields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extend_Fields& from);
  void MergeFrom(const Extend_Fields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extend_Fields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Extend_Fields";
  }
  protected:
  explicit Extend_Fields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeInForceFieldNumber = 4,
    kCashMarginFieldNumber = 5,
    kStopPxFieldNumber = 1,
    kMinQtyFieldNumber = 2,
    kMaxPriceLevelsFieldNumber = 3,
  };
  // optional string TimeInForce = 4;
  bool has_timeinforce() const;
  private:
  bool _internal_has_timeinforce() const;
  public:
  void clear_timeinforce();
  const std::string& timeinforce() const;
  void set_timeinforce(const std::string& value);
  void set_timeinforce(std::string&& value);
  void set_timeinforce(const char* value);
  void set_timeinforce(const char* value, size_t size);
  std::string* mutable_timeinforce();
  std::string* release_timeinforce();
  void set_allocated_timeinforce(std::string* timeinforce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timeinforce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timeinforce(
      std::string* timeinforce);
  private:
  const std::string& _internal_timeinforce() const;
  void _internal_set_timeinforce(const std::string& value);
  std::string* _internal_mutable_timeinforce();
  public:

  // optional string CashMargin = 5;
  bool has_cashmargin() const;
  private:
  bool _internal_has_cashmargin() const;
  public:
  void clear_cashmargin();
  const std::string& cashmargin() const;
  void set_cashmargin(const std::string& value);
  void set_cashmargin(std::string&& value);
  void set_cashmargin(const char* value);
  void set_cashmargin(const char* value, size_t size);
  std::string* mutable_cashmargin();
  std::string* release_cashmargin();
  void set_allocated_cashmargin(std::string* cashmargin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cashmargin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cashmargin(
      std::string* cashmargin);
  private:
  const std::string& _internal_cashmargin() const;
  void _internal_set_cashmargin(const std::string& value);
  std::string* _internal_mutable_cashmargin();
  public:

  // optional float StopPx = 1;
  bool has_stoppx() const;
  private:
  bool _internal_has_stoppx() const;
  public:
  void clear_stoppx();
  float stoppx() const;
  void set_stoppx(float value);
  private:
  float _internal_stoppx() const;
  void _internal_set_stoppx(float value);
  public:

  // optional float MinQty = 2;
  bool has_minqty() const;
  private:
  bool _internal_has_minqty() const;
  public:
  void clear_minqty();
  float minqty() const;
  void set_minqty(float value);
  private:
  float _internal_minqty() const;
  void _internal_set_minqty(float value);
  public:

  // optional uint32 MaxPriceLevels = 3;
  bool has_maxpricelevels() const;
  private:
  bool _internal_has_maxpricelevels() const;
  public:
  void clear_maxpricelevels();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxpricelevels() const;
  void set_maxpricelevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxpricelevels() const;
  void _internal_set_maxpricelevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Extend_Fields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeinforce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cashmargin_;
  float stoppx_;
  float minqty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxpricelevels_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Retransmission_Report PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Retransmission_Report) */ {
 public:
  inline Retransmission_Report() : Retransmission_Report(nullptr) {};
  virtual ~Retransmission_Report();

  Retransmission_Report(const Retransmission_Report& from);
  Retransmission_Report(Retransmission_Report&& from) noexcept
    : Retransmission_Report() {
    *this = ::std::move(from);
  }

  inline Retransmission_Report& operator=(const Retransmission_Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline Retransmission_Report& operator=(Retransmission_Report&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Retransmission_Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Retransmission_Report* internal_default_instance() {
    return reinterpret_cast<const Retransmission_Report*>(
               &_Retransmission_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Retransmission_Report& a, Retransmission_Report& b) {
    a.Swap(&b);
  }
  inline void Swap(Retransmission_Report* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Retransmission_Report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Retransmission_Report* New() const final {
    return CreateMaybeMessage<Retransmission_Report>(nullptr);
  }

  Retransmission_Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Retransmission_Report>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Retransmission_Report& from);
  void MergeFrom(const Retransmission_Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Retransmission_Report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Retransmission_Report";
  }
  protected:
  explicit Retransmission_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionNoFieldNumber = 3,
    kReportIndexFieldNumber = 4,
    kNoPartitionsFieldNumber = 2,
  };
  // repeated int32 PartitionNo = 3;
  int partitionno_size() const;
  private:
  int _internal_partitionno_size() const;
  public:
  void clear_partitionno();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partitionno(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_partitionno() const;
  void _internal_add_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_partitionno();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 partitionno(int index) const;
  void set_partitionno(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      partitionno() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_partitionno();

  // repeated uint32 ReportIndex = 4;
  int reportindex_size() const;
  private:
  int _internal_reportindex_size() const;
  public:
  void clear_reportindex();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reportindex(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_reportindex() const;
  void _internal_add_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_reportindex();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 reportindex(int index) const;
  void set_reportindex(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      reportindex() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_reportindex();

  // required uint32 NoPartitions = 2;
  bool has_nopartitions() const;
  private:
  bool _internal_has_nopartitions() const;
  public:
  void clear_nopartitions();
  ::PROTOBUF_NAMESPACE_ID::uint32 nopartitions() const;
  void set_nopartitions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nopartitions() const;
  void _internal_set_nopartitions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayProto.Retransmission_Report)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > partitionno_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > reportindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nopartitions_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// -------------------------------------------------------------------

class Standard_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayProto.Standard_Message) */ {
 public:
  inline Standard_Message() : Standard_Message(nullptr) {};
  virtual ~Standard_Message();

  Standard_Message(const Standard_Message& from);
  Standard_Message(Standard_Message&& from) noexcept
    : Standard_Message() {
    *this = ::std::move(from);
  }

  inline Standard_Message& operator=(const Standard_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Standard_Message& operator=(Standard_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Standard_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Standard_Message* internal_default_instance() {
    return reinterpret_cast<const Standard_Message*>(
               &_Standard_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Standard_Message& a, Standard_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Standard_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Standard_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Standard_Message* New() const final {
    return CreateMaybeMessage<Standard_Message>(nullptr);
  }

  Standard_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Standard_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Standard_Message& from);
  void MergeFrom(const Standard_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Standard_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayProto.Standard_Message";
  }
  protected:
  explicit Standard_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gateway_2eproto);
    return ::descriptor_table_Gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStandardHeaderFieldNumber = 1,
    kLogonFieldNumber = 2,
    kLogoutFieldNumber = 3,
    kHeartBeatFieldNumber = 4,
    kNewOrderFieldNumber = 5,
    kExecutiveReportFieldNumber = 6,
    kTransactionReportFieldNumber = 7,
    kCancelOrderFieldNumber = 8,
    kCancelOrderFailFieldNumber = 9,
    kRetransmissionReportFieldNumber = 10,
  };
  // required .GatewayProto.Standard_Header StandardHeader = 1;
  bool has_standardheader() const;
  private:
  bool _internal_has_standardheader() const;
  public:
  void clear_standardheader();
  const ::GatewayProto::Standard_Header& standardheader() const;
  ::GatewayProto::Standard_Header* release_standardheader();
  ::GatewayProto::Standard_Header* mutable_standardheader();
  void set_allocated_standardheader(::GatewayProto::Standard_Header* standardheader);
  private:
  const ::GatewayProto::Standard_Header& _internal_standardheader() const;
  ::GatewayProto::Standard_Header* _internal_mutable_standardheader();
  public:
  void unsafe_arena_set_allocated_standardheader(
      ::GatewayProto::Standard_Header* standardheader);
  ::GatewayProto::Standard_Header* unsafe_arena_release_standardheader();

  // optional .GatewayProto.Logon logon = 2;
  bool has_logon() const;
  private:
  bool _internal_has_logon() const;
  public:
  void clear_logon();
  const ::GatewayProto::Logon& logon() const;
  ::GatewayProto::Logon* release_logon();
  ::GatewayProto::Logon* mutable_logon();
  void set_allocated_logon(::GatewayProto::Logon* logon);
  private:
  const ::GatewayProto::Logon& _internal_logon() const;
  ::GatewayProto::Logon* _internal_mutable_logon();
  public:
  void unsafe_arena_set_allocated_logon(
      ::GatewayProto::Logon* logon);
  ::GatewayProto::Logon* unsafe_arena_release_logon();

  // optional .GatewayProto.Logout logout = 3;
  bool has_logout() const;
  private:
  bool _internal_has_logout() const;
  public:
  void clear_logout();
  const ::GatewayProto::Logout& logout() const;
  ::GatewayProto::Logout* release_logout();
  ::GatewayProto::Logout* mutable_logout();
  void set_allocated_logout(::GatewayProto::Logout* logout);
  private:
  const ::GatewayProto::Logout& _internal_logout() const;
  ::GatewayProto::Logout* _internal_mutable_logout();
  public:
  void unsafe_arena_set_allocated_logout(
      ::GatewayProto::Logout* logout);
  ::GatewayProto::Logout* unsafe_arena_release_logout();

  // optional .GatewayProto.Heart_Beat heart_beat = 4;
  bool has_heart_beat() const;
  private:
  bool _internal_has_heart_beat() const;
  public:
  void clear_heart_beat();
  const ::GatewayProto::Heart_Beat& heart_beat() const;
  ::GatewayProto::Heart_Beat* release_heart_beat();
  ::GatewayProto::Heart_Beat* mutable_heart_beat();
  void set_allocated_heart_beat(::GatewayProto::Heart_Beat* heart_beat);
  private:
  const ::GatewayProto::Heart_Beat& _internal_heart_beat() const;
  ::GatewayProto::Heart_Beat* _internal_mutable_heart_beat();
  public:
  void unsafe_arena_set_allocated_heart_beat(
      ::GatewayProto::Heart_Beat* heart_beat);
  ::GatewayProto::Heart_Beat* unsafe_arena_release_heart_beat();

  // optional .GatewayProto.New_Order new_order = 5;
  bool has_new_order() const;
  private:
  bool _internal_has_new_order() const;
  public:
  void clear_new_order();
  const ::GatewayProto::New_Order& new_order() const;
  ::GatewayProto::New_Order* release_new_order();
  ::GatewayProto::New_Order* mutable_new_order();
  void set_allocated_new_order(::GatewayProto::New_Order* new_order);
  private:
  const ::GatewayProto::New_Order& _internal_new_order() const;
  ::GatewayProto::New_Order* _internal_mutable_new_order();
  public:
  void unsafe_arena_set_allocated_new_order(
      ::GatewayProto::New_Order* new_order);
  ::GatewayProto::New_Order* unsafe_arena_release_new_order();

  // optional .GatewayProto.Executive_Report executive_report = 6;
  bool has_executive_report() const;
  private:
  bool _internal_has_executive_report() const;
  public:
  void clear_executive_report();
  const ::GatewayProto::Executive_Report& executive_report() const;
  ::GatewayProto::Executive_Report* release_executive_report();
  ::GatewayProto::Executive_Report* mutable_executive_report();
  void set_allocated_executive_report(::GatewayProto::Executive_Report* executive_report);
  private:
  const ::GatewayProto::Executive_Report& _internal_executive_report() const;
  ::GatewayProto::Executive_Report* _internal_mutable_executive_report();
  public:
  void unsafe_arena_set_allocated_executive_report(
      ::GatewayProto::Executive_Report* executive_report);
  ::GatewayProto::Executive_Report* unsafe_arena_release_executive_report();

  // optional .GatewayProto.Transaction_Report transaction_report = 7;
  bool has_transaction_report() const;
  private:
  bool _internal_has_transaction_report() const;
  public:
  void clear_transaction_report();
  const ::GatewayProto::Transaction_Report& transaction_report() const;
  ::GatewayProto::Transaction_Report* release_transaction_report();
  ::GatewayProto::Transaction_Report* mutable_transaction_report();
  void set_allocated_transaction_report(::GatewayProto::Transaction_Report* transaction_report);
  private:
  const ::GatewayProto::Transaction_Report& _internal_transaction_report() const;
  ::GatewayProto::Transaction_Report* _internal_mutable_transaction_report();
  public:
  void unsafe_arena_set_allocated_transaction_report(
      ::GatewayProto::Transaction_Report* transaction_report);
  ::GatewayProto::Transaction_Report* unsafe_arena_release_transaction_report();

  // optional .GatewayProto.Cancel_Order cancel_order = 8;
  bool has_cancel_order() const;
  private:
  bool _internal_has_cancel_order() const;
  public:
  void clear_cancel_order();
  const ::GatewayProto::Cancel_Order& cancel_order() const;
  ::GatewayProto::Cancel_Order* release_cancel_order();
  ::GatewayProto::Cancel_Order* mutable_cancel_order();
  void set_allocated_cancel_order(::GatewayProto::Cancel_Order* cancel_order);
  private:
  const ::GatewayProto::Cancel_Order& _internal_cancel_order() const;
  ::GatewayProto::Cancel_Order* _internal_mutable_cancel_order();
  public:
  void unsafe_arena_set_allocated_cancel_order(
      ::GatewayProto::Cancel_Order* cancel_order);
  ::GatewayProto::Cancel_Order* unsafe_arena_release_cancel_order();

  // optional .GatewayProto.Cancel_Order_Fail cancel_order_fail = 9;
  bool has_cancel_order_fail() const;
  private:
  bool _internal_has_cancel_order_fail() const;
  public:
  void clear_cancel_order_fail();
  const ::GatewayProto::Cancel_Order_Fail& cancel_order_fail() const;
  ::GatewayProto::Cancel_Order_Fail* release_cancel_order_fail();
  ::GatewayProto::Cancel_Order_Fail* mutable_cancel_order_fail();
  void set_allocated_cancel_order_fail(::GatewayProto::Cancel_Order_Fail* cancel_order_fail);
  private:
  const ::GatewayProto::Cancel_Order_Fail& _internal_cancel_order_fail() const;
  ::GatewayProto::Cancel_Order_Fail* _internal_mutable_cancel_order_fail();
  public:
  void unsafe_arena_set_allocated_cancel_order_fail(
      ::GatewayProto::Cancel_Order_Fail* cancel_order_fail);
  ::GatewayProto::Cancel_Order_Fail* unsafe_arena_release_cancel_order_fail();

  // optional .GatewayProto.Retransmission_Report retransmission_report = 10;
  bool has_retransmission_report() const;
  private:
  bool _internal_has_retransmission_report() const;
  public:
  void clear_retransmission_report();
  const ::GatewayProto::Retransmission_Report& retransmission_report() const;
  ::GatewayProto::Retransmission_Report* release_retransmission_report();
  ::GatewayProto::Retransmission_Report* mutable_retransmission_report();
  void set_allocated_retransmission_report(::GatewayProto::Retransmission_Report* retransmission_report);
  private:
  const ::GatewayProto::Retransmission_Report& _internal_retransmission_report() const;
  ::GatewayProto::Retransmission_Report* _internal_mutable_retransmission_report();
  public:
  void unsafe_arena_set_allocated_retransmission_report(
      ::GatewayProto::Retransmission_Report* retransmission_report);
  ::GatewayProto::Retransmission_Report* unsafe_arena_release_retransmission_report();

  // @@protoc_insertion_point(class_scope:GatewayProto.Standard_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::GatewayProto::Standard_Header* standardheader_;
  ::GatewayProto::Logon* logon_;
  ::GatewayProto::Logout* logout_;
  ::GatewayProto::Heart_Beat* heart_beat_;
  ::GatewayProto::New_Order* new_order_;
  ::GatewayProto::Executive_Report* executive_report_;
  ::GatewayProto::Transaction_Report* transaction_report_;
  ::GatewayProto::Cancel_Order* cancel_order_;
  ::GatewayProto::Cancel_Order_Fail* cancel_order_fail_;
  ::GatewayProto::Retransmission_Report* retransmission_report_;
  friend struct ::TableStruct_Gateway_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Standard_Header

// required int32 MsgType = 1;
inline bool Standard_Header::_internal_has_msgtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Standard_Header::has_msgtype() const {
  return _internal_has_msgtype();
}
inline void Standard_Header::clear_msgtype() {
  msgtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Standard_Header::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Standard_Header::msgtype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Header.MsgType)
  return _internal_msgtype();
}
inline void Standard_Header::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  msgtype_ = value;
}
inline void Standard_Header::set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Standard_Header.MsgType)
}

// required int32 BodyLength = 2;
inline bool Standard_Header::_internal_has_bodylength() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Standard_Header::has_bodylength() const {
  return _internal_has_bodylength();
}
inline void Standard_Header::clear_bodylength() {
  bodylength_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Standard_Header::_internal_bodylength() const {
  return bodylength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Standard_Header::bodylength() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Header.BodyLength)
  return _internal_bodylength();
}
inline void Standard_Header::_internal_set_bodylength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  bodylength_ = value;
}
inline void Standard_Header::set_bodylength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bodylength(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Standard_Header.BodyLength)
}

// -------------------------------------------------------------------

// Logon

// required string SenderCompID = 1;
inline bool Logon::_internal_has_sendercompid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Logon::has_sendercompid() const {
  return _internal_has_sendercompid();
}
inline void Logon::clear_sendercompid() {
  sendercompid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Logon::sendercompid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Logon.SenderCompID)
  return _internal_sendercompid();
}
inline void Logon::set_sendercompid(const std::string& value) {
  _internal_set_sendercompid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Logon.SenderCompID)
}
inline std::string* Logon::mutable_sendercompid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Logon.SenderCompID)
  return _internal_mutable_sendercompid();
}
inline const std::string& Logon::_internal_sendercompid() const {
  return sendercompid_.Get();
}
inline void Logon::_internal_set_sendercompid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sendercompid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Logon::set_sendercompid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sendercompid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Logon.SenderCompID)
}
inline void Logon::set_sendercompid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sendercompid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Logon.SenderCompID)
}
inline void Logon::set_sendercompid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sendercompid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Logon.SenderCompID)
}
inline std::string* Logon::_internal_mutable_sendercompid() {
  _has_bits_[0] |= 0x00000001u;
  return sendercompid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Logon::release_sendercompid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Logon.SenderCompID)
  if (!_internal_has_sendercompid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sendercompid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logon::set_allocated_sendercompid(std::string* sendercompid) {
  if (sendercompid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sendercompid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendercompid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Logon.SenderCompID)
}
inline std::string* Logon::unsafe_arena_release_sendercompid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Logon.SenderCompID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return sendercompid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Logon::unsafe_arena_set_allocated_sendercompid(
    std::string* sendercompid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sendercompid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sendercompid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sendercompid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Logon.SenderCompID)
}

// required string TargetCompID = 2;
inline bool Logon::_internal_has_targetcompid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Logon::has_targetcompid() const {
  return _internal_has_targetcompid();
}
inline void Logon::clear_targetcompid() {
  targetcompid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Logon::targetcompid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Logon.TargetCompID)
  return _internal_targetcompid();
}
inline void Logon::set_targetcompid(const std::string& value) {
  _internal_set_targetcompid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Logon.TargetCompID)
}
inline std::string* Logon::mutable_targetcompid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Logon.TargetCompID)
  return _internal_mutable_targetcompid();
}
inline const std::string& Logon::_internal_targetcompid() const {
  return targetcompid_.Get();
}
inline void Logon::_internal_set_targetcompid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  targetcompid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Logon::set_targetcompid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  targetcompid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Logon.TargetCompID)
}
inline void Logon::set_targetcompid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  targetcompid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Logon.TargetCompID)
}
inline void Logon::set_targetcompid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  targetcompid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Logon.TargetCompID)
}
inline std::string* Logon::_internal_mutable_targetcompid() {
  _has_bits_[0] |= 0x00000002u;
  return targetcompid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Logon::release_targetcompid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Logon.TargetCompID)
  if (!_internal_has_targetcompid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return targetcompid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logon::set_allocated_targetcompid(std::string* targetcompid) {
  if (targetcompid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  targetcompid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetcompid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Logon.TargetCompID)
}
inline std::string* Logon::unsafe_arena_release_targetcompid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Logon.TargetCompID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return targetcompid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Logon::unsafe_arena_set_allocated_targetcompid(
    std::string* targetcompid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetcompid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  targetcompid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetcompid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Logon.TargetCompID)
}

// required uint32 HeartBtInt = 3;
inline bool Logon::_internal_has_heartbtint() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Logon::has_heartbtint() const {
  return _internal_has_heartbtint();
}
inline void Logon::clear_heartbtint() {
  heartbtint_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Logon::_internal_heartbtint() const {
  return heartbtint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Logon::heartbtint() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Logon.HeartBtInt)
  return _internal_heartbtint();
}
inline void Logon::_internal_set_heartbtint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  heartbtint_ = value;
}
inline void Logon::set_heartbtint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heartbtint(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Logon.HeartBtInt)
}

// required string Password = 4;
inline bool Logon::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Logon::has_password() const {
  return _internal_has_password();
}
inline void Logon::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Logon::password() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Logon.Password)
  return _internal_password();
}
inline void Logon::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Logon.Password)
}
inline std::string* Logon::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Logon.Password)
  return _internal_mutable_password();
}
inline const std::string& Logon::_internal_password() const {
  return password_.Get();
}
inline void Logon::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Logon::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Logon.Password)
}
inline void Logon::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Logon.Password)
}
inline void Logon::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Logon.Password)
}
inline std::string* Logon::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000004u;
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Logon::release_password() {
  // @@protoc_insertion_point(field_release:GatewayProto.Logon.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logon::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Logon.Password)
}
inline std::string* Logon::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Logon.Password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Logon::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Logon.Password)
}

// required string DefaultApplVerID = 5;
inline bool Logon::_internal_has_defaultapplverid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Logon::has_defaultapplverid() const {
  return _internal_has_defaultapplverid();
}
inline void Logon::clear_defaultapplverid() {
  defaultapplverid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Logon::defaultapplverid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Logon.DefaultApplVerID)
  return _internal_defaultapplverid();
}
inline void Logon::set_defaultapplverid(const std::string& value) {
  _internal_set_defaultapplverid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Logon.DefaultApplVerID)
}
inline std::string* Logon::mutable_defaultapplverid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Logon.DefaultApplVerID)
  return _internal_mutable_defaultapplverid();
}
inline const std::string& Logon::_internal_defaultapplverid() const {
  return defaultapplverid_.Get();
}
inline void Logon::_internal_set_defaultapplverid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  defaultapplverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Logon::set_defaultapplverid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  defaultapplverid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Logon.DefaultApplVerID)
}
inline void Logon::set_defaultapplverid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  defaultapplverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Logon.DefaultApplVerID)
}
inline void Logon::set_defaultapplverid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  defaultapplverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Logon.DefaultApplVerID)
}
inline std::string* Logon::_internal_mutable_defaultapplverid() {
  _has_bits_[0] |= 0x00000008u;
  return defaultapplverid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Logon::release_defaultapplverid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Logon.DefaultApplVerID)
  if (!_internal_has_defaultapplverid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return defaultapplverid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logon::set_allocated_defaultapplverid(std::string* defaultapplverid) {
  if (defaultapplverid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  defaultapplverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), defaultapplverid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Logon.DefaultApplVerID)
}
inline std::string* Logon::unsafe_arena_release_defaultapplverid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Logon.DefaultApplVerID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return defaultapplverid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Logon::unsafe_arena_set_allocated_defaultapplverid(
    std::string* defaultapplverid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (defaultapplverid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  defaultapplverid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      defaultapplverid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Logon.DefaultApplVerID)
}

// -------------------------------------------------------------------

// Logout

// required int32 SessionStatus = 1;
inline bool Logout::_internal_has_sessionstatus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Logout::has_sessionstatus() const {
  return _internal_has_sessionstatus();
}
inline void Logout::clear_sessionstatus() {
  sessionstatus_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Logout::_internal_sessionstatus() const {
  return sessionstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Logout::sessionstatus() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Logout.SessionStatus)
  return _internal_sessionstatus();
}
inline void Logout::_internal_set_sessionstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sessionstatus_ = value;
}
inline void Logout::set_sessionstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessionstatus(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Logout.SessionStatus)
}

// required string Text = 2;
inline bool Logout::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Logout::has_text() const {
  return _internal_has_text();
}
inline void Logout::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Logout::text() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Logout.Text)
  return _internal_text();
}
inline void Logout::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Logout.Text)
}
inline std::string* Logout::mutable_text() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Logout.Text)
  return _internal_mutable_text();
}
inline const std::string& Logout::_internal_text() const {
  return text_.Get();
}
inline void Logout::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Logout::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Logout.Text)
}
inline void Logout::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Logout.Text)
}
inline void Logout::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Logout.Text)
}
inline std::string* Logout::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Logout::release_text() {
  // @@protoc_insertion_point(field_release:GatewayProto.Logout.Text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logout::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Logout.Text)
}
inline std::string* Logout::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Logout.Text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Logout::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Logout.Text)
}

// -------------------------------------------------------------------

// Heart_Beat

// optional string Text = 1;
inline bool Heart_Beat::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Heart_Beat::has_text() const {
  return _internal_has_text();
}
inline void Heart_Beat::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Heart_Beat::text() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Heart_Beat.Text)
  return _internal_text();
}
inline void Heart_Beat::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Heart_Beat.Text)
}
inline std::string* Heart_Beat::mutable_text() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Heart_Beat.Text)
  return _internal_mutable_text();
}
inline const std::string& Heart_Beat::_internal_text() const {
  return text_.Get();
}
inline void Heart_Beat::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Heart_Beat::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Heart_Beat.Text)
}
inline void Heart_Beat::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Heart_Beat.Text)
}
inline void Heart_Beat::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Heart_Beat.Text)
}
inline std::string* Heart_Beat::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Heart_Beat::release_text() {
  // @@protoc_insertion_point(field_release:GatewayProto.Heart_Beat.Text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Heart_Beat::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Heart_Beat.Text)
}
inline std::string* Heart_Beat::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Heart_Beat.Text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Heart_Beat::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Heart_Beat.Text)
}

// -------------------------------------------------------------------

// New_Order

// required string ApplID = 1;
inline bool New_Order::_internal_has_applid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool New_Order::has_applid() const {
  return _internal_has_applid();
}
inline void New_Order::clear_applid() {
  applid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& New_Order::applid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.ApplID)
  return _internal_applid();
}
inline void New_Order::set_applid(const std::string& value) {
  _internal_set_applid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.ApplID)
}
inline std::string* New_Order::mutable_applid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.ApplID)
  return _internal_mutable_applid();
}
inline const std::string& New_Order::_internal_applid() const {
  return applid_.Get();
}
inline void New_Order::_internal_set_applid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_applid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.ApplID)
}
inline void New_Order::set_applid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.ApplID)
}
inline void New_Order::set_applid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.ApplID)
}
inline std::string* New_Order::_internal_mutable_applid() {
  _has_bits_[0] |= 0x00000001u;
  return applid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_applid() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.ApplID)
  if (!_internal_has_applid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return applid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_applid(std::string* applid) {
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.ApplID)
}
inline std::string* New_Order::unsafe_arena_release_applid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.ApplID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return applid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_applid(
    std::string* applid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      applid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.ApplID)
}

// required string SubmittingPBUID = 2;
inline bool New_Order::_internal_has_submittingpbuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool New_Order::has_submittingpbuid() const {
  return _internal_has_submittingpbuid();
}
inline void New_Order::clear_submittingpbuid() {
  submittingpbuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& New_Order::submittingpbuid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.SubmittingPBUID)
  return _internal_submittingpbuid();
}
inline void New_Order::set_submittingpbuid(const std::string& value) {
  _internal_set_submittingpbuid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.SubmittingPBUID)
}
inline std::string* New_Order::mutable_submittingpbuid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.SubmittingPBUID)
  return _internal_mutable_submittingpbuid();
}
inline const std::string& New_Order::_internal_submittingpbuid() const {
  return submittingpbuid_.Get();
}
inline void New_Order::_internal_set_submittingpbuid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_submittingpbuid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  submittingpbuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.SubmittingPBUID)
}
inline void New_Order::set_submittingpbuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.SubmittingPBUID)
}
inline void New_Order::set_submittingpbuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.SubmittingPBUID)
}
inline std::string* New_Order::_internal_mutable_submittingpbuid() {
  _has_bits_[0] |= 0x00000002u;
  return submittingpbuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_submittingpbuid() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.SubmittingPBUID)
  if (!_internal_has_submittingpbuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return submittingpbuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_submittingpbuid(std::string* submittingpbuid) {
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  submittingpbuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submittingpbuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.SubmittingPBUID)
}
inline std::string* New_Order::unsafe_arena_release_submittingpbuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.SubmittingPBUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return submittingpbuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_submittingpbuid(
    std::string* submittingpbuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  submittingpbuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      submittingpbuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.SubmittingPBUID)
}

// required string SecurityID = 3;
inline bool New_Order::_internal_has_securityid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool New_Order::has_securityid() const {
  return _internal_has_securityid();
}
inline void New_Order::clear_securityid() {
  securityid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& New_Order::securityid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.SecurityID)
  return _internal_securityid();
}
inline void New_Order::set_securityid(const std::string& value) {
  _internal_set_securityid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.SecurityID)
}
inline std::string* New_Order::mutable_securityid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.SecurityID)
  return _internal_mutable_securityid();
}
inline const std::string& New_Order::_internal_securityid() const {
  return securityid_.Get();
}
inline void New_Order::_internal_set_securityid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_securityid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  securityid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.SecurityID)
}
inline void New_Order::set_securityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.SecurityID)
}
inline void New_Order::set_securityid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.SecurityID)
}
inline std::string* New_Order::_internal_mutable_securityid() {
  _has_bits_[0] |= 0x00000004u;
  return securityid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_securityid() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.SecurityID)
  if (!_internal_has_securityid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return securityid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  securityid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.SecurityID)
}
inline std::string* New_Order::unsafe_arena_release_securityid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.SecurityID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return securityid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_securityid(
    std::string* securityid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  securityid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.SecurityID)
}

// required string SecurityIDSource = 4;
inline bool New_Order::_internal_has_securityidsource() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool New_Order::has_securityidsource() const {
  return _internal_has_securityidsource();
}
inline void New_Order::clear_securityidsource() {
  securityidsource_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& New_Order::securityidsource() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.SecurityIDSource)
  return _internal_securityidsource();
}
inline void New_Order::set_securityidsource(const std::string& value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.SecurityIDSource)
}
inline std::string* New_Order::mutable_securityidsource() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.SecurityIDSource)
  return _internal_mutable_securityidsource();
}
inline const std::string& New_Order::_internal_securityidsource() const {
  return securityidsource_.Get();
}
inline void New_Order::_internal_set_securityidsource(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_securityidsource(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  securityidsource_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.SecurityIDSource)
}
inline void New_Order::set_securityidsource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.SecurityIDSource)
}
inline void New_Order::set_securityidsource(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.SecurityIDSource)
}
inline std::string* New_Order::_internal_mutable_securityidsource() {
  _has_bits_[0] |= 0x00000008u;
  return securityidsource_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_securityidsource() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.SecurityIDSource)
  if (!_internal_has_securityidsource()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return securityidsource_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_securityidsource(std::string* securityidsource) {
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityidsource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityidsource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.SecurityIDSource)
}
inline std::string* New_Order::unsafe_arena_release_securityidsource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.SecurityIDSource)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return securityidsource_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_securityidsource(
    std::string* securityidsource) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityidsource_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityidsource, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.SecurityIDSource)
}

// required uint32 OwnerType = 5;
inline bool New_Order::_internal_has_ownertype() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool New_Order::has_ownertype() const {
  return _internal_has_ownertype();
}
inline void New_Order::clear_ownertype() {
  ownertype_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 New_Order::_internal_ownertype() const {
  return ownertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 New_Order::ownertype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.OwnerType)
  return _internal_ownertype();
}
inline void New_Order::_internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  ownertype_ = value;
}
inline void New_Order::set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ownertype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.OwnerType)
}

// required string ClearingFirm = 6;
inline bool New_Order::_internal_has_clearingfirm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool New_Order::has_clearingfirm() const {
  return _internal_has_clearingfirm();
}
inline void New_Order::clear_clearingfirm() {
  clearingfirm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& New_Order::clearingfirm() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.ClearingFirm)
  return _internal_clearingfirm();
}
inline void New_Order::set_clearingfirm(const std::string& value) {
  _internal_set_clearingfirm(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.ClearingFirm)
}
inline std::string* New_Order::mutable_clearingfirm() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.ClearingFirm)
  return _internal_mutable_clearingfirm();
}
inline const std::string& New_Order::_internal_clearingfirm() const {
  return clearingfirm_.Get();
}
inline void New_Order::_internal_set_clearingfirm(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_clearingfirm(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  clearingfirm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.ClearingFirm)
}
inline void New_Order::set_clearingfirm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.ClearingFirm)
}
inline void New_Order::set_clearingfirm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.ClearingFirm)
}
inline std::string* New_Order::_internal_mutable_clearingfirm() {
  _has_bits_[0] |= 0x00000010u;
  return clearingfirm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_clearingfirm() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.ClearingFirm)
  if (!_internal_has_clearingfirm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return clearingfirm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_clearingfirm(std::string* clearingfirm) {
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  clearingfirm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearingfirm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.ClearingFirm)
}
inline std::string* New_Order::unsafe_arena_release_clearingfirm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.ClearingFirm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return clearingfirm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_clearingfirm(
    std::string* clearingfirm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  clearingfirm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clearingfirm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.ClearingFirm)
}

// required string TransactTime = 7;
inline bool New_Order::_internal_has_transacttime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool New_Order::has_transacttime() const {
  return _internal_has_transacttime();
}
inline void New_Order::clear_transacttime() {
  transacttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& New_Order::transacttime() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.TransactTime)
  return _internal_transacttime();
}
inline void New_Order::set_transacttime(const std::string& value) {
  _internal_set_transacttime(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.TransactTime)
}
inline std::string* New_Order::mutable_transacttime() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.TransactTime)
  return _internal_mutable_transacttime();
}
inline const std::string& New_Order::_internal_transacttime() const {
  return transacttime_.Get();
}
inline void New_Order::_internal_set_transacttime(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_transacttime(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  transacttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.TransactTime)
}
inline void New_Order::set_transacttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.TransactTime)
}
inline void New_Order::set_transacttime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.TransactTime)
}
inline std::string* New_Order::_internal_mutable_transacttime() {
  _has_bits_[0] |= 0x00000020u;
  return transacttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_transacttime() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.TransactTime)
  if (!_internal_has_transacttime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return transacttime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  transacttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transacttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.TransactTime)
}
inline std::string* New_Order::unsafe_arena_release_transacttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.TransactTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return transacttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_transacttime(
    std::string* transacttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  transacttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transacttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.TransactTime)
}

// required string UserInfo = 8;
inline bool New_Order::_internal_has_userinfo() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool New_Order::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void New_Order::clear_userinfo() {
  userinfo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& New_Order::userinfo() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.UserInfo)
  return _internal_userinfo();
}
inline void New_Order::set_userinfo(const std::string& value) {
  _internal_set_userinfo(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.UserInfo)
}
inline std::string* New_Order::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.UserInfo)
  return _internal_mutable_userinfo();
}
inline const std::string& New_Order::_internal_userinfo() const {
  return userinfo_.Get();
}
inline void New_Order::_internal_set_userinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_userinfo(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  userinfo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.UserInfo)
}
inline void New_Order::set_userinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.UserInfo)
}
inline void New_Order::set_userinfo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.UserInfo)
}
inline std::string* New_Order::_internal_mutable_userinfo() {
  _has_bits_[0] |= 0x00000040u;
  return userinfo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_userinfo() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.UserInfo)
  if (!_internal_has_userinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return userinfo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_userinfo(std::string* userinfo) {
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  userinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userinfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.UserInfo)
}
inline std::string* New_Order::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.UserInfo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return userinfo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_userinfo(
    std::string* userinfo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  userinfo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userinfo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.UserInfo)
}

// required string ClOrdID = 9;
inline bool New_Order::_internal_has_clordid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool New_Order::has_clordid() const {
  return _internal_has_clordid();
}
inline void New_Order::clear_clordid() {
  clordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& New_Order::clordid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.ClOrdID)
  return _internal_clordid();
}
inline void New_Order::set_clordid(const std::string& value) {
  _internal_set_clordid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.ClOrdID)
}
inline std::string* New_Order::mutable_clordid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.ClOrdID)
  return _internal_mutable_clordid();
}
inline const std::string& New_Order::_internal_clordid() const {
  return clordid_.Get();
}
inline void New_Order::_internal_set_clordid(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_clordid(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  clordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.ClOrdID)
}
inline void New_Order::set_clordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.ClOrdID)
}
inline void New_Order::set_clordid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.ClOrdID)
}
inline std::string* New_Order::_internal_mutable_clordid() {
  _has_bits_[0] |= 0x00000080u;
  return clordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_clordid() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.ClOrdID)
  if (!_internal_has_clordid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return clordid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_clordid(std::string* clordid) {
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  clordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.ClOrdID)
}
inline std::string* New_Order::unsafe_arena_release_clordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.ClOrdID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return clordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_clordid(
    std::string* clordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  clordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.ClOrdID)
}

// required string AccountID = 10;
inline bool New_Order::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool New_Order::has_accountid() const {
  return _internal_has_accountid();
}
inline void New_Order::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& New_Order::accountid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.AccountID)
  return _internal_accountid();
}
inline void New_Order::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.AccountID)
}
inline std::string* New_Order::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.AccountID)
  return _internal_mutable_accountid();
}
inline const std::string& New_Order::_internal_accountid() const {
  return accountid_.Get();
}
inline void New_Order::_internal_set_accountid(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_accountid(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.AccountID)
}
inline void New_Order::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.AccountID)
}
inline void New_Order::set_accountid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.AccountID)
}
inline std::string* New_Order::_internal_mutable_accountid() {
  _has_bits_[0] |= 0x00000100u;
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_accountid() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.AccountID)
  if (!_internal_has_accountid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return accountid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.AccountID)
}
inline std::string* New_Order::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.AccountID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return accountid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_accountid(
    std::string* accountid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accountid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  accountid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accountid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.AccountID)
}

// required string BranchID = 11;
inline bool New_Order::_internal_has_branchid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool New_Order::has_branchid() const {
  return _internal_has_branchid();
}
inline void New_Order::clear_branchid() {
  branchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& New_Order::branchid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.BranchID)
  return _internal_branchid();
}
inline void New_Order::set_branchid(const std::string& value) {
  _internal_set_branchid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.BranchID)
}
inline std::string* New_Order::mutable_branchid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.BranchID)
  return _internal_mutable_branchid();
}
inline const std::string& New_Order::_internal_branchid() const {
  return branchid_.Get();
}
inline void New_Order::_internal_set_branchid(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_branchid(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  branchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.BranchID)
}
inline void New_Order::set_branchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.BranchID)
}
inline void New_Order::set_branchid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.BranchID)
}
inline std::string* New_Order::_internal_mutable_branchid() {
  _has_bits_[0] |= 0x00000200u;
  return branchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_branchid() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.BranchID)
  if (!_internal_has_branchid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return branchid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_branchid(std::string* branchid) {
  if (branchid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  branchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.BranchID)
}
inline std::string* New_Order::unsafe_arena_release_branchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.BranchID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return branchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_branchid(
    std::string* branchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branchid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  branchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.BranchID)
}

// required string OrderRestrictions = 12;
inline bool New_Order::_internal_has_orderrestrictions() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool New_Order::has_orderrestrictions() const {
  return _internal_has_orderrestrictions();
}
inline void New_Order::clear_orderrestrictions() {
  orderrestrictions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& New_Order::orderrestrictions() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.OrderRestrictions)
  return _internal_orderrestrictions();
}
inline void New_Order::set_orderrestrictions(const std::string& value) {
  _internal_set_orderrestrictions(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.OrderRestrictions)
}
inline std::string* New_Order::mutable_orderrestrictions() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.OrderRestrictions)
  return _internal_mutable_orderrestrictions();
}
inline const std::string& New_Order::_internal_orderrestrictions() const {
  return orderrestrictions_.Get();
}
inline void New_Order::_internal_set_orderrestrictions(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  orderrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_orderrestrictions(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  orderrestrictions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.OrderRestrictions)
}
inline void New_Order::set_orderrestrictions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  orderrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.OrderRestrictions)
}
inline void New_Order::set_orderrestrictions(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  orderrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.OrderRestrictions)
}
inline std::string* New_Order::_internal_mutable_orderrestrictions() {
  _has_bits_[0] |= 0x00000400u;
  return orderrestrictions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_orderrestrictions() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.OrderRestrictions)
  if (!_internal_has_orderrestrictions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return orderrestrictions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_orderrestrictions(std::string* orderrestrictions) {
  if (orderrestrictions != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  orderrestrictions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderrestrictions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.OrderRestrictions)
}
inline std::string* New_Order::unsafe_arena_release_orderrestrictions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.OrderRestrictions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return orderrestrictions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_orderrestrictions(
    std::string* orderrestrictions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (orderrestrictions != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  orderrestrictions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      orderrestrictions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.OrderRestrictions)
}

// required string Side = 13;
inline bool New_Order::_internal_has_side() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool New_Order::has_side() const {
  return _internal_has_side();
}
inline void New_Order::clear_side() {
  side_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& New_Order::side() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.Side)
  return _internal_side();
}
inline void New_Order::set_side(const std::string& value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.Side)
}
inline std::string* New_Order::mutable_side() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.Side)
  return _internal_mutable_side();
}
inline const std::string& New_Order::_internal_side() const {
  return side_.Get();
}
inline void New_Order::_internal_set_side(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_side(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  side_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.Side)
}
inline void New_Order::set_side(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.Side)
}
inline void New_Order::set_side(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.Side)
}
inline std::string* New_Order::_internal_mutable_side() {
  _has_bits_[0] |= 0x00000800u;
  return side_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_side() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.Side)
  if (!_internal_has_side()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return side_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.Side)
}
inline std::string* New_Order::unsafe_arena_release_side() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.Side)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return side_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_side(
    std::string* side) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (side != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  side_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      side, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.Side)
}

// required string OrdType = 14;
inline bool New_Order::_internal_has_ordtype() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool New_Order::has_ordtype() const {
  return _internal_has_ordtype();
}
inline void New_Order::clear_ordtype() {
  ordtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& New_Order::ordtype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.OrdType)
  return _internal_ordtype();
}
inline void New_Order::set_ordtype(const std::string& value) {
  _internal_set_ordtype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.OrdType)
}
inline std::string* New_Order::mutable_ordtype() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.OrdType)
  return _internal_mutable_ordtype();
}
inline const std::string& New_Order::_internal_ordtype() const {
  return ordtype_.Get();
}
inline void New_Order::_internal_set_ordtype(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  ordtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void New_Order::set_ordtype(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  ordtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.New_Order.OrdType)
}
inline void New_Order::set_ordtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  ordtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.New_Order.OrdType)
}
inline void New_Order::set_ordtype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  ordtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.New_Order.OrdType)
}
inline std::string* New_Order::_internal_mutable_ordtype() {
  _has_bits_[0] |= 0x00001000u;
  return ordtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* New_Order::release_ordtype() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.OrdType)
  if (!_internal_has_ordtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return ordtype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void New_Order::set_allocated_ordtype(std::string* ordtype) {
  if (ordtype != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ordtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.OrdType)
}
inline std::string* New_Order::unsafe_arena_release_ordtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.New_Order.OrdType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return ordtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void New_Order::unsafe_arena_set_allocated_ordtype(
    std::string* ordtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordtype != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ordtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.OrdType)
}

// required uint32 OrderQty = 15;
inline bool New_Order::_internal_has_orderqty() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool New_Order::has_orderqty() const {
  return _internal_has_orderqty();
}
inline void New_Order::clear_orderqty() {
  orderqty_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 New_Order::_internal_orderqty() const {
  return orderqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 New_Order::orderqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.OrderQty)
  return _internal_orderqty();
}
inline void New_Order::_internal_set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  orderqty_ = value;
}
inline void New_Order::set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_orderqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.OrderQty)
}

// required float Price = 16;
inline bool New_Order::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool New_Order::has_price() const {
  return _internal_has_price();
}
inline void New_Order::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float New_Order::_internal_price() const {
  return price_;
}
inline float New_Order::price() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.Price)
  return _internal_price();
}
inline void New_Order::_internal_set_price(float value) {
  _has_bits_[0] |= 0x00010000u;
  price_ = value;
}
inline void New_Order::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:GatewayProto.New_Order.Price)
}

// optional .GatewayProto.Extend_Fields ExtendFields = 17;
inline bool New_Order::_internal_has_extendfields() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || extendfields_ != nullptr);
  return value;
}
inline bool New_Order::has_extendfields() const {
  return _internal_has_extendfields();
}
inline void New_Order::clear_extendfields() {
  if (extendfields_ != nullptr) extendfields_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::GatewayProto::Extend_Fields& New_Order::_internal_extendfields() const {
  const ::GatewayProto::Extend_Fields* p = extendfields_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Extend_Fields*>(
      &::GatewayProto::_Extend_Fields_default_instance_);
}
inline const ::GatewayProto::Extend_Fields& New_Order::extendfields() const {
  // @@protoc_insertion_point(field_get:GatewayProto.New_Order.ExtendFields)
  return _internal_extendfields();
}
inline void New_Order::unsafe_arena_set_allocated_extendfields(
    ::GatewayProto::Extend_Fields* extendfields) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extendfields_);
  }
  extendfields_ = extendfields;
  if (extendfields) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.New_Order.ExtendFields)
}
inline ::GatewayProto::Extend_Fields* New_Order::release_extendfields() {
  auto temp = unsafe_arena_release_extendfields();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Extend_Fields* New_Order::unsafe_arena_release_extendfields() {
  // @@protoc_insertion_point(field_release:GatewayProto.New_Order.ExtendFields)
  _has_bits_[0] &= ~0x00002000u;
  ::GatewayProto::Extend_Fields* temp = extendfields_;
  extendfields_ = nullptr;
  return temp;
}
inline ::GatewayProto::Extend_Fields* New_Order::_internal_mutable_extendfields() {
  _has_bits_[0] |= 0x00002000u;
  if (extendfields_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Extend_Fields>(GetArena());
    extendfields_ = p;
  }
  return extendfields_;
}
inline ::GatewayProto::Extend_Fields* New_Order::mutable_extendfields() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.New_Order.ExtendFields)
  return _internal_mutable_extendfields();
}
inline void New_Order::set_allocated_extendfields(::GatewayProto::Extend_Fields* extendfields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extendfields_;
  }
  if (extendfields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extendfields);
    if (message_arena != submessage_arena) {
      extendfields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extendfields, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  extendfields_ = extendfields;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.New_Order.ExtendFields)
}

// -------------------------------------------------------------------

// Executive_Report

// required int32 PartitionNo = 2;
inline bool Executive_Report::_internal_has_partitionno() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Executive_Report::has_partitionno() const {
  return _internal_has_partitionno();
}
inline void Executive_Report::clear_partitionno() {
  partitionno_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Executive_Report::_internal_partitionno() const {
  return partitionno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Executive_Report::partitionno() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.PartitionNo)
  return _internal_partitionno();
}
inline void Executive_Report::_internal_set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  partitionno_ = value;
}
inline void Executive_Report::set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partitionno(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.PartitionNo)
}

// required uint32 ReportIndex = 3;
inline bool Executive_Report::_internal_has_reportindex() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Executive_Report::has_reportindex() const {
  return _internal_has_reportindex();
}
inline void Executive_Report::clear_reportindex() {
  reportindex_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Executive_Report::_internal_reportindex() const {
  return reportindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Executive_Report::reportindex() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.ReportIndex)
  return _internal_reportindex();
}
inline void Executive_Report::_internal_set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  reportindex_ = value;
}
inline void Executive_Report::set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reportindex(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.ReportIndex)
}

// required string ApplID = 4;
inline bool Executive_Report::_internal_has_applid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Executive_Report::has_applid() const {
  return _internal_has_applid();
}
inline void Executive_Report::clear_applid() {
  applid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Executive_Report::applid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.ApplID)
  return _internal_applid();
}
inline void Executive_Report::set_applid(const std::string& value) {
  _internal_set_applid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.ApplID)
}
inline std::string* Executive_Report::mutable_applid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.ApplID)
  return _internal_mutable_applid();
}
inline const std::string& Executive_Report::_internal_applid() const {
  return applid_.Get();
}
inline void Executive_Report::_internal_set_applid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_applid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.ApplID)
}
inline void Executive_Report::set_applid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.ApplID)
}
inline void Executive_Report::set_applid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.ApplID)
}
inline std::string* Executive_Report::_internal_mutable_applid() {
  _has_bits_[0] |= 0x00000001u;
  return applid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_applid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.ApplID)
  if (!_internal_has_applid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return applid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_applid(std::string* applid) {
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.ApplID)
}
inline std::string* Executive_Report::unsafe_arena_release_applid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.ApplID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return applid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_applid(
    std::string* applid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      applid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.ApplID)
}

// required string ReportingPBUID = 5;
inline bool Executive_Report::_internal_has_reportingpbuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Executive_Report::has_reportingpbuid() const {
  return _internal_has_reportingpbuid();
}
inline void Executive_Report::clear_reportingpbuid() {
  reportingpbuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Executive_Report::reportingpbuid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.ReportingPBUID)
  return _internal_reportingpbuid();
}
inline void Executive_Report::set_reportingpbuid(const std::string& value) {
  _internal_set_reportingpbuid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.ReportingPBUID)
}
inline std::string* Executive_Report::mutable_reportingpbuid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.ReportingPBUID)
  return _internal_mutable_reportingpbuid();
}
inline const std::string& Executive_Report::_internal_reportingpbuid() const {
  return reportingpbuid_.Get();
}
inline void Executive_Report::_internal_set_reportingpbuid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_reportingpbuid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.ReportingPBUID)
}
inline void Executive_Report::set_reportingpbuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.ReportingPBUID)
}
inline void Executive_Report::set_reportingpbuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.ReportingPBUID)
}
inline std::string* Executive_Report::_internal_mutable_reportingpbuid() {
  _has_bits_[0] |= 0x00000002u;
  return reportingpbuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_reportingpbuid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.ReportingPBUID)
  if (!_internal_has_reportingpbuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return reportingpbuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_reportingpbuid(std::string* reportingpbuid) {
  if (reportingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reportingpbuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reportingpbuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.ReportingPBUID)
}
inline std::string* Executive_Report::unsafe_arena_release_reportingpbuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.ReportingPBUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return reportingpbuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_reportingpbuid(
    std::string* reportingpbuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reportingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reportingpbuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reportingpbuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.ReportingPBUID)
}

// required string SubmittingPBUID = 6;
inline bool Executive_Report::_internal_has_submittingpbuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Executive_Report::has_submittingpbuid() const {
  return _internal_has_submittingpbuid();
}
inline void Executive_Report::clear_submittingpbuid() {
  submittingpbuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Executive_Report::submittingpbuid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.SubmittingPBUID)
  return _internal_submittingpbuid();
}
inline void Executive_Report::set_submittingpbuid(const std::string& value) {
  _internal_set_submittingpbuid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.SubmittingPBUID)
}
inline std::string* Executive_Report::mutable_submittingpbuid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.SubmittingPBUID)
  return _internal_mutable_submittingpbuid();
}
inline const std::string& Executive_Report::_internal_submittingpbuid() const {
  return submittingpbuid_.Get();
}
inline void Executive_Report::_internal_set_submittingpbuid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_submittingpbuid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.SubmittingPBUID)
}
inline void Executive_Report::set_submittingpbuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.SubmittingPBUID)
}
inline void Executive_Report::set_submittingpbuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.SubmittingPBUID)
}
inline std::string* Executive_Report::_internal_mutable_submittingpbuid() {
  _has_bits_[0] |= 0x00000004u;
  return submittingpbuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_submittingpbuid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.SubmittingPBUID)
  if (!_internal_has_submittingpbuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return submittingpbuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_submittingpbuid(std::string* submittingpbuid) {
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  submittingpbuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submittingpbuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.SubmittingPBUID)
}
inline std::string* Executive_Report::unsafe_arena_release_submittingpbuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.SubmittingPBUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return submittingpbuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_submittingpbuid(
    std::string* submittingpbuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  submittingpbuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      submittingpbuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.SubmittingPBUID)
}

// required string SecurityID = 7;
inline bool Executive_Report::_internal_has_securityid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Executive_Report::has_securityid() const {
  return _internal_has_securityid();
}
inline void Executive_Report::clear_securityid() {
  securityid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Executive_Report::securityid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.SecurityID)
  return _internal_securityid();
}
inline void Executive_Report::set_securityid(const std::string& value) {
  _internal_set_securityid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.SecurityID)
}
inline std::string* Executive_Report::mutable_securityid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.SecurityID)
  return _internal_mutable_securityid();
}
inline const std::string& Executive_Report::_internal_securityid() const {
  return securityid_.Get();
}
inline void Executive_Report::_internal_set_securityid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_securityid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.SecurityID)
}
inline void Executive_Report::set_securityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.SecurityID)
}
inline void Executive_Report::set_securityid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.SecurityID)
}
inline std::string* Executive_Report::_internal_mutable_securityid() {
  _has_bits_[0] |= 0x00000008u;
  return securityid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_securityid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.SecurityID)
  if (!_internal_has_securityid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return securityid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.SecurityID)
}
inline std::string* Executive_Report::unsafe_arena_release_securityid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.SecurityID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return securityid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_securityid(
    std::string* securityid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.SecurityID)
}

// required string SecurityIDSource = 8;
inline bool Executive_Report::_internal_has_securityidsource() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Executive_Report::has_securityidsource() const {
  return _internal_has_securityidsource();
}
inline void Executive_Report::clear_securityidsource() {
  securityidsource_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Executive_Report::securityidsource() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.SecurityIDSource)
  return _internal_securityidsource();
}
inline void Executive_Report::set_securityidsource(const std::string& value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.SecurityIDSource)
}
inline std::string* Executive_Report::mutable_securityidsource() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.SecurityIDSource)
  return _internal_mutable_securityidsource();
}
inline const std::string& Executive_Report::_internal_securityidsource() const {
  return securityidsource_.Get();
}
inline void Executive_Report::_internal_set_securityidsource(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_securityidsource(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.SecurityIDSource)
}
inline void Executive_Report::set_securityidsource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.SecurityIDSource)
}
inline void Executive_Report::set_securityidsource(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.SecurityIDSource)
}
inline std::string* Executive_Report::_internal_mutable_securityidsource() {
  _has_bits_[0] |= 0x00000010u;
  return securityidsource_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_securityidsource() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.SecurityIDSource)
  if (!_internal_has_securityidsource()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return securityidsource_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_securityidsource(std::string* securityidsource) {
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  securityidsource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityidsource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.SecurityIDSource)
}
inline std::string* Executive_Report::unsafe_arena_release_securityidsource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.SecurityIDSource)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return securityidsource_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_securityidsource(
    std::string* securityidsource) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  securityidsource_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityidsource, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.SecurityIDSource)
}

// required uint32 OwnerType = 9;
inline bool Executive_Report::_internal_has_ownertype() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Executive_Report::has_ownertype() const {
  return _internal_has_ownertype();
}
inline void Executive_Report::clear_ownertype() {
  ownertype_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Executive_Report::_internal_ownertype() const {
  return ownertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Executive_Report::ownertype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.OwnerType)
  return _internal_ownertype();
}
inline void Executive_Report::_internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  ownertype_ = value;
}
inline void Executive_Report::set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ownertype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.OwnerType)
}

// required string ClearingFirm = 10;
inline bool Executive_Report::_internal_has_clearingfirm() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Executive_Report::has_clearingfirm() const {
  return _internal_has_clearingfirm();
}
inline void Executive_Report::clear_clearingfirm() {
  clearingfirm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Executive_Report::clearingfirm() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.ClearingFirm)
  return _internal_clearingfirm();
}
inline void Executive_Report::set_clearingfirm(const std::string& value) {
  _internal_set_clearingfirm(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.ClearingFirm)
}
inline std::string* Executive_Report::mutable_clearingfirm() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.ClearingFirm)
  return _internal_mutable_clearingfirm();
}
inline const std::string& Executive_Report::_internal_clearingfirm() const {
  return clearingfirm_.Get();
}
inline void Executive_Report::_internal_set_clearingfirm(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_clearingfirm(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.ClearingFirm)
}
inline void Executive_Report::set_clearingfirm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.ClearingFirm)
}
inline void Executive_Report::set_clearingfirm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.ClearingFirm)
}
inline std::string* Executive_Report::_internal_mutable_clearingfirm() {
  _has_bits_[0] |= 0x00000020u;
  return clearingfirm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_clearingfirm() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.ClearingFirm)
  if (!_internal_has_clearingfirm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return clearingfirm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_clearingfirm(std::string* clearingfirm) {
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  clearingfirm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearingfirm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.ClearingFirm)
}
inline std::string* Executive_Report::unsafe_arena_release_clearingfirm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.ClearingFirm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return clearingfirm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_clearingfirm(
    std::string* clearingfirm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  clearingfirm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clearingfirm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.ClearingFirm)
}

// required string TransactTime = 11;
inline bool Executive_Report::_internal_has_transacttime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Executive_Report::has_transacttime() const {
  return _internal_has_transacttime();
}
inline void Executive_Report::clear_transacttime() {
  transacttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Executive_Report::transacttime() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.TransactTime)
  return _internal_transacttime();
}
inline void Executive_Report::set_transacttime(const std::string& value) {
  _internal_set_transacttime(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.TransactTime)
}
inline std::string* Executive_Report::mutable_transacttime() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.TransactTime)
  return _internal_mutable_transacttime();
}
inline const std::string& Executive_Report::_internal_transacttime() const {
  return transacttime_.Get();
}
inline void Executive_Report::_internal_set_transacttime(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_transacttime(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.TransactTime)
}
inline void Executive_Report::set_transacttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.TransactTime)
}
inline void Executive_Report::set_transacttime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.TransactTime)
}
inline std::string* Executive_Report::_internal_mutable_transacttime() {
  _has_bits_[0] |= 0x00000040u;
  return transacttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_transacttime() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.TransactTime)
  if (!_internal_has_transacttime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return transacttime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  transacttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transacttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.TransactTime)
}
inline std::string* Executive_Report::unsafe_arena_release_transacttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.TransactTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return transacttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_transacttime(
    std::string* transacttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  transacttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transacttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.TransactTime)
}

// required string UserInfo = 12;
inline bool Executive_Report::_internal_has_userinfo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Executive_Report::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void Executive_Report::clear_userinfo() {
  userinfo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Executive_Report::userinfo() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.UserInfo)
  return _internal_userinfo();
}
inline void Executive_Report::set_userinfo(const std::string& value) {
  _internal_set_userinfo(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.UserInfo)
}
inline std::string* Executive_Report::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.UserInfo)
  return _internal_mutable_userinfo();
}
inline const std::string& Executive_Report::_internal_userinfo() const {
  return userinfo_.Get();
}
inline void Executive_Report::_internal_set_userinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_userinfo(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.UserInfo)
}
inline void Executive_Report::set_userinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.UserInfo)
}
inline void Executive_Report::set_userinfo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.UserInfo)
}
inline std::string* Executive_Report::_internal_mutable_userinfo() {
  _has_bits_[0] |= 0x00000080u;
  return userinfo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_userinfo() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.UserInfo)
  if (!_internal_has_userinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return userinfo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_userinfo(std::string* userinfo) {
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  userinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userinfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.UserInfo)
}
inline std::string* Executive_Report::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.UserInfo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return userinfo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_userinfo(
    std::string* userinfo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  userinfo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userinfo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.UserInfo)
}

// required string OrderID = 13;
inline bool Executive_Report::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Executive_Report::has_orderid() const {
  return _internal_has_orderid();
}
inline void Executive_Report::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Executive_Report::orderid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.OrderID)
  return _internal_orderid();
}
inline void Executive_Report::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.OrderID)
}
inline std::string* Executive_Report::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.OrderID)
  return _internal_mutable_orderid();
}
inline const std::string& Executive_Report::_internal_orderid() const {
  return orderid_.Get();
}
inline void Executive_Report::_internal_set_orderid(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_orderid(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.OrderID)
}
inline void Executive_Report::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.OrderID)
}
inline void Executive_Report::set_orderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.OrderID)
}
inline std::string* Executive_Report::_internal_mutable_orderid() {
  _has_bits_[0] |= 0x00000100u;
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_orderid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.OrderID)
  if (!_internal_has_orderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return orderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.OrderID)
}
inline std::string* Executive_Report::unsafe_arena_release_orderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.OrderID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return orderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_orderid(
    std::string* orderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (orderid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  orderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.OrderID)
}

// required string ClOrdID = 14;
inline bool Executive_Report::_internal_has_clordid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Executive_Report::has_clordid() const {
  return _internal_has_clordid();
}
inline void Executive_Report::clear_clordid() {
  clordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Executive_Report::clordid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.ClOrdID)
  return _internal_clordid();
}
inline void Executive_Report::set_clordid(const std::string& value) {
  _internal_set_clordid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.ClOrdID)
}
inline std::string* Executive_Report::mutable_clordid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.ClOrdID)
  return _internal_mutable_clordid();
}
inline const std::string& Executive_Report::_internal_clordid() const {
  return clordid_.Get();
}
inline void Executive_Report::_internal_set_clordid(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_clordid(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  clordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.ClOrdID)
}
inline void Executive_Report::set_clordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.ClOrdID)
}
inline void Executive_Report::set_clordid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.ClOrdID)
}
inline std::string* Executive_Report::_internal_mutable_clordid() {
  _has_bits_[0] |= 0x00000200u;
  return clordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_clordid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.ClOrdID)
  if (!_internal_has_clordid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return clordid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_clordid(std::string* clordid) {
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  clordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.ClOrdID)
}
inline std::string* Executive_Report::unsafe_arena_release_clordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.ClOrdID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return clordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_clordid(
    std::string* clordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  clordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.ClOrdID)
}

// required string OrigClOrdID = 15;
inline bool Executive_Report::_internal_has_origclordid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Executive_Report::has_origclordid() const {
  return _internal_has_origclordid();
}
inline void Executive_Report::clear_origclordid() {
  origclordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Executive_Report::origclordid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.OrigClOrdID)
  return _internal_origclordid();
}
inline void Executive_Report::set_origclordid(const std::string& value) {
  _internal_set_origclordid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.OrigClOrdID)
}
inline std::string* Executive_Report::mutable_origclordid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.OrigClOrdID)
  return _internal_mutable_origclordid();
}
inline const std::string& Executive_Report::_internal_origclordid() const {
  return origclordid_.Get();
}
inline void Executive_Report::_internal_set_origclordid(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_origclordid(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  origclordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.OrigClOrdID)
}
inline void Executive_Report::set_origclordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.OrigClOrdID)
}
inline void Executive_Report::set_origclordid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.OrigClOrdID)
}
inline std::string* Executive_Report::_internal_mutable_origclordid() {
  _has_bits_[0] |= 0x00000400u;
  return origclordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_origclordid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.OrigClOrdID)
  if (!_internal_has_origclordid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return origclordid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_origclordid(std::string* origclordid) {
  if (origclordid != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  origclordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origclordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.OrigClOrdID)
}
inline std::string* Executive_Report::unsafe_arena_release_origclordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.OrigClOrdID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return origclordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_origclordid(
    std::string* origclordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (origclordid != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  origclordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      origclordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.OrigClOrdID)
}

// required string ExecID = 16;
inline bool Executive_Report::_internal_has_execid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Executive_Report::has_execid() const {
  return _internal_has_execid();
}
inline void Executive_Report::clear_execid() {
  execid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Executive_Report::execid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.ExecID)
  return _internal_execid();
}
inline void Executive_Report::set_execid(const std::string& value) {
  _internal_set_execid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.ExecID)
}
inline std::string* Executive_Report::mutable_execid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.ExecID)
  return _internal_mutable_execid();
}
inline const std::string& Executive_Report::_internal_execid() const {
  return execid_.Get();
}
inline void Executive_Report::_internal_set_execid(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_execid(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  execid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.ExecID)
}
inline void Executive_Report::set_execid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.ExecID)
}
inline void Executive_Report::set_execid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.ExecID)
}
inline std::string* Executive_Report::_internal_mutable_execid() {
  _has_bits_[0] |= 0x00000800u;
  return execid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_execid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.ExecID)
  if (!_internal_has_execid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return execid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_execid(std::string* execid) {
  if (execid != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  execid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), execid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.ExecID)
}
inline std::string* Executive_Report::unsafe_arena_release_execid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.ExecID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return execid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_execid(
    std::string* execid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (execid != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  execid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      execid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.ExecID)
}

// required string ExecType = 17;
inline bool Executive_Report::_internal_has_exectype() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Executive_Report::has_exectype() const {
  return _internal_has_exectype();
}
inline void Executive_Report::clear_exectype() {
  exectype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Executive_Report::exectype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.ExecType)
  return _internal_exectype();
}
inline void Executive_Report::set_exectype(const std::string& value) {
  _internal_set_exectype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.ExecType)
}
inline std::string* Executive_Report::mutable_exectype() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.ExecType)
  return _internal_mutable_exectype();
}
inline const std::string& Executive_Report::_internal_exectype() const {
  return exectype_.Get();
}
inline void Executive_Report::_internal_set_exectype(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  exectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_exectype(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  exectype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.ExecType)
}
inline void Executive_Report::set_exectype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  exectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.ExecType)
}
inline void Executive_Report::set_exectype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  exectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.ExecType)
}
inline std::string* Executive_Report::_internal_mutable_exectype() {
  _has_bits_[0] |= 0x00001000u;
  return exectype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_exectype() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.ExecType)
  if (!_internal_has_exectype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return exectype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_exectype(std::string* exectype) {
  if (exectype != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  exectype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exectype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.ExecType)
}
inline std::string* Executive_Report::unsafe_arena_release_exectype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.ExecType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return exectype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_exectype(
    std::string* exectype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exectype != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  exectype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exectype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.ExecType)
}

// required string OrdStatus = 18;
inline bool Executive_Report::_internal_has_ordstatus() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Executive_Report::has_ordstatus() const {
  return _internal_has_ordstatus();
}
inline void Executive_Report::clear_ordstatus() {
  ordstatus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Executive_Report::ordstatus() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.OrdStatus)
  return _internal_ordstatus();
}
inline void Executive_Report::set_ordstatus(const std::string& value) {
  _internal_set_ordstatus(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.OrdStatus)
}
inline std::string* Executive_Report::mutable_ordstatus() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.OrdStatus)
  return _internal_mutable_ordstatus();
}
inline const std::string& Executive_Report::_internal_ordstatus() const {
  return ordstatus_.Get();
}
inline void Executive_Report::_internal_set_ordstatus(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_ordstatus(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  ordstatus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.OrdStatus)
}
inline void Executive_Report::set_ordstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.OrdStatus)
}
inline void Executive_Report::set_ordstatus(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.OrdStatus)
}
inline std::string* Executive_Report::_internal_mutable_ordstatus() {
  _has_bits_[0] |= 0x00002000u;
  return ordstatus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_ordstatus() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.OrdStatus)
  if (!_internal_has_ordstatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return ordstatus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_ordstatus(std::string* ordstatus) {
  if (ordstatus != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  ordstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordstatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.OrdStatus)
}
inline std::string* Executive_Report::unsafe_arena_release_ordstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.OrdStatus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00002000u;
  return ordstatus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_ordstatus(
    std::string* ordstatus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordstatus != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  ordstatus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordstatus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.OrdStatus)
}

// required string OrdRejReason = 19;
inline bool Executive_Report::_internal_has_ordrejreason() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Executive_Report::has_ordrejreason() const {
  return _internal_has_ordrejreason();
}
inline void Executive_Report::clear_ordrejreason() {
  ordrejreason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Executive_Report::ordrejreason() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.OrdRejReason)
  return _internal_ordrejreason();
}
inline void Executive_Report::set_ordrejreason(const std::string& value) {
  _internal_set_ordrejreason(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.OrdRejReason)
}
inline std::string* Executive_Report::mutable_ordrejreason() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.OrdRejReason)
  return _internal_mutable_ordrejreason();
}
inline const std::string& Executive_Report::_internal_ordrejreason() const {
  return ordrejreason_.Get();
}
inline void Executive_Report::_internal_set_ordrejreason(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  ordrejreason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_ordrejreason(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  ordrejreason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.OrdRejReason)
}
inline void Executive_Report::set_ordrejreason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  ordrejreason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.OrdRejReason)
}
inline void Executive_Report::set_ordrejreason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  ordrejreason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.OrdRejReason)
}
inline std::string* Executive_Report::_internal_mutable_ordrejreason() {
  _has_bits_[0] |= 0x00004000u;
  return ordrejreason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_ordrejreason() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.OrdRejReason)
  if (!_internal_has_ordrejreason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return ordrejreason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_ordrejreason(std::string* ordrejreason) {
  if (ordrejreason != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  ordrejreason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordrejreason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.OrdRejReason)
}
inline std::string* Executive_Report::unsafe_arena_release_ordrejreason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.OrdRejReason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return ordrejreason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_ordrejreason(
    std::string* ordrejreason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordrejreason != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  ordrejreason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordrejreason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.OrdRejReason)
}

// required int32 LeavesQty = 20;
inline bool Executive_Report::_internal_has_leavesqty() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Executive_Report::has_leavesqty() const {
  return _internal_has_leavesqty();
}
inline void Executive_Report::clear_leavesqty() {
  leavesqty_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Executive_Report::_internal_leavesqty() const {
  return leavesqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Executive_Report::leavesqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.LeavesQty)
  return _internal_leavesqty();
}
inline void Executive_Report::_internal_set_leavesqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  leavesqty_ = value;
}
inline void Executive_Report::set_leavesqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leavesqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.LeavesQty)
}

// required int32 CumQty = 21;
inline bool Executive_Report::_internal_has_cumqty() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Executive_Report::has_cumqty() const {
  return _internal_has_cumqty();
}
inline void Executive_Report::clear_cumqty() {
  cumqty_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Executive_Report::_internal_cumqty() const {
  return cumqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Executive_Report::cumqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.CumQty)
  return _internal_cumqty();
}
inline void Executive_Report::_internal_set_cumqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  cumqty_ = value;
}
inline void Executive_Report::set_cumqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cumqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.CumQty)
}

// required string Side = 22;
inline bool Executive_Report::_internal_has_side() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Executive_Report::has_side() const {
  return _internal_has_side();
}
inline void Executive_Report::clear_side() {
  side_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& Executive_Report::side() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.Side)
  return _internal_side();
}
inline void Executive_Report::set_side(const std::string& value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.Side)
}
inline std::string* Executive_Report::mutable_side() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.Side)
  return _internal_mutable_side();
}
inline const std::string& Executive_Report::_internal_side() const {
  return side_.Get();
}
inline void Executive_Report::_internal_set_side(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_side(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  side_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.Side)
}
inline void Executive_Report::set_side(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.Side)
}
inline void Executive_Report::set_side(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00008000u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.Side)
}
inline std::string* Executive_Report::_internal_mutable_side() {
  _has_bits_[0] |= 0x00008000u;
  return side_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_side() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.Side)
  if (!_internal_has_side()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return side_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.Side)
}
inline std::string* Executive_Report::unsafe_arena_release_side() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.Side)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00008000u;
  return side_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_side(
    std::string* side) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (side != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  side_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      side, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.Side)
}

// required string OrdType = 23;
inline bool Executive_Report::_internal_has_ordtype() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Executive_Report::has_ordtype() const {
  return _internal_has_ordtype();
}
inline void Executive_Report::clear_ordtype() {
  ordtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& Executive_Report::ordtype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.OrdType)
  return _internal_ordtype();
}
inline void Executive_Report::set_ordtype(const std::string& value) {
  _internal_set_ordtype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.OrdType)
}
inline std::string* Executive_Report::mutable_ordtype() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.OrdType)
  return _internal_mutable_ordtype();
}
inline const std::string& Executive_Report::_internal_ordtype() const {
  return ordtype_.Get();
}
inline void Executive_Report::_internal_set_ordtype(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  ordtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_ordtype(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  ordtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.OrdType)
}
inline void Executive_Report::set_ordtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  ordtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.OrdType)
}
inline void Executive_Report::set_ordtype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  ordtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.OrdType)
}
inline std::string* Executive_Report::_internal_mutable_ordtype() {
  _has_bits_[0] |= 0x00010000u;
  return ordtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_ordtype() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.OrdType)
  if (!_internal_has_ordtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return ordtype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_ordtype(std::string* ordtype) {
  if (ordtype != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  ordtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.OrdType)
}
inline std::string* Executive_Report::unsafe_arena_release_ordtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.OrdType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00010000u;
  return ordtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_ordtype(
    std::string* ordtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordtype != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  ordtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.OrdType)
}

// required uint32 OrderQty = 24;
inline bool Executive_Report::_internal_has_orderqty() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Executive_Report::has_orderqty() const {
  return _internal_has_orderqty();
}
inline void Executive_Report::clear_orderqty() {
  orderqty_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Executive_Report::_internal_orderqty() const {
  return orderqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Executive_Report::orderqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.OrderQty)
  return _internal_orderqty();
}
inline void Executive_Report::_internal_set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  orderqty_ = value;
}
inline void Executive_Report::set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_orderqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.OrderQty)
}

// required float Price = 25;
inline bool Executive_Report::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Executive_Report::has_price() const {
  return _internal_has_price();
}
inline void Executive_Report::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float Executive_Report::_internal_price() const {
  return price_;
}
inline float Executive_Report::price() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.Price)
  return _internal_price();
}
inline void Executive_Report::_internal_set_price(float value) {
  _has_bits_[0] |= 0x08000000u;
  price_ = value;
}
inline void Executive_Report::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.Price)
}

// required string AccountID = 26;
inline bool Executive_Report::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Executive_Report::has_accountid() const {
  return _internal_has_accountid();
}
inline void Executive_Report::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& Executive_Report::accountid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.AccountID)
  return _internal_accountid();
}
inline void Executive_Report::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.AccountID)
}
inline std::string* Executive_Report::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.AccountID)
  return _internal_mutable_accountid();
}
inline const std::string& Executive_Report::_internal_accountid() const {
  return accountid_.Get();
}
inline void Executive_Report::_internal_set_accountid(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_accountid(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.AccountID)
}
inline void Executive_Report::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.AccountID)
}
inline void Executive_Report::set_accountid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00020000u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.AccountID)
}
inline std::string* Executive_Report::_internal_mutable_accountid() {
  _has_bits_[0] |= 0x00020000u;
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_accountid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.AccountID)
  if (!_internal_has_accountid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return accountid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.AccountID)
}
inline std::string* Executive_Report::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.AccountID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00020000u;
  return accountid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_accountid(
    std::string* accountid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accountid != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  accountid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accountid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.AccountID)
}

// required string BranchID = 27;
inline bool Executive_Report::_internal_has_branchid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Executive_Report::has_branchid() const {
  return _internal_has_branchid();
}
inline void Executive_Report::clear_branchid() {
  branchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& Executive_Report::branchid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.BranchID)
  return _internal_branchid();
}
inline void Executive_Report::set_branchid(const std::string& value) {
  _internal_set_branchid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.BranchID)
}
inline std::string* Executive_Report::mutable_branchid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.BranchID)
  return _internal_mutable_branchid();
}
inline const std::string& Executive_Report::_internal_branchid() const {
  return branchid_.Get();
}
inline void Executive_Report::_internal_set_branchid(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_branchid(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  branchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.BranchID)
}
inline void Executive_Report::set_branchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00040000u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.BranchID)
}
inline void Executive_Report::set_branchid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00040000u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.BranchID)
}
inline std::string* Executive_Report::_internal_mutable_branchid() {
  _has_bits_[0] |= 0x00040000u;
  return branchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_branchid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.BranchID)
  if (!_internal_has_branchid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return branchid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_branchid(std::string* branchid) {
  if (branchid != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  branchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.BranchID)
}
inline std::string* Executive_Report::unsafe_arena_release_branchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.BranchID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00040000u;
  return branchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_branchid(
    std::string* branchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branchid != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  branchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.BranchID)
}

// required string OrderRestrictions = 28;
inline bool Executive_Report::_internal_has_orderrestrictions() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Executive_Report::has_orderrestrictions() const {
  return _internal_has_orderrestrictions();
}
inline void Executive_Report::clear_orderrestrictions() {
  orderrestrictions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& Executive_Report::orderrestrictions() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.OrderRestrictions)
  return _internal_orderrestrictions();
}
inline void Executive_Report::set_orderrestrictions(const std::string& value) {
  _internal_set_orderrestrictions(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Executive_Report.OrderRestrictions)
}
inline std::string* Executive_Report::mutable_orderrestrictions() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.OrderRestrictions)
  return _internal_mutable_orderrestrictions();
}
inline const std::string& Executive_Report::_internal_orderrestrictions() const {
  return orderrestrictions_.Get();
}
inline void Executive_Report::_internal_set_orderrestrictions(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  orderrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Executive_Report::set_orderrestrictions(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  orderrestrictions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Executive_Report.OrderRestrictions)
}
inline void Executive_Report::set_orderrestrictions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  orderrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Executive_Report.OrderRestrictions)
}
inline void Executive_Report::set_orderrestrictions(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00080000u;
  orderrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Executive_Report.OrderRestrictions)
}
inline std::string* Executive_Report::_internal_mutable_orderrestrictions() {
  _has_bits_[0] |= 0x00080000u;
  return orderrestrictions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Executive_Report::release_orderrestrictions() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.OrderRestrictions)
  if (!_internal_has_orderrestrictions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return orderrestrictions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Executive_Report::set_allocated_orderrestrictions(std::string* orderrestrictions) {
  if (orderrestrictions != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  orderrestrictions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderrestrictions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.OrderRestrictions)
}
inline std::string* Executive_Report::unsafe_arena_release_orderrestrictions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Executive_Report.OrderRestrictions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00080000u;
  return orderrestrictions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Executive_Report::unsafe_arena_set_allocated_orderrestrictions(
    std::string* orderrestrictions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (orderrestrictions != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  orderrestrictions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      orderrestrictions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.OrderRestrictions)
}

// optional .GatewayProto.Extend_Fields ExtendFields = 29;
inline bool Executive_Report::_internal_has_extendfields() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || extendfields_ != nullptr);
  return value;
}
inline bool Executive_Report::has_extendfields() const {
  return _internal_has_extendfields();
}
inline void Executive_Report::clear_extendfields() {
  if (extendfields_ != nullptr) extendfields_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::GatewayProto::Extend_Fields& Executive_Report::_internal_extendfields() const {
  const ::GatewayProto::Extend_Fields* p = extendfields_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Extend_Fields*>(
      &::GatewayProto::_Extend_Fields_default_instance_);
}
inline const ::GatewayProto::Extend_Fields& Executive_Report::extendfields() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Executive_Report.ExtendFields)
  return _internal_extendfields();
}
inline void Executive_Report::unsafe_arena_set_allocated_extendfields(
    ::GatewayProto::Extend_Fields* extendfields) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extendfields_);
  }
  extendfields_ = extendfields;
  if (extendfields) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Executive_Report.ExtendFields)
}
inline ::GatewayProto::Extend_Fields* Executive_Report::release_extendfields() {
  auto temp = unsafe_arena_release_extendfields();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Extend_Fields* Executive_Report::unsafe_arena_release_extendfields() {
  // @@protoc_insertion_point(field_release:GatewayProto.Executive_Report.ExtendFields)
  _has_bits_[0] &= ~0x00100000u;
  ::GatewayProto::Extend_Fields* temp = extendfields_;
  extendfields_ = nullptr;
  return temp;
}
inline ::GatewayProto::Extend_Fields* Executive_Report::_internal_mutable_extendfields() {
  _has_bits_[0] |= 0x00100000u;
  if (extendfields_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Extend_Fields>(GetArena());
    extendfields_ = p;
  }
  return extendfields_;
}
inline ::GatewayProto::Extend_Fields* Executive_Report::mutable_extendfields() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Executive_Report.ExtendFields)
  return _internal_mutable_extendfields();
}
inline void Executive_Report::set_allocated_extendfields(::GatewayProto::Extend_Fields* extendfields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extendfields_;
  }
  if (extendfields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extendfields);
    if (message_arena != submessage_arena) {
      extendfields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extendfields, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  extendfields_ = extendfields;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Executive_Report.ExtendFields)
}

// -------------------------------------------------------------------

// Transaction_Report

// required int32 PartitionNo = 2;
inline bool Transaction_Report::_internal_has_partitionno() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Transaction_Report::has_partitionno() const {
  return _internal_has_partitionno();
}
inline void Transaction_Report::clear_partitionno() {
  partitionno_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Report::_internal_partitionno() const {
  return partitionno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Report::partitionno() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.PartitionNo)
  return _internal_partitionno();
}
inline void Transaction_Report::_internal_set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  partitionno_ = value;
}
inline void Transaction_Report::set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partitionno(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.PartitionNo)
}

// required uint32 ReportIndex = 3;
inline bool Transaction_Report::_internal_has_reportindex() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Transaction_Report::has_reportindex() const {
  return _internal_has_reportindex();
}
inline void Transaction_Report::clear_reportindex() {
  reportindex_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Report::_internal_reportindex() const {
  return reportindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Report::reportindex() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.ReportIndex)
  return _internal_reportindex();
}
inline void Transaction_Report::_internal_set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  reportindex_ = value;
}
inline void Transaction_Report::set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reportindex(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.ReportIndex)
}

// required string ApplID = 4;
inline bool Transaction_Report::_internal_has_applid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transaction_Report::has_applid() const {
  return _internal_has_applid();
}
inline void Transaction_Report::clear_applid() {
  applid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transaction_Report::applid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.ApplID)
  return _internal_applid();
}
inline void Transaction_Report::set_applid(const std::string& value) {
  _internal_set_applid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.ApplID)
}
inline std::string* Transaction_Report::mutable_applid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.ApplID)
  return _internal_mutable_applid();
}
inline const std::string& Transaction_Report::_internal_applid() const {
  return applid_.Get();
}
inline void Transaction_Report::_internal_set_applid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_applid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.ApplID)
}
inline void Transaction_Report::set_applid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.ApplID)
}
inline void Transaction_Report::set_applid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.ApplID)
}
inline std::string* Transaction_Report::_internal_mutable_applid() {
  _has_bits_[0] |= 0x00000001u;
  return applid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_applid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.ApplID)
  if (!_internal_has_applid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return applid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_applid(std::string* applid) {
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.ApplID)
}
inline std::string* Transaction_Report::unsafe_arena_release_applid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.ApplID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return applid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_applid(
    std::string* applid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      applid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.ApplID)
}

// required string ReportingPBUID = 5;
inline bool Transaction_Report::_internal_has_reportingpbuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transaction_Report::has_reportingpbuid() const {
  return _internal_has_reportingpbuid();
}
inline void Transaction_Report::clear_reportingpbuid() {
  reportingpbuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transaction_Report::reportingpbuid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.ReportingPBUID)
  return _internal_reportingpbuid();
}
inline void Transaction_Report::set_reportingpbuid(const std::string& value) {
  _internal_set_reportingpbuid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.ReportingPBUID)
}
inline std::string* Transaction_Report::mutable_reportingpbuid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.ReportingPBUID)
  return _internal_mutable_reportingpbuid();
}
inline const std::string& Transaction_Report::_internal_reportingpbuid() const {
  return reportingpbuid_.Get();
}
inline void Transaction_Report::_internal_set_reportingpbuid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_reportingpbuid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.ReportingPBUID)
}
inline void Transaction_Report::set_reportingpbuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.ReportingPBUID)
}
inline void Transaction_Report::set_reportingpbuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.ReportingPBUID)
}
inline std::string* Transaction_Report::_internal_mutable_reportingpbuid() {
  _has_bits_[0] |= 0x00000002u;
  return reportingpbuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_reportingpbuid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.ReportingPBUID)
  if (!_internal_has_reportingpbuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return reportingpbuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_reportingpbuid(std::string* reportingpbuid) {
  if (reportingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reportingpbuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reportingpbuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.ReportingPBUID)
}
inline std::string* Transaction_Report::unsafe_arena_release_reportingpbuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.ReportingPBUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return reportingpbuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_reportingpbuid(
    std::string* reportingpbuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reportingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reportingpbuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reportingpbuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.ReportingPBUID)
}

// required string SubmittingPBUID = 6;
inline bool Transaction_Report::_internal_has_submittingpbuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transaction_Report::has_submittingpbuid() const {
  return _internal_has_submittingpbuid();
}
inline void Transaction_Report::clear_submittingpbuid() {
  submittingpbuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Transaction_Report::submittingpbuid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.SubmittingPBUID)
  return _internal_submittingpbuid();
}
inline void Transaction_Report::set_submittingpbuid(const std::string& value) {
  _internal_set_submittingpbuid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.SubmittingPBUID)
}
inline std::string* Transaction_Report::mutable_submittingpbuid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.SubmittingPBUID)
  return _internal_mutable_submittingpbuid();
}
inline const std::string& Transaction_Report::_internal_submittingpbuid() const {
  return submittingpbuid_.Get();
}
inline void Transaction_Report::_internal_set_submittingpbuid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_submittingpbuid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.SubmittingPBUID)
}
inline void Transaction_Report::set_submittingpbuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.SubmittingPBUID)
}
inline void Transaction_Report::set_submittingpbuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.SubmittingPBUID)
}
inline std::string* Transaction_Report::_internal_mutable_submittingpbuid() {
  _has_bits_[0] |= 0x00000004u;
  return submittingpbuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_submittingpbuid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.SubmittingPBUID)
  if (!_internal_has_submittingpbuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return submittingpbuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_submittingpbuid(std::string* submittingpbuid) {
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  submittingpbuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submittingpbuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.SubmittingPBUID)
}
inline std::string* Transaction_Report::unsafe_arena_release_submittingpbuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.SubmittingPBUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return submittingpbuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_submittingpbuid(
    std::string* submittingpbuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  submittingpbuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      submittingpbuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.SubmittingPBUID)
}

// required string SecurityID = 7;
inline bool Transaction_Report::_internal_has_securityid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Transaction_Report::has_securityid() const {
  return _internal_has_securityid();
}
inline void Transaction_Report::clear_securityid() {
  securityid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Transaction_Report::securityid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.SecurityID)
  return _internal_securityid();
}
inline void Transaction_Report::set_securityid(const std::string& value) {
  _internal_set_securityid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.SecurityID)
}
inline std::string* Transaction_Report::mutable_securityid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.SecurityID)
  return _internal_mutable_securityid();
}
inline const std::string& Transaction_Report::_internal_securityid() const {
  return securityid_.Get();
}
inline void Transaction_Report::_internal_set_securityid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_securityid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.SecurityID)
}
inline void Transaction_Report::set_securityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.SecurityID)
}
inline void Transaction_Report::set_securityid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.SecurityID)
}
inline std::string* Transaction_Report::_internal_mutable_securityid() {
  _has_bits_[0] |= 0x00000008u;
  return securityid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_securityid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.SecurityID)
  if (!_internal_has_securityid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return securityid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.SecurityID)
}
inline std::string* Transaction_Report::unsafe_arena_release_securityid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.SecurityID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return securityid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_securityid(
    std::string* securityid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.SecurityID)
}

// required string SecurityIDSource = 8;
inline bool Transaction_Report::_internal_has_securityidsource() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Transaction_Report::has_securityidsource() const {
  return _internal_has_securityidsource();
}
inline void Transaction_Report::clear_securityidsource() {
  securityidsource_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Transaction_Report::securityidsource() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.SecurityIDSource)
  return _internal_securityidsource();
}
inline void Transaction_Report::set_securityidsource(const std::string& value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.SecurityIDSource)
}
inline std::string* Transaction_Report::mutable_securityidsource() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.SecurityIDSource)
  return _internal_mutable_securityidsource();
}
inline const std::string& Transaction_Report::_internal_securityidsource() const {
  return securityidsource_.Get();
}
inline void Transaction_Report::_internal_set_securityidsource(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_securityidsource(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.SecurityIDSource)
}
inline void Transaction_Report::set_securityidsource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.SecurityIDSource)
}
inline void Transaction_Report::set_securityidsource(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.SecurityIDSource)
}
inline std::string* Transaction_Report::_internal_mutable_securityidsource() {
  _has_bits_[0] |= 0x00000010u;
  return securityidsource_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_securityidsource() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.SecurityIDSource)
  if (!_internal_has_securityidsource()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return securityidsource_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_securityidsource(std::string* securityidsource) {
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  securityidsource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityidsource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.SecurityIDSource)
}
inline std::string* Transaction_Report::unsafe_arena_release_securityidsource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.SecurityIDSource)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return securityidsource_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_securityidsource(
    std::string* securityidsource) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  securityidsource_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityidsource, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.SecurityIDSource)
}

// required uint32 OwnerType = 9;
inline bool Transaction_Report::_internal_has_ownertype() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Transaction_Report::has_ownertype() const {
  return _internal_has_ownertype();
}
inline void Transaction_Report::clear_ownertype() {
  ownertype_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Report::_internal_ownertype() const {
  return ownertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Report::ownertype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.OwnerType)
  return _internal_ownertype();
}
inline void Transaction_Report::_internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  ownertype_ = value;
}
inline void Transaction_Report::set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ownertype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.OwnerType)
}

// required string ClearingFirm = 10;
inline bool Transaction_Report::_internal_has_clearingfirm() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Transaction_Report::has_clearingfirm() const {
  return _internal_has_clearingfirm();
}
inline void Transaction_Report::clear_clearingfirm() {
  clearingfirm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Transaction_Report::clearingfirm() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.ClearingFirm)
  return _internal_clearingfirm();
}
inline void Transaction_Report::set_clearingfirm(const std::string& value) {
  _internal_set_clearingfirm(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.ClearingFirm)
}
inline std::string* Transaction_Report::mutable_clearingfirm() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.ClearingFirm)
  return _internal_mutable_clearingfirm();
}
inline const std::string& Transaction_Report::_internal_clearingfirm() const {
  return clearingfirm_.Get();
}
inline void Transaction_Report::_internal_set_clearingfirm(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_clearingfirm(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.ClearingFirm)
}
inline void Transaction_Report::set_clearingfirm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.ClearingFirm)
}
inline void Transaction_Report::set_clearingfirm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.ClearingFirm)
}
inline std::string* Transaction_Report::_internal_mutable_clearingfirm() {
  _has_bits_[0] |= 0x00000020u;
  return clearingfirm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_clearingfirm() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.ClearingFirm)
  if (!_internal_has_clearingfirm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return clearingfirm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_clearingfirm(std::string* clearingfirm) {
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  clearingfirm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearingfirm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.ClearingFirm)
}
inline std::string* Transaction_Report::unsafe_arena_release_clearingfirm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.ClearingFirm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return clearingfirm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_clearingfirm(
    std::string* clearingfirm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  clearingfirm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clearingfirm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.ClearingFirm)
}

// required string TransactTime = 11;
inline bool Transaction_Report::_internal_has_transacttime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Transaction_Report::has_transacttime() const {
  return _internal_has_transacttime();
}
inline void Transaction_Report::clear_transacttime() {
  transacttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Transaction_Report::transacttime() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.TransactTime)
  return _internal_transacttime();
}
inline void Transaction_Report::set_transacttime(const std::string& value) {
  _internal_set_transacttime(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.TransactTime)
}
inline std::string* Transaction_Report::mutable_transacttime() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.TransactTime)
  return _internal_mutable_transacttime();
}
inline const std::string& Transaction_Report::_internal_transacttime() const {
  return transacttime_.Get();
}
inline void Transaction_Report::_internal_set_transacttime(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_transacttime(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.TransactTime)
}
inline void Transaction_Report::set_transacttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.TransactTime)
}
inline void Transaction_Report::set_transacttime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.TransactTime)
}
inline std::string* Transaction_Report::_internal_mutable_transacttime() {
  _has_bits_[0] |= 0x00000040u;
  return transacttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_transacttime() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.TransactTime)
  if (!_internal_has_transacttime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return transacttime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  transacttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transacttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.TransactTime)
}
inline std::string* Transaction_Report::unsafe_arena_release_transacttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.TransactTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return transacttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_transacttime(
    std::string* transacttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  transacttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transacttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.TransactTime)
}

// required string UserInfo = 12;
inline bool Transaction_Report::_internal_has_userinfo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Transaction_Report::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void Transaction_Report::clear_userinfo() {
  userinfo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Transaction_Report::userinfo() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.UserInfo)
  return _internal_userinfo();
}
inline void Transaction_Report::set_userinfo(const std::string& value) {
  _internal_set_userinfo(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.UserInfo)
}
inline std::string* Transaction_Report::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.UserInfo)
  return _internal_mutable_userinfo();
}
inline const std::string& Transaction_Report::_internal_userinfo() const {
  return userinfo_.Get();
}
inline void Transaction_Report::_internal_set_userinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_userinfo(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.UserInfo)
}
inline void Transaction_Report::set_userinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.UserInfo)
}
inline void Transaction_Report::set_userinfo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.UserInfo)
}
inline std::string* Transaction_Report::_internal_mutable_userinfo() {
  _has_bits_[0] |= 0x00000080u;
  return userinfo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_userinfo() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.UserInfo)
  if (!_internal_has_userinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return userinfo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_userinfo(std::string* userinfo) {
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  userinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userinfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.UserInfo)
}
inline std::string* Transaction_Report::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.UserInfo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return userinfo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_userinfo(
    std::string* userinfo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  userinfo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userinfo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.UserInfo)
}

// required string OrderID = 13;
inline bool Transaction_Report::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Transaction_Report::has_orderid() const {
  return _internal_has_orderid();
}
inline void Transaction_Report::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Transaction_Report::orderid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.OrderID)
  return _internal_orderid();
}
inline void Transaction_Report::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.OrderID)
}
inline std::string* Transaction_Report::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.OrderID)
  return _internal_mutable_orderid();
}
inline const std::string& Transaction_Report::_internal_orderid() const {
  return orderid_.Get();
}
inline void Transaction_Report::_internal_set_orderid(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_orderid(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.OrderID)
}
inline void Transaction_Report::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.OrderID)
}
inline void Transaction_Report::set_orderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.OrderID)
}
inline std::string* Transaction_Report::_internal_mutable_orderid() {
  _has_bits_[0] |= 0x00000100u;
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_orderid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.OrderID)
  if (!_internal_has_orderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return orderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.OrderID)
}
inline std::string* Transaction_Report::unsafe_arena_release_orderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.OrderID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return orderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_orderid(
    std::string* orderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (orderid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  orderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.OrderID)
}

// required string ClOrdID = 14;
inline bool Transaction_Report::_internal_has_clordid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Transaction_Report::has_clordid() const {
  return _internal_has_clordid();
}
inline void Transaction_Report::clear_clordid() {
  clordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Transaction_Report::clordid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.ClOrdID)
  return _internal_clordid();
}
inline void Transaction_Report::set_clordid(const std::string& value) {
  _internal_set_clordid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.ClOrdID)
}
inline std::string* Transaction_Report::mutable_clordid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.ClOrdID)
  return _internal_mutable_clordid();
}
inline const std::string& Transaction_Report::_internal_clordid() const {
  return clordid_.Get();
}
inline void Transaction_Report::_internal_set_clordid(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_clordid(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  clordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.ClOrdID)
}
inline void Transaction_Report::set_clordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.ClOrdID)
}
inline void Transaction_Report::set_clordid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.ClOrdID)
}
inline std::string* Transaction_Report::_internal_mutable_clordid() {
  _has_bits_[0] |= 0x00000200u;
  return clordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_clordid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.ClOrdID)
  if (!_internal_has_clordid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return clordid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_clordid(std::string* clordid) {
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  clordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.ClOrdID)
}
inline std::string* Transaction_Report::unsafe_arena_release_clordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.ClOrdID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return clordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_clordid(
    std::string* clordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  clordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.ClOrdID)
}

// required string ExecID = 15;
inline bool Transaction_Report::_internal_has_execid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Transaction_Report::has_execid() const {
  return _internal_has_execid();
}
inline void Transaction_Report::clear_execid() {
  execid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Transaction_Report::execid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.ExecID)
  return _internal_execid();
}
inline void Transaction_Report::set_execid(const std::string& value) {
  _internal_set_execid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.ExecID)
}
inline std::string* Transaction_Report::mutable_execid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.ExecID)
  return _internal_mutable_execid();
}
inline const std::string& Transaction_Report::_internal_execid() const {
  return execid_.Get();
}
inline void Transaction_Report::_internal_set_execid(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_execid(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  execid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.ExecID)
}
inline void Transaction_Report::set_execid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.ExecID)
}
inline void Transaction_Report::set_execid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.ExecID)
}
inline std::string* Transaction_Report::_internal_mutable_execid() {
  _has_bits_[0] |= 0x00000400u;
  return execid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_execid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.ExecID)
  if (!_internal_has_execid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return execid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_execid(std::string* execid) {
  if (execid != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  execid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), execid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.ExecID)
}
inline std::string* Transaction_Report::unsafe_arena_release_execid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.ExecID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return execid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_execid(
    std::string* execid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (execid != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  execid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      execid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.ExecID)
}

// required string ExecType = 16;
inline bool Transaction_Report::_internal_has_exectype() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Transaction_Report::has_exectype() const {
  return _internal_has_exectype();
}
inline void Transaction_Report::clear_exectype() {
  exectype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Transaction_Report::exectype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.ExecType)
  return _internal_exectype();
}
inline void Transaction_Report::set_exectype(const std::string& value) {
  _internal_set_exectype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.ExecType)
}
inline std::string* Transaction_Report::mutable_exectype() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.ExecType)
  return _internal_mutable_exectype();
}
inline const std::string& Transaction_Report::_internal_exectype() const {
  return exectype_.Get();
}
inline void Transaction_Report::_internal_set_exectype(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  exectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_exectype(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  exectype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.ExecType)
}
inline void Transaction_Report::set_exectype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  exectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.ExecType)
}
inline void Transaction_Report::set_exectype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  exectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.ExecType)
}
inline std::string* Transaction_Report::_internal_mutable_exectype() {
  _has_bits_[0] |= 0x00000800u;
  return exectype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_exectype() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.ExecType)
  if (!_internal_has_exectype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return exectype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_exectype(std::string* exectype) {
  if (exectype != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  exectype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exectype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.ExecType)
}
inline std::string* Transaction_Report::unsafe_arena_release_exectype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.ExecType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return exectype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_exectype(
    std::string* exectype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exectype != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  exectype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exectype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.ExecType)
}

// required string OrdStatus = 17;
inline bool Transaction_Report::_internal_has_ordstatus() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Transaction_Report::has_ordstatus() const {
  return _internal_has_ordstatus();
}
inline void Transaction_Report::clear_ordstatus() {
  ordstatus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Transaction_Report::ordstatus() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.OrdStatus)
  return _internal_ordstatus();
}
inline void Transaction_Report::set_ordstatus(const std::string& value) {
  _internal_set_ordstatus(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.OrdStatus)
}
inline std::string* Transaction_Report::mutable_ordstatus() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.OrdStatus)
  return _internal_mutable_ordstatus();
}
inline const std::string& Transaction_Report::_internal_ordstatus() const {
  return ordstatus_.Get();
}
inline void Transaction_Report::_internal_set_ordstatus(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_ordstatus(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  ordstatus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.OrdStatus)
}
inline void Transaction_Report::set_ordstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.OrdStatus)
}
inline void Transaction_Report::set_ordstatus(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.OrdStatus)
}
inline std::string* Transaction_Report::_internal_mutable_ordstatus() {
  _has_bits_[0] |= 0x00001000u;
  return ordstatus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_ordstatus() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.OrdStatus)
  if (!_internal_has_ordstatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return ordstatus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_ordstatus(std::string* ordstatus) {
  if (ordstatus != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ordstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordstatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.OrdStatus)
}
inline std::string* Transaction_Report::unsafe_arena_release_ordstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.OrdStatus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return ordstatus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_ordstatus(
    std::string* ordstatus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordstatus != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ordstatus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordstatus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.OrdStatus)
}

// required float LastPx = 18;
inline bool Transaction_Report::_internal_has_lastpx() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Transaction_Report::has_lastpx() const {
  return _internal_has_lastpx();
}
inline void Transaction_Report::clear_lastpx() {
  lastpx_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float Transaction_Report::_internal_lastpx() const {
  return lastpx_;
}
inline float Transaction_Report::lastpx() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.LastPx)
  return _internal_lastpx();
}
inline void Transaction_Report::_internal_set_lastpx(float value) {
  _has_bits_[0] |= 0x00100000u;
  lastpx_ = value;
}
inline void Transaction_Report::set_lastpx(float value) {
  _internal_set_lastpx(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.LastPx)
}

// required int32 LastQty = 19;
inline bool Transaction_Report::_internal_has_lastqty() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Transaction_Report::has_lastqty() const {
  return _internal_has_lastqty();
}
inline void Transaction_Report::clear_lastqty() {
  lastqty_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Report::_internal_lastqty() const {
  return lastqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Report::lastqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.LastQty)
  return _internal_lastqty();
}
inline void Transaction_Report::_internal_set_lastqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  lastqty_ = value;
}
inline void Transaction_Report::set_lastqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.LastQty)
}

// required int32 LeavesQty = 20;
inline bool Transaction_Report::_internal_has_leavesqty() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Transaction_Report::has_leavesqty() const {
  return _internal_has_leavesqty();
}
inline void Transaction_Report::clear_leavesqty() {
  leavesqty_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Report::_internal_leavesqty() const {
  return leavesqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Report::leavesqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.LeavesQty)
  return _internal_leavesqty();
}
inline void Transaction_Report::_internal_set_leavesqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  leavesqty_ = value;
}
inline void Transaction_Report::set_leavesqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leavesqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.LeavesQty)
}

// required int32 CumQty = 21;
inline bool Transaction_Report::_internal_has_cumqty() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Transaction_Report::has_cumqty() const {
  return _internal_has_cumqty();
}
inline void Transaction_Report::clear_cumqty() {
  cumqty_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Report::_internal_cumqty() const {
  return cumqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Report::cumqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.CumQty)
  return _internal_cumqty();
}
inline void Transaction_Report::_internal_set_cumqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  cumqty_ = value;
}
inline void Transaction_Report::set_cumqty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cumqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.CumQty)
}

// required string Side = 22;
inline bool Transaction_Report::_internal_has_side() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Transaction_Report::has_side() const {
  return _internal_has_side();
}
inline void Transaction_Report::clear_side() {
  side_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Transaction_Report::side() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.Side)
  return _internal_side();
}
inline void Transaction_Report::set_side(const std::string& value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.Side)
}
inline std::string* Transaction_Report::mutable_side() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.Side)
  return _internal_mutable_side();
}
inline const std::string& Transaction_Report::_internal_side() const {
  return side_.Get();
}
inline void Transaction_Report::_internal_set_side(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_side(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  side_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.Side)
}
inline void Transaction_Report::set_side(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.Side)
}
inline void Transaction_Report::set_side(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.Side)
}
inline std::string* Transaction_Report::_internal_mutable_side() {
  _has_bits_[0] |= 0x00002000u;
  return side_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_side() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.Side)
  if (!_internal_has_side()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return side_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.Side)
}
inline std::string* Transaction_Report::unsafe_arena_release_side() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.Side)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00002000u;
  return side_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_side(
    std::string* side) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (side != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  side_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      side, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.Side)
}

// required string AccountID = 23;
inline bool Transaction_Report::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Transaction_Report::has_accountid() const {
  return _internal_has_accountid();
}
inline void Transaction_Report::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Transaction_Report::accountid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.AccountID)
  return _internal_accountid();
}
inline void Transaction_Report::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.AccountID)
}
inline std::string* Transaction_Report::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.AccountID)
  return _internal_mutable_accountid();
}
inline const std::string& Transaction_Report::_internal_accountid() const {
  return accountid_.Get();
}
inline void Transaction_Report::_internal_set_accountid(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_accountid(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.AccountID)
}
inline void Transaction_Report::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.AccountID)
}
inline void Transaction_Report::set_accountid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.AccountID)
}
inline std::string* Transaction_Report::_internal_mutable_accountid() {
  _has_bits_[0] |= 0x00004000u;
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_accountid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.AccountID)
  if (!_internal_has_accountid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return accountid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.AccountID)
}
inline std::string* Transaction_Report::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.AccountID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return accountid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_accountid(
    std::string* accountid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accountid != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  accountid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accountid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.AccountID)
}

// required string BranchID = 24;
inline bool Transaction_Report::_internal_has_branchid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Transaction_Report::has_branchid() const {
  return _internal_has_branchid();
}
inline void Transaction_Report::clear_branchid() {
  branchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& Transaction_Report::branchid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.BranchID)
  return _internal_branchid();
}
inline void Transaction_Report::set_branchid(const std::string& value) {
  _internal_set_branchid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Transaction_Report.BranchID)
}
inline std::string* Transaction_Report::mutable_branchid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.BranchID)
  return _internal_mutable_branchid();
}
inline const std::string& Transaction_Report::_internal_branchid() const {
  return branchid_.Get();
}
inline void Transaction_Report::_internal_set_branchid(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Report::set_branchid(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  branchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Transaction_Report.BranchID)
}
inline void Transaction_Report::set_branchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Transaction_Report.BranchID)
}
inline void Transaction_Report::set_branchid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00008000u;
  branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Transaction_Report.BranchID)
}
inline std::string* Transaction_Report::_internal_mutable_branchid() {
  _has_bits_[0] |= 0x00008000u;
  return branchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Report::release_branchid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.BranchID)
  if (!_internal_has_branchid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return branchid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Report::set_allocated_branchid(std::string* branchid) {
  if (branchid != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  branchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.BranchID)
}
inline std::string* Transaction_Report::unsafe_arena_release_branchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Transaction_Report.BranchID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00008000u;
  return branchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction_Report::unsafe_arena_set_allocated_branchid(
    std::string* branchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (branchid != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  branchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      branchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.BranchID)
}

// optional .GatewayProto.Extend_Fields ExtendFields = 25;
inline bool Transaction_Report::_internal_has_extendfields() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || extendfields_ != nullptr);
  return value;
}
inline bool Transaction_Report::has_extendfields() const {
  return _internal_has_extendfields();
}
inline void Transaction_Report::clear_extendfields() {
  if (extendfields_ != nullptr) extendfields_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::GatewayProto::Extend_Fields& Transaction_Report::_internal_extendfields() const {
  const ::GatewayProto::Extend_Fields* p = extendfields_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Extend_Fields*>(
      &::GatewayProto::_Extend_Fields_default_instance_);
}
inline const ::GatewayProto::Extend_Fields& Transaction_Report::extendfields() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Transaction_Report.ExtendFields)
  return _internal_extendfields();
}
inline void Transaction_Report::unsafe_arena_set_allocated_extendfields(
    ::GatewayProto::Extend_Fields* extendfields) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extendfields_);
  }
  extendfields_ = extendfields;
  if (extendfields) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Transaction_Report.ExtendFields)
}
inline ::GatewayProto::Extend_Fields* Transaction_Report::release_extendfields() {
  auto temp = unsafe_arena_release_extendfields();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Extend_Fields* Transaction_Report::unsafe_arena_release_extendfields() {
  // @@protoc_insertion_point(field_release:GatewayProto.Transaction_Report.ExtendFields)
  _has_bits_[0] &= ~0x00010000u;
  ::GatewayProto::Extend_Fields* temp = extendfields_;
  extendfields_ = nullptr;
  return temp;
}
inline ::GatewayProto::Extend_Fields* Transaction_Report::_internal_mutable_extendfields() {
  _has_bits_[0] |= 0x00010000u;
  if (extendfields_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Extend_Fields>(GetArena());
    extendfields_ = p;
  }
  return extendfields_;
}
inline ::GatewayProto::Extend_Fields* Transaction_Report::mutable_extendfields() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Transaction_Report.ExtendFields)
  return _internal_mutable_extendfields();
}
inline void Transaction_Report::set_allocated_extendfields(::GatewayProto::Extend_Fields* extendfields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extendfields_;
  }
  if (extendfields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extendfields);
    if (message_arena != submessage_arena) {
      extendfields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extendfields, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  extendfields_ = extendfields;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Transaction_Report.ExtendFields)
}

// -------------------------------------------------------------------

// Cancel_Order

// required string ApplID = 2;
inline bool Cancel_Order::_internal_has_applid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cancel_Order::has_applid() const {
  return _internal_has_applid();
}
inline void Cancel_Order::clear_applid() {
  applid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Cancel_Order::applid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.ApplID)
  return _internal_applid();
}
inline void Cancel_Order::set_applid(const std::string& value) {
  _internal_set_applid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.ApplID)
}
inline std::string* Cancel_Order::mutable_applid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.ApplID)
  return _internal_mutable_applid();
}
inline const std::string& Cancel_Order::_internal_applid() const {
  return applid_.Get();
}
inline void Cancel_Order::_internal_set_applid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_applid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.ApplID)
}
inline void Cancel_Order::set_applid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.ApplID)
}
inline void Cancel_Order::set_applid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.ApplID)
}
inline std::string* Cancel_Order::_internal_mutable_applid() {
  _has_bits_[0] |= 0x00000001u;
  return applid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_applid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.ApplID)
  if (!_internal_has_applid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return applid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_applid(std::string* applid) {
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.ApplID)
}
inline std::string* Cancel_Order::unsafe_arena_release_applid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.ApplID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return applid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_applid(
    std::string* applid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      applid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.ApplID)
}

// required string SubmittingPBUID = 3;
inline bool Cancel_Order::_internal_has_submittingpbuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Cancel_Order::has_submittingpbuid() const {
  return _internal_has_submittingpbuid();
}
inline void Cancel_Order::clear_submittingpbuid() {
  submittingpbuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Cancel_Order::submittingpbuid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.SubmittingPBUID)
  return _internal_submittingpbuid();
}
inline void Cancel_Order::set_submittingpbuid(const std::string& value) {
  _internal_set_submittingpbuid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.SubmittingPBUID)
}
inline std::string* Cancel_Order::mutable_submittingpbuid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.SubmittingPBUID)
  return _internal_mutable_submittingpbuid();
}
inline const std::string& Cancel_Order::_internal_submittingpbuid() const {
  return submittingpbuid_.Get();
}
inline void Cancel_Order::_internal_set_submittingpbuid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_submittingpbuid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  submittingpbuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.SubmittingPBUID)
}
inline void Cancel_Order::set_submittingpbuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.SubmittingPBUID)
}
inline void Cancel_Order::set_submittingpbuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.SubmittingPBUID)
}
inline std::string* Cancel_Order::_internal_mutable_submittingpbuid() {
  _has_bits_[0] |= 0x00000002u;
  return submittingpbuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_submittingpbuid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.SubmittingPBUID)
  if (!_internal_has_submittingpbuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return submittingpbuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_submittingpbuid(std::string* submittingpbuid) {
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  submittingpbuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submittingpbuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.SubmittingPBUID)
}
inline std::string* Cancel_Order::unsafe_arena_release_submittingpbuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.SubmittingPBUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return submittingpbuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_submittingpbuid(
    std::string* submittingpbuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  submittingpbuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      submittingpbuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.SubmittingPBUID)
}

// required string SecurityID = 4;
inline bool Cancel_Order::_internal_has_securityid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Cancel_Order::has_securityid() const {
  return _internal_has_securityid();
}
inline void Cancel_Order::clear_securityid() {
  securityid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Cancel_Order::securityid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.SecurityID)
  return _internal_securityid();
}
inline void Cancel_Order::set_securityid(const std::string& value) {
  _internal_set_securityid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.SecurityID)
}
inline std::string* Cancel_Order::mutable_securityid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.SecurityID)
  return _internal_mutable_securityid();
}
inline const std::string& Cancel_Order::_internal_securityid() const {
  return securityid_.Get();
}
inline void Cancel_Order::_internal_set_securityid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_securityid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  securityid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.SecurityID)
}
inline void Cancel_Order::set_securityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.SecurityID)
}
inline void Cancel_Order::set_securityid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.SecurityID)
}
inline std::string* Cancel_Order::_internal_mutable_securityid() {
  _has_bits_[0] |= 0x00000004u;
  return securityid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_securityid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.SecurityID)
  if (!_internal_has_securityid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return securityid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  securityid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.SecurityID)
}
inline std::string* Cancel_Order::unsafe_arena_release_securityid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.SecurityID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return securityid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_securityid(
    std::string* securityid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  securityid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.SecurityID)
}

// required string SecurityIDSource = 5;
inline bool Cancel_Order::_internal_has_securityidsource() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Cancel_Order::has_securityidsource() const {
  return _internal_has_securityidsource();
}
inline void Cancel_Order::clear_securityidsource() {
  securityidsource_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Cancel_Order::securityidsource() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.SecurityIDSource)
  return _internal_securityidsource();
}
inline void Cancel_Order::set_securityidsource(const std::string& value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.SecurityIDSource)
}
inline std::string* Cancel_Order::mutable_securityidsource() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.SecurityIDSource)
  return _internal_mutable_securityidsource();
}
inline const std::string& Cancel_Order::_internal_securityidsource() const {
  return securityidsource_.Get();
}
inline void Cancel_Order::_internal_set_securityidsource(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_securityidsource(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  securityidsource_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.SecurityIDSource)
}
inline void Cancel_Order::set_securityidsource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.SecurityIDSource)
}
inline void Cancel_Order::set_securityidsource(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.SecurityIDSource)
}
inline std::string* Cancel_Order::_internal_mutable_securityidsource() {
  _has_bits_[0] |= 0x00000008u;
  return securityidsource_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_securityidsource() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.SecurityIDSource)
  if (!_internal_has_securityidsource()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return securityidsource_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_securityidsource(std::string* securityidsource) {
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityidsource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityidsource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.SecurityIDSource)
}
inline std::string* Cancel_Order::unsafe_arena_release_securityidsource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.SecurityIDSource)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return securityidsource_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_securityidsource(
    std::string* securityidsource) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityidsource_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityidsource, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.SecurityIDSource)
}

// required uint32 OwnerType = 6;
inline bool Cancel_Order::_internal_has_ownertype() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Cancel_Order::has_ownertype() const {
  return _internal_has_ownertype();
}
inline void Cancel_Order::clear_ownertype() {
  ownertype_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order::_internal_ownertype() const {
  return ownertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order::ownertype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.OwnerType)
  return _internal_ownertype();
}
inline void Cancel_Order::_internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  ownertype_ = value;
}
inline void Cancel_Order::set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ownertype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.OwnerType)
}

// required string ClearingFirm = 7;
inline bool Cancel_Order::_internal_has_clearingfirm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Cancel_Order::has_clearingfirm() const {
  return _internal_has_clearingfirm();
}
inline void Cancel_Order::clear_clearingfirm() {
  clearingfirm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Cancel_Order::clearingfirm() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.ClearingFirm)
  return _internal_clearingfirm();
}
inline void Cancel_Order::set_clearingfirm(const std::string& value) {
  _internal_set_clearingfirm(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.ClearingFirm)
}
inline std::string* Cancel_Order::mutable_clearingfirm() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.ClearingFirm)
  return _internal_mutable_clearingfirm();
}
inline const std::string& Cancel_Order::_internal_clearingfirm() const {
  return clearingfirm_.Get();
}
inline void Cancel_Order::_internal_set_clearingfirm(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_clearingfirm(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  clearingfirm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.ClearingFirm)
}
inline void Cancel_Order::set_clearingfirm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.ClearingFirm)
}
inline void Cancel_Order::set_clearingfirm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.ClearingFirm)
}
inline std::string* Cancel_Order::_internal_mutable_clearingfirm() {
  _has_bits_[0] |= 0x00000010u;
  return clearingfirm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_clearingfirm() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.ClearingFirm)
  if (!_internal_has_clearingfirm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return clearingfirm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_clearingfirm(std::string* clearingfirm) {
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  clearingfirm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearingfirm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.ClearingFirm)
}
inline std::string* Cancel_Order::unsafe_arena_release_clearingfirm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.ClearingFirm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return clearingfirm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_clearingfirm(
    std::string* clearingfirm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  clearingfirm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clearingfirm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.ClearingFirm)
}

// required string TransactTime = 8;
inline bool Cancel_Order::_internal_has_transacttime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Cancel_Order::has_transacttime() const {
  return _internal_has_transacttime();
}
inline void Cancel_Order::clear_transacttime() {
  transacttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Cancel_Order::transacttime() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.TransactTime)
  return _internal_transacttime();
}
inline void Cancel_Order::set_transacttime(const std::string& value) {
  _internal_set_transacttime(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.TransactTime)
}
inline std::string* Cancel_Order::mutable_transacttime() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.TransactTime)
  return _internal_mutable_transacttime();
}
inline const std::string& Cancel_Order::_internal_transacttime() const {
  return transacttime_.Get();
}
inline void Cancel_Order::_internal_set_transacttime(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_transacttime(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  transacttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.TransactTime)
}
inline void Cancel_Order::set_transacttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.TransactTime)
}
inline void Cancel_Order::set_transacttime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.TransactTime)
}
inline std::string* Cancel_Order::_internal_mutable_transacttime() {
  _has_bits_[0] |= 0x00000020u;
  return transacttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_transacttime() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.TransactTime)
  if (!_internal_has_transacttime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return transacttime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  transacttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transacttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.TransactTime)
}
inline std::string* Cancel_Order::unsafe_arena_release_transacttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.TransactTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return transacttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_transacttime(
    std::string* transacttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  transacttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transacttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.TransactTime)
}

// required string UserInfo = 9;
inline bool Cancel_Order::_internal_has_userinfo() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Cancel_Order::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void Cancel_Order::clear_userinfo() {
  userinfo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Cancel_Order::userinfo() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.UserInfo)
  return _internal_userinfo();
}
inline void Cancel_Order::set_userinfo(const std::string& value) {
  _internal_set_userinfo(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.UserInfo)
}
inline std::string* Cancel_Order::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.UserInfo)
  return _internal_mutable_userinfo();
}
inline const std::string& Cancel_Order::_internal_userinfo() const {
  return userinfo_.Get();
}
inline void Cancel_Order::_internal_set_userinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_userinfo(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  userinfo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.UserInfo)
}
inline void Cancel_Order::set_userinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.UserInfo)
}
inline void Cancel_Order::set_userinfo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.UserInfo)
}
inline std::string* Cancel_Order::_internal_mutable_userinfo() {
  _has_bits_[0] |= 0x00000040u;
  return userinfo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_userinfo() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.UserInfo)
  if (!_internal_has_userinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return userinfo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_userinfo(std::string* userinfo) {
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  userinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userinfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.UserInfo)
}
inline std::string* Cancel_Order::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.UserInfo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return userinfo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_userinfo(
    std::string* userinfo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  userinfo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userinfo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.UserInfo)
}

// required string ClOrdID = 10;
inline bool Cancel_Order::_internal_has_clordid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Cancel_Order::has_clordid() const {
  return _internal_has_clordid();
}
inline void Cancel_Order::clear_clordid() {
  clordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Cancel_Order::clordid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.ClOrdID)
  return _internal_clordid();
}
inline void Cancel_Order::set_clordid(const std::string& value) {
  _internal_set_clordid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.ClOrdID)
}
inline std::string* Cancel_Order::mutable_clordid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.ClOrdID)
  return _internal_mutable_clordid();
}
inline const std::string& Cancel_Order::_internal_clordid() const {
  return clordid_.Get();
}
inline void Cancel_Order::_internal_set_clordid(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_clordid(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  clordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.ClOrdID)
}
inline void Cancel_Order::set_clordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.ClOrdID)
}
inline void Cancel_Order::set_clordid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.ClOrdID)
}
inline std::string* Cancel_Order::_internal_mutable_clordid() {
  _has_bits_[0] |= 0x00000080u;
  return clordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_clordid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.ClOrdID)
  if (!_internal_has_clordid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return clordid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_clordid(std::string* clordid) {
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  clordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.ClOrdID)
}
inline std::string* Cancel_Order::unsafe_arena_release_clordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.ClOrdID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return clordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_clordid(
    std::string* clordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  clordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.ClOrdID)
}

// required string OrigClOrdID = 11;
inline bool Cancel_Order::_internal_has_origclordid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Cancel_Order::has_origclordid() const {
  return _internal_has_origclordid();
}
inline void Cancel_Order::clear_origclordid() {
  origclordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Cancel_Order::origclordid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.OrigClOrdID)
  return _internal_origclordid();
}
inline void Cancel_Order::set_origclordid(const std::string& value) {
  _internal_set_origclordid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.OrigClOrdID)
}
inline std::string* Cancel_Order::mutable_origclordid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.OrigClOrdID)
  return _internal_mutable_origclordid();
}
inline const std::string& Cancel_Order::_internal_origclordid() const {
  return origclordid_.Get();
}
inline void Cancel_Order::_internal_set_origclordid(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_origclordid(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  origclordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.OrigClOrdID)
}
inline void Cancel_Order::set_origclordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.OrigClOrdID)
}
inline void Cancel_Order::set_origclordid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.OrigClOrdID)
}
inline std::string* Cancel_Order::_internal_mutable_origclordid() {
  _has_bits_[0] |= 0x00000100u;
  return origclordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_origclordid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.OrigClOrdID)
  if (!_internal_has_origclordid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return origclordid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_origclordid(std::string* origclordid) {
  if (origclordid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  origclordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origclordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.OrigClOrdID)
}
inline std::string* Cancel_Order::unsafe_arena_release_origclordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.OrigClOrdID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return origclordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_origclordid(
    std::string* origclordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (origclordid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  origclordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      origclordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.OrigClOrdID)
}

// required string Side = 12;
inline bool Cancel_Order::_internal_has_side() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Cancel_Order::has_side() const {
  return _internal_has_side();
}
inline void Cancel_Order::clear_side() {
  side_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Cancel_Order::side() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.Side)
  return _internal_side();
}
inline void Cancel_Order::set_side(const std::string& value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.Side)
}
inline std::string* Cancel_Order::mutable_side() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.Side)
  return _internal_mutable_side();
}
inline const std::string& Cancel_Order::_internal_side() const {
  return side_.Get();
}
inline void Cancel_Order::_internal_set_side(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_side(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  side_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.Side)
}
inline void Cancel_Order::set_side(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.Side)
}
inline void Cancel_Order::set_side(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.Side)
}
inline std::string* Cancel_Order::_internal_mutable_side() {
  _has_bits_[0] |= 0x00000200u;
  return side_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_side() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.Side)
  if (!_internal_has_side()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return side_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.Side)
}
inline std::string* Cancel_Order::unsafe_arena_release_side() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.Side)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return side_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_side(
    std::string* side) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (side != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  side_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      side, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.Side)
}

// required string OrderID = 13;
inline bool Cancel_Order::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Cancel_Order::has_orderid() const {
  return _internal_has_orderid();
}
inline void Cancel_Order::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Cancel_Order::orderid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.OrderID)
  return _internal_orderid();
}
inline void Cancel_Order::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.OrderID)
}
inline std::string* Cancel_Order::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order.OrderID)
  return _internal_mutable_orderid();
}
inline const std::string& Cancel_Order::_internal_orderid() const {
  return orderid_.Get();
}
inline void Cancel_Order::_internal_set_orderid(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order::set_orderid(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order.OrderID)
}
inline void Cancel_Order::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order.OrderID)
}
inline void Cancel_Order::set_orderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order.OrderID)
}
inline std::string* Cancel_Order::_internal_mutable_orderid() {
  _has_bits_[0] |= 0x00000400u;
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order::release_orderid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order.OrderID)
  if (!_internal_has_orderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return orderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order.OrderID)
}
inline std::string* Cancel_Order::unsafe_arena_release_orderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order.OrderID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return orderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order::unsafe_arena_set_allocated_orderid(
    std::string* orderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (orderid != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  orderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order.OrderID)
}

// required uint32 OrderQty = 14;
inline bool Cancel_Order::_internal_has_orderqty() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Cancel_Order::has_orderqty() const {
  return _internal_has_orderqty();
}
inline void Cancel_Order::clear_orderqty() {
  orderqty_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order::_internal_orderqty() const {
  return orderqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order::orderqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order.OrderQty)
  return _internal_orderqty();
}
inline void Cancel_Order::_internal_set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  orderqty_ = value;
}
inline void Cancel_Order::set_orderqty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_orderqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order.OrderQty)
}

// -------------------------------------------------------------------

// Cancel_Order_Fail

// required int32 PartitionNo = 2;
inline bool Cancel_Order_Fail::_internal_has_partitionno() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_partitionno() const {
  return _internal_has_partitionno();
}
inline void Cancel_Order_Fail::clear_partitionno() {
  partitionno_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cancel_Order_Fail::_internal_partitionno() const {
  return partitionno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Cancel_Order_Fail::partitionno() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.PartitionNo)
  return _internal_partitionno();
}
inline void Cancel_Order_Fail::_internal_set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  partitionno_ = value;
}
inline void Cancel_Order_Fail::set_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partitionno(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.PartitionNo)
}

// required uint32 ReportIndex = 3;
inline bool Cancel_Order_Fail::_internal_has_reportindex() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_reportindex() const {
  return _internal_has_reportindex();
}
inline void Cancel_Order_Fail::clear_reportindex() {
  reportindex_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order_Fail::_internal_reportindex() const {
  return reportindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order_Fail::reportindex() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.ReportIndex)
  return _internal_reportindex();
}
inline void Cancel_Order_Fail::_internal_set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  reportindex_ = value;
}
inline void Cancel_Order_Fail::set_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reportindex(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.ReportIndex)
}

// required string ApplID = 4;
inline bool Cancel_Order_Fail::_internal_has_applid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_applid() const {
  return _internal_has_applid();
}
inline void Cancel_Order_Fail::clear_applid() {
  applid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Cancel_Order_Fail::applid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.ApplID)
  return _internal_applid();
}
inline void Cancel_Order_Fail::set_applid(const std::string& value) {
  _internal_set_applid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.ApplID)
}
inline std::string* Cancel_Order_Fail::mutable_applid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.ApplID)
  return _internal_mutable_applid();
}
inline const std::string& Cancel_Order_Fail::_internal_applid() const {
  return applid_.Get();
}
inline void Cancel_Order_Fail::_internal_set_applid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_applid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.ApplID)
}
inline void Cancel_Order_Fail::set_applid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.ApplID)
}
inline void Cancel_Order_Fail::set_applid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.ApplID)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_applid() {
  _has_bits_[0] |= 0x00000001u;
  return applid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_applid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.ApplID)
  if (!_internal_has_applid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return applid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_applid(std::string* applid) {
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.ApplID)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_applid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.ApplID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return applid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_applid(
    std::string* applid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (applid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      applid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.ApplID)
}

// required string ReportingPBUID = 5;
inline bool Cancel_Order_Fail::_internal_has_reportingpbuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_reportingpbuid() const {
  return _internal_has_reportingpbuid();
}
inline void Cancel_Order_Fail::clear_reportingpbuid() {
  reportingpbuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Cancel_Order_Fail::reportingpbuid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
  return _internal_reportingpbuid();
}
inline void Cancel_Order_Fail::set_reportingpbuid(const std::string& value) {
  _internal_set_reportingpbuid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
}
inline std::string* Cancel_Order_Fail::mutable_reportingpbuid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
  return _internal_mutable_reportingpbuid();
}
inline const std::string& Cancel_Order_Fail::_internal_reportingpbuid() const {
  return reportingpbuid_.Get();
}
inline void Cancel_Order_Fail::_internal_set_reportingpbuid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_reportingpbuid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
}
inline void Cancel_Order_Fail::set_reportingpbuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
}
inline void Cancel_Order_Fail::set_reportingpbuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_reportingpbuid() {
  _has_bits_[0] |= 0x00000002u;
  return reportingpbuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_reportingpbuid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
  if (!_internal_has_reportingpbuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return reportingpbuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_reportingpbuid(std::string* reportingpbuid) {
  if (reportingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reportingpbuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reportingpbuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_reportingpbuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return reportingpbuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_reportingpbuid(
    std::string* reportingpbuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reportingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reportingpbuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reportingpbuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.ReportingPBUID)
}

// required string SubmittingPBUID = 6;
inline bool Cancel_Order_Fail::_internal_has_submittingpbuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_submittingpbuid() const {
  return _internal_has_submittingpbuid();
}
inline void Cancel_Order_Fail::clear_submittingpbuid() {
  submittingpbuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Cancel_Order_Fail::submittingpbuid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
  return _internal_submittingpbuid();
}
inline void Cancel_Order_Fail::set_submittingpbuid(const std::string& value) {
  _internal_set_submittingpbuid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
}
inline std::string* Cancel_Order_Fail::mutable_submittingpbuid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
  return _internal_mutable_submittingpbuid();
}
inline const std::string& Cancel_Order_Fail::_internal_submittingpbuid() const {
  return submittingpbuid_.Get();
}
inline void Cancel_Order_Fail::_internal_set_submittingpbuid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_submittingpbuid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
}
inline void Cancel_Order_Fail::set_submittingpbuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
}
inline void Cancel_Order_Fail::set_submittingpbuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_submittingpbuid() {
  _has_bits_[0] |= 0x00000004u;
  return submittingpbuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_submittingpbuid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
  if (!_internal_has_submittingpbuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return submittingpbuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_submittingpbuid(std::string* submittingpbuid) {
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  submittingpbuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submittingpbuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_submittingpbuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return submittingpbuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_submittingpbuid(
    std::string* submittingpbuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (submittingpbuid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  submittingpbuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      submittingpbuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.SubmittingPBUID)
}

// required string SecurityID = 7;
inline bool Cancel_Order_Fail::_internal_has_securityid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_securityid() const {
  return _internal_has_securityid();
}
inline void Cancel_Order_Fail::clear_securityid() {
  securityid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Cancel_Order_Fail::securityid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.SecurityID)
  return _internal_securityid();
}
inline void Cancel_Order_Fail::set_securityid(const std::string& value) {
  _internal_set_securityid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.SecurityID)
}
inline std::string* Cancel_Order_Fail::mutable_securityid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.SecurityID)
  return _internal_mutable_securityid();
}
inline const std::string& Cancel_Order_Fail::_internal_securityid() const {
  return securityid_.Get();
}
inline void Cancel_Order_Fail::_internal_set_securityid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_securityid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.SecurityID)
}
inline void Cancel_Order_Fail::set_securityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.SecurityID)
}
inline void Cancel_Order_Fail::set_securityid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.SecurityID)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_securityid() {
  _has_bits_[0] |= 0x00000008u;
  return securityid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_securityid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.SecurityID)
  if (!_internal_has_securityid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return securityid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.SecurityID)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_securityid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.SecurityID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return securityid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_securityid(
    std::string* securityid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  securityid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.SecurityID)
}

// required string SecurityIDSource = 8;
inline bool Cancel_Order_Fail::_internal_has_securityidsource() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_securityidsource() const {
  return _internal_has_securityidsource();
}
inline void Cancel_Order_Fail::clear_securityidsource() {
  securityidsource_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Cancel_Order_Fail::securityidsource() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
  return _internal_securityidsource();
}
inline void Cancel_Order_Fail::set_securityidsource(const std::string& value) {
  _internal_set_securityidsource(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
}
inline std::string* Cancel_Order_Fail::mutable_securityidsource() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
  return _internal_mutable_securityidsource();
}
inline const std::string& Cancel_Order_Fail::_internal_securityidsource() const {
  return securityidsource_.Get();
}
inline void Cancel_Order_Fail::_internal_set_securityidsource(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_securityidsource(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
}
inline void Cancel_Order_Fail::set_securityidsource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
}
inline void Cancel_Order_Fail::set_securityidsource(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_securityidsource() {
  _has_bits_[0] |= 0x00000010u;
  return securityidsource_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_securityidsource() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
  if (!_internal_has_securityidsource()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return securityidsource_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_securityidsource(std::string* securityidsource) {
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  securityidsource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityidsource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_securityidsource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return securityidsource_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_securityidsource(
    std::string* securityidsource) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (securityidsource != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  securityidsource_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      securityidsource, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.SecurityIDSource)
}

// required uint32 OwnerType = 9;
inline bool Cancel_Order_Fail::_internal_has_ownertype() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_ownertype() const {
  return _internal_has_ownertype();
}
inline void Cancel_Order_Fail::clear_ownertype() {
  ownertype_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order_Fail::_internal_ownertype() const {
  return ownertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order_Fail::ownertype() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.OwnerType)
  return _internal_ownertype();
}
inline void Cancel_Order_Fail::_internal_set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  ownertype_ = value;
}
inline void Cancel_Order_Fail::set_ownertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ownertype(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.OwnerType)
}

// required string ClearingFirm = 10;
inline bool Cancel_Order_Fail::_internal_has_clearingfirm() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_clearingfirm() const {
  return _internal_has_clearingfirm();
}
inline void Cancel_Order_Fail::clear_clearingfirm() {
  clearingfirm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Cancel_Order_Fail::clearingfirm() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.ClearingFirm)
  return _internal_clearingfirm();
}
inline void Cancel_Order_Fail::set_clearingfirm(const std::string& value) {
  _internal_set_clearingfirm(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.ClearingFirm)
}
inline std::string* Cancel_Order_Fail::mutable_clearingfirm() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.ClearingFirm)
  return _internal_mutable_clearingfirm();
}
inline const std::string& Cancel_Order_Fail::_internal_clearingfirm() const {
  return clearingfirm_.Get();
}
inline void Cancel_Order_Fail::_internal_set_clearingfirm(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_clearingfirm(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.ClearingFirm)
}
inline void Cancel_Order_Fail::set_clearingfirm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.ClearingFirm)
}
inline void Cancel_Order_Fail::set_clearingfirm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.ClearingFirm)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_clearingfirm() {
  _has_bits_[0] |= 0x00000020u;
  return clearingfirm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_clearingfirm() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.ClearingFirm)
  if (!_internal_has_clearingfirm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return clearingfirm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_clearingfirm(std::string* clearingfirm) {
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  clearingfirm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearingfirm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.ClearingFirm)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_clearingfirm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.ClearingFirm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return clearingfirm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_clearingfirm(
    std::string* clearingfirm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clearingfirm != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  clearingfirm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clearingfirm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.ClearingFirm)
}

// required string TransactTime = 11;
inline bool Cancel_Order_Fail::_internal_has_transacttime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_transacttime() const {
  return _internal_has_transacttime();
}
inline void Cancel_Order_Fail::clear_transacttime() {
  transacttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Cancel_Order_Fail::transacttime() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.TransactTime)
  return _internal_transacttime();
}
inline void Cancel_Order_Fail::set_transacttime(const std::string& value) {
  _internal_set_transacttime(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.TransactTime)
}
inline std::string* Cancel_Order_Fail::mutable_transacttime() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.TransactTime)
  return _internal_mutable_transacttime();
}
inline const std::string& Cancel_Order_Fail::_internal_transacttime() const {
  return transacttime_.Get();
}
inline void Cancel_Order_Fail::_internal_set_transacttime(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_transacttime(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.TransactTime)
}
inline void Cancel_Order_Fail::set_transacttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.TransactTime)
}
inline void Cancel_Order_Fail::set_transacttime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.TransactTime)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_transacttime() {
  _has_bits_[0] |= 0x00000040u;
  return transacttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_transacttime() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.TransactTime)
  if (!_internal_has_transacttime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return transacttime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  transacttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transacttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.TransactTime)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_transacttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.TransactTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return transacttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_transacttime(
    std::string* transacttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transacttime != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  transacttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transacttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.TransactTime)
}

// required string UserInfo = 12;
inline bool Cancel_Order_Fail::_internal_has_userinfo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void Cancel_Order_Fail::clear_userinfo() {
  userinfo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Cancel_Order_Fail::userinfo() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.UserInfo)
  return _internal_userinfo();
}
inline void Cancel_Order_Fail::set_userinfo(const std::string& value) {
  _internal_set_userinfo(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.UserInfo)
}
inline std::string* Cancel_Order_Fail::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.UserInfo)
  return _internal_mutable_userinfo();
}
inline const std::string& Cancel_Order_Fail::_internal_userinfo() const {
  return userinfo_.Get();
}
inline void Cancel_Order_Fail::_internal_set_userinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_userinfo(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.UserInfo)
}
inline void Cancel_Order_Fail::set_userinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.UserInfo)
}
inline void Cancel_Order_Fail::set_userinfo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.UserInfo)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_userinfo() {
  _has_bits_[0] |= 0x00000080u;
  return userinfo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_userinfo() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.UserInfo)
  if (!_internal_has_userinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return userinfo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_userinfo(std::string* userinfo) {
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  userinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userinfo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.UserInfo)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.UserInfo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return userinfo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_userinfo(
    std::string* userinfo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  userinfo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userinfo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.UserInfo)
}

// required string ClOrdID = 13;
inline bool Cancel_Order_Fail::_internal_has_clordid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_clordid() const {
  return _internal_has_clordid();
}
inline void Cancel_Order_Fail::clear_clordid() {
  clordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Cancel_Order_Fail::clordid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.ClOrdID)
  return _internal_clordid();
}
inline void Cancel_Order_Fail::set_clordid(const std::string& value) {
  _internal_set_clordid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.ClOrdID)
}
inline std::string* Cancel_Order_Fail::mutable_clordid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.ClOrdID)
  return _internal_mutable_clordid();
}
inline const std::string& Cancel_Order_Fail::_internal_clordid() const {
  return clordid_.Get();
}
inline void Cancel_Order_Fail::_internal_set_clordid(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_clordid(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  clordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.ClOrdID)
}
inline void Cancel_Order_Fail::set_clordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.ClOrdID)
}
inline void Cancel_Order_Fail::set_clordid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.ClOrdID)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_clordid() {
  _has_bits_[0] |= 0x00000100u;
  return clordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_clordid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.ClOrdID)
  if (!_internal_has_clordid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return clordid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_clordid(std::string* clordid) {
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  clordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.ClOrdID)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_clordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.ClOrdID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return clordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_clordid(
    std::string* clordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clordid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  clordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.ClOrdID)
}

// required string ExecID = 14;
inline bool Cancel_Order_Fail::_internal_has_execid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_execid() const {
  return _internal_has_execid();
}
inline void Cancel_Order_Fail::clear_execid() {
  execid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Cancel_Order_Fail::execid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.ExecID)
  return _internal_execid();
}
inline void Cancel_Order_Fail::set_execid(const std::string& value) {
  _internal_set_execid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.ExecID)
}
inline std::string* Cancel_Order_Fail::mutable_execid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.ExecID)
  return _internal_mutable_execid();
}
inline const std::string& Cancel_Order_Fail::_internal_execid() const {
  return execid_.Get();
}
inline void Cancel_Order_Fail::_internal_set_execid(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_execid(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  execid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.ExecID)
}
inline void Cancel_Order_Fail::set_execid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.ExecID)
}
inline void Cancel_Order_Fail::set_execid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.ExecID)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_execid() {
  _has_bits_[0] |= 0x00000200u;
  return execid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_execid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.ExecID)
  if (!_internal_has_execid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return execid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_execid(std::string* execid) {
  if (execid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  execid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), execid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.ExecID)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_execid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.ExecID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return execid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_execid(
    std::string* execid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (execid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  execid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      execid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.ExecID)
}

// required string OrigClOrdID = 15;
inline bool Cancel_Order_Fail::_internal_has_origclordid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_origclordid() const {
  return _internal_has_origclordid();
}
inline void Cancel_Order_Fail::clear_origclordid() {
  origclordid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Cancel_Order_Fail::origclordid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
  return _internal_origclordid();
}
inline void Cancel_Order_Fail::set_origclordid(const std::string& value) {
  _internal_set_origclordid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
}
inline std::string* Cancel_Order_Fail::mutable_origclordid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
  return _internal_mutable_origclordid();
}
inline const std::string& Cancel_Order_Fail::_internal_origclordid() const {
  return origclordid_.Get();
}
inline void Cancel_Order_Fail::_internal_set_origclordid(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_origclordid(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  origclordid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
}
inline void Cancel_Order_Fail::set_origclordid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
}
inline void Cancel_Order_Fail::set_origclordid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_origclordid() {
  _has_bits_[0] |= 0x00000400u;
  return origclordid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_origclordid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
  if (!_internal_has_origclordid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return origclordid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_origclordid(std::string* origclordid) {
  if (origclordid != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  origclordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origclordid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_origclordid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return origclordid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_origclordid(
    std::string* origclordid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (origclordid != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  origclordid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      origclordid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.OrigClOrdID)
}

// required string Side = 16;
inline bool Cancel_Order_Fail::_internal_has_side() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_side() const {
  return _internal_has_side();
}
inline void Cancel_Order_Fail::clear_side() {
  side_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Cancel_Order_Fail::side() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.Side)
  return _internal_side();
}
inline void Cancel_Order_Fail::set_side(const std::string& value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.Side)
}
inline std::string* Cancel_Order_Fail::mutable_side() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.Side)
  return _internal_mutable_side();
}
inline const std::string& Cancel_Order_Fail::_internal_side() const {
  return side_.Get();
}
inline void Cancel_Order_Fail::_internal_set_side(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_side(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  side_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.Side)
}
inline void Cancel_Order_Fail::set_side(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.Side)
}
inline void Cancel_Order_Fail::set_side(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.Side)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_side() {
  _has_bits_[0] |= 0x00000800u;
  return side_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_side() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.Side)
  if (!_internal_has_side()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return side_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.Side)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_side() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.Side)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return side_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_side(
    std::string* side) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (side != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  side_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      side, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.Side)
}

// required string OrdStatus = 17;
inline bool Cancel_Order_Fail::_internal_has_ordstatus() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_ordstatus() const {
  return _internal_has_ordstatus();
}
inline void Cancel_Order_Fail::clear_ordstatus() {
  ordstatus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Cancel_Order_Fail::ordstatus() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.OrdStatus)
  return _internal_ordstatus();
}
inline void Cancel_Order_Fail::set_ordstatus(const std::string& value) {
  _internal_set_ordstatus(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.OrdStatus)
}
inline std::string* Cancel_Order_Fail::mutable_ordstatus() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.OrdStatus)
  return _internal_mutable_ordstatus();
}
inline const std::string& Cancel_Order_Fail::_internal_ordstatus() const {
  return ordstatus_.Get();
}
inline void Cancel_Order_Fail::_internal_set_ordstatus(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_ordstatus(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  ordstatus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.OrdStatus)
}
inline void Cancel_Order_Fail::set_ordstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.OrdStatus)
}
inline void Cancel_Order_Fail::set_ordstatus(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.OrdStatus)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_ordstatus() {
  _has_bits_[0] |= 0x00001000u;
  return ordstatus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_ordstatus() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.OrdStatus)
  if (!_internal_has_ordstatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return ordstatus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_ordstatus(std::string* ordstatus) {
  if (ordstatus != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ordstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordstatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.OrdStatus)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_ordstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.OrdStatus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return ordstatus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_ordstatus(
    std::string* ordstatus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordstatus != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ordstatus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordstatus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.OrdStatus)
}

// required uint32 CxlRejReason = 18;
inline bool Cancel_Order_Fail::_internal_has_cxlrejreason() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_cxlrejreason() const {
  return _internal_has_cxlrejreason();
}
inline void Cancel_Order_Fail::clear_cxlrejreason() {
  cxlrejreason_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order_Fail::_internal_cxlrejreason() const {
  return cxlrejreason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cancel_Order_Fail::cxlrejreason() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.CxlRejReason)
  return _internal_cxlrejreason();
}
inline void Cancel_Order_Fail::_internal_set_cxlrejreason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  cxlrejreason_ = value;
}
inline void Cancel_Order_Fail::set_cxlrejreason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cxlrejreason(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.CxlRejReason)
}

// required string RejectText = 19;
inline bool Cancel_Order_Fail::_internal_has_rejecttext() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_rejecttext() const {
  return _internal_has_rejecttext();
}
inline void Cancel_Order_Fail::clear_rejecttext() {
  rejecttext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Cancel_Order_Fail::rejecttext() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.RejectText)
  return _internal_rejecttext();
}
inline void Cancel_Order_Fail::set_rejecttext(const std::string& value) {
  _internal_set_rejecttext(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.RejectText)
}
inline std::string* Cancel_Order_Fail::mutable_rejecttext() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.RejectText)
  return _internal_mutable_rejecttext();
}
inline const std::string& Cancel_Order_Fail::_internal_rejecttext() const {
  return rejecttext_.Get();
}
inline void Cancel_Order_Fail::_internal_set_rejecttext(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  rejecttext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_rejecttext(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  rejecttext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.RejectText)
}
inline void Cancel_Order_Fail::set_rejecttext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  rejecttext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.RejectText)
}
inline void Cancel_Order_Fail::set_rejecttext(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  rejecttext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.RejectText)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_rejecttext() {
  _has_bits_[0] |= 0x00002000u;
  return rejecttext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_rejecttext() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.RejectText)
  if (!_internal_has_rejecttext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return rejecttext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_rejecttext(std::string* rejecttext) {
  if (rejecttext != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  rejecttext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rejecttext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.RejectText)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_rejecttext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.RejectText)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00002000u;
  return rejecttext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_rejecttext(
    std::string* rejecttext) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rejecttext != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  rejecttext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rejecttext, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.RejectText)
}

// required string OrderID = 20;
inline bool Cancel_Order_Fail::_internal_has_orderid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Cancel_Order_Fail::has_orderid() const {
  return _internal_has_orderid();
}
inline void Cancel_Order_Fail::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Cancel_Order_Fail::orderid() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Cancel_Order_Fail.OrderID)
  return _internal_orderid();
}
inline void Cancel_Order_Fail::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Cancel_Order_Fail.OrderID)
}
inline std::string* Cancel_Order_Fail::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Cancel_Order_Fail.OrderID)
  return _internal_mutable_orderid();
}
inline const std::string& Cancel_Order_Fail::_internal_orderid() const {
  return orderid_.Get();
}
inline void Cancel_Order_Fail::_internal_set_orderid(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cancel_Order_Fail::set_orderid(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Cancel_Order_Fail.OrderID)
}
inline void Cancel_Order_Fail::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Cancel_Order_Fail.OrderID)
}
inline void Cancel_Order_Fail::set_orderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Cancel_Order_Fail.OrderID)
}
inline std::string* Cancel_Order_Fail::_internal_mutable_orderid() {
  _has_bits_[0] |= 0x00004000u;
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cancel_Order_Fail::release_orderid() {
  // @@protoc_insertion_point(field_release:GatewayProto.Cancel_Order_Fail.OrderID)
  if (!_internal_has_orderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return orderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cancel_Order_Fail::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Cancel_Order_Fail.OrderID)
}
inline std::string* Cancel_Order_Fail::unsafe_arena_release_orderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Cancel_Order_Fail.OrderID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return orderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cancel_Order_Fail::unsafe_arena_set_allocated_orderid(
    std::string* orderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (orderid != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  orderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Cancel_Order_Fail.OrderID)
}

// -------------------------------------------------------------------

// Extend_Fields

// optional float StopPx = 1;
inline bool Extend_Fields::_internal_has_stoppx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Extend_Fields::has_stoppx() const {
  return _internal_has_stoppx();
}
inline void Extend_Fields::clear_stoppx() {
  stoppx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Extend_Fields::_internal_stoppx() const {
  return stoppx_;
}
inline float Extend_Fields::stoppx() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Extend_Fields.StopPx)
  return _internal_stoppx();
}
inline void Extend_Fields::_internal_set_stoppx(float value) {
  _has_bits_[0] |= 0x00000004u;
  stoppx_ = value;
}
inline void Extend_Fields::set_stoppx(float value) {
  _internal_set_stoppx(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Extend_Fields.StopPx)
}

// optional float MinQty = 2;
inline bool Extend_Fields::_internal_has_minqty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Extend_Fields::has_minqty() const {
  return _internal_has_minqty();
}
inline void Extend_Fields::clear_minqty() {
  minqty_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Extend_Fields::_internal_minqty() const {
  return minqty_;
}
inline float Extend_Fields::minqty() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Extend_Fields.MinQty)
  return _internal_minqty();
}
inline void Extend_Fields::_internal_set_minqty(float value) {
  _has_bits_[0] |= 0x00000008u;
  minqty_ = value;
}
inline void Extend_Fields::set_minqty(float value) {
  _internal_set_minqty(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Extend_Fields.MinQty)
}

// optional uint32 MaxPriceLevels = 3;
inline bool Extend_Fields::_internal_has_maxpricelevels() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Extend_Fields::has_maxpricelevels() const {
  return _internal_has_maxpricelevels();
}
inline void Extend_Fields::clear_maxpricelevels() {
  maxpricelevels_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Extend_Fields::_internal_maxpricelevels() const {
  return maxpricelevels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Extend_Fields::maxpricelevels() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Extend_Fields.MaxPriceLevels)
  return _internal_maxpricelevels();
}
inline void Extend_Fields::_internal_set_maxpricelevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  maxpricelevels_ = value;
}
inline void Extend_Fields::set_maxpricelevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxpricelevels(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Extend_Fields.MaxPriceLevels)
}

// optional string TimeInForce = 4;
inline bool Extend_Fields::_internal_has_timeinforce() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Extend_Fields::has_timeinforce() const {
  return _internal_has_timeinforce();
}
inline void Extend_Fields::clear_timeinforce() {
  timeinforce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Extend_Fields::timeinforce() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Extend_Fields.TimeInForce)
  return _internal_timeinforce();
}
inline void Extend_Fields::set_timeinforce(const std::string& value) {
  _internal_set_timeinforce(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Extend_Fields.TimeInForce)
}
inline std::string* Extend_Fields::mutable_timeinforce() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Extend_Fields.TimeInForce)
  return _internal_mutable_timeinforce();
}
inline const std::string& Extend_Fields::_internal_timeinforce() const {
  return timeinforce_.Get();
}
inline void Extend_Fields::_internal_set_timeinforce(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timeinforce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Extend_Fields::set_timeinforce(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timeinforce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Extend_Fields.TimeInForce)
}
inline void Extend_Fields::set_timeinforce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timeinforce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Extend_Fields.TimeInForce)
}
inline void Extend_Fields::set_timeinforce(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timeinforce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Extend_Fields.TimeInForce)
}
inline std::string* Extend_Fields::_internal_mutable_timeinforce() {
  _has_bits_[0] |= 0x00000001u;
  return timeinforce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Extend_Fields::release_timeinforce() {
  // @@protoc_insertion_point(field_release:GatewayProto.Extend_Fields.TimeInForce)
  if (!_internal_has_timeinforce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timeinforce_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extend_Fields::set_allocated_timeinforce(std::string* timeinforce) {
  if (timeinforce != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeinforce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeinforce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Extend_Fields.TimeInForce)
}
inline std::string* Extend_Fields::unsafe_arena_release_timeinforce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Extend_Fields.TimeInForce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return timeinforce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Extend_Fields::unsafe_arena_set_allocated_timeinforce(
    std::string* timeinforce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timeinforce != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeinforce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timeinforce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Extend_Fields.TimeInForce)
}

// optional string CashMargin = 5;
inline bool Extend_Fields::_internal_has_cashmargin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Extend_Fields::has_cashmargin() const {
  return _internal_has_cashmargin();
}
inline void Extend_Fields::clear_cashmargin() {
  cashmargin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Extend_Fields::cashmargin() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Extend_Fields.CashMargin)
  return _internal_cashmargin();
}
inline void Extend_Fields::set_cashmargin(const std::string& value) {
  _internal_set_cashmargin(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Extend_Fields.CashMargin)
}
inline std::string* Extend_Fields::mutable_cashmargin() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Extend_Fields.CashMargin)
  return _internal_mutable_cashmargin();
}
inline const std::string& Extend_Fields::_internal_cashmargin() const {
  return cashmargin_.Get();
}
inline void Extend_Fields::_internal_set_cashmargin(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cashmargin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Extend_Fields::set_cashmargin(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cashmargin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GatewayProto.Extend_Fields.CashMargin)
}
inline void Extend_Fields::set_cashmargin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cashmargin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GatewayProto.Extend_Fields.CashMargin)
}
inline void Extend_Fields::set_cashmargin(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cashmargin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GatewayProto.Extend_Fields.CashMargin)
}
inline std::string* Extend_Fields::_internal_mutable_cashmargin() {
  _has_bits_[0] |= 0x00000002u;
  return cashmargin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Extend_Fields::release_cashmargin() {
  // @@protoc_insertion_point(field_release:GatewayProto.Extend_Fields.CashMargin)
  if (!_internal_has_cashmargin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cashmargin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Extend_Fields::set_allocated_cashmargin(std::string* cashmargin) {
  if (cashmargin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cashmargin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cashmargin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Extend_Fields.CashMargin)
}
inline std::string* Extend_Fields::unsafe_arena_release_cashmargin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GatewayProto.Extend_Fields.CashMargin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return cashmargin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Extend_Fields::unsafe_arena_set_allocated_cashmargin(
    std::string* cashmargin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cashmargin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cashmargin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cashmargin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Extend_Fields.CashMargin)
}

// -------------------------------------------------------------------

// Retransmission_Report

// required uint32 NoPartitions = 2;
inline bool Retransmission_Report::_internal_has_nopartitions() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Retransmission_Report::has_nopartitions() const {
  return _internal_has_nopartitions();
}
inline void Retransmission_Report::clear_nopartitions() {
  nopartitions_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Retransmission_Report::_internal_nopartitions() const {
  return nopartitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Retransmission_Report::nopartitions() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Retransmission_Report.NoPartitions)
  return _internal_nopartitions();
}
inline void Retransmission_Report::_internal_set_nopartitions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  nopartitions_ = value;
}
inline void Retransmission_Report::set_nopartitions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nopartitions(value);
  // @@protoc_insertion_point(field_set:GatewayProto.Retransmission_Report.NoPartitions)
}

// repeated int32 PartitionNo = 3;
inline int Retransmission_Report::_internal_partitionno_size() const {
  return partitionno_.size();
}
inline int Retransmission_Report::partitionno_size() const {
  return _internal_partitionno_size();
}
inline void Retransmission_Report::clear_partitionno() {
  partitionno_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Retransmission_Report::_internal_partitionno(int index) const {
  return partitionno_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Retransmission_Report::partitionno(int index) const {
  // @@protoc_insertion_point(field_get:GatewayProto.Retransmission_Report.PartitionNo)
  return _internal_partitionno(index);
}
inline void Retransmission_Report::set_partitionno(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  partitionno_.Set(index, value);
  // @@protoc_insertion_point(field_set:GatewayProto.Retransmission_Report.PartitionNo)
}
inline void Retransmission_Report::_internal_add_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  partitionno_.Add(value);
}
inline void Retransmission_Report::add_partitionno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_partitionno(value);
  // @@protoc_insertion_point(field_add:GatewayProto.Retransmission_Report.PartitionNo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Retransmission_Report::_internal_partitionno() const {
  return partitionno_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Retransmission_Report::partitionno() const {
  // @@protoc_insertion_point(field_list:GatewayProto.Retransmission_Report.PartitionNo)
  return _internal_partitionno();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Retransmission_Report::_internal_mutable_partitionno() {
  return &partitionno_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Retransmission_Report::mutable_partitionno() {
  // @@protoc_insertion_point(field_mutable_list:GatewayProto.Retransmission_Report.PartitionNo)
  return _internal_mutable_partitionno();
}

// repeated uint32 ReportIndex = 4;
inline int Retransmission_Report::_internal_reportindex_size() const {
  return reportindex_.size();
}
inline int Retransmission_Report::reportindex_size() const {
  return _internal_reportindex_size();
}
inline void Retransmission_Report::clear_reportindex() {
  reportindex_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Retransmission_Report::_internal_reportindex(int index) const {
  return reportindex_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Retransmission_Report::reportindex(int index) const {
  // @@protoc_insertion_point(field_get:GatewayProto.Retransmission_Report.ReportIndex)
  return _internal_reportindex(index);
}
inline void Retransmission_Report::set_reportindex(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  reportindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:GatewayProto.Retransmission_Report.ReportIndex)
}
inline void Retransmission_Report::_internal_add_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  reportindex_.Add(value);
}
inline void Retransmission_Report::add_reportindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_reportindex(value);
  // @@protoc_insertion_point(field_add:GatewayProto.Retransmission_Report.ReportIndex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Retransmission_Report::_internal_reportindex() const {
  return reportindex_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Retransmission_Report::reportindex() const {
  // @@protoc_insertion_point(field_list:GatewayProto.Retransmission_Report.ReportIndex)
  return _internal_reportindex();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Retransmission_Report::_internal_mutable_reportindex() {
  return &reportindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Retransmission_Report::mutable_reportindex() {
  // @@protoc_insertion_point(field_mutable_list:GatewayProto.Retransmission_Report.ReportIndex)
  return _internal_mutable_reportindex();
}

// -------------------------------------------------------------------

// Standard_Message

// required .GatewayProto.Standard_Header StandardHeader = 1;
inline bool Standard_Message::_internal_has_standardheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || standardheader_ != nullptr);
  return value;
}
inline bool Standard_Message::has_standardheader() const {
  return _internal_has_standardheader();
}
inline void Standard_Message::clear_standardheader() {
  if (standardheader_ != nullptr) standardheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::GatewayProto::Standard_Header& Standard_Message::_internal_standardheader() const {
  const ::GatewayProto::Standard_Header* p = standardheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Standard_Header*>(
      &::GatewayProto::_Standard_Header_default_instance_);
}
inline const ::GatewayProto::Standard_Header& Standard_Message::standardheader() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.StandardHeader)
  return _internal_standardheader();
}
inline void Standard_Message::unsafe_arena_set_allocated_standardheader(
    ::GatewayProto::Standard_Header* standardheader) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardheader_);
  }
  standardheader_ = standardheader;
  if (standardheader) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.StandardHeader)
}
inline ::GatewayProto::Standard_Header* Standard_Message::release_standardheader() {
  auto temp = unsafe_arena_release_standardheader();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Standard_Header* Standard_Message::unsafe_arena_release_standardheader() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.StandardHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::GatewayProto::Standard_Header* temp = standardheader_;
  standardheader_ = nullptr;
  return temp;
}
inline ::GatewayProto::Standard_Header* Standard_Message::_internal_mutable_standardheader() {
  _has_bits_[0] |= 0x00000001u;
  if (standardheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Standard_Header>(GetArena());
    standardheader_ = p;
  }
  return standardheader_;
}
inline ::GatewayProto::Standard_Header* Standard_Message::mutable_standardheader() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.StandardHeader)
  return _internal_mutable_standardheader();
}
inline void Standard_Message::set_allocated_standardheader(::GatewayProto::Standard_Header* standardheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete standardheader_;
  }
  if (standardheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(standardheader);
    if (message_arena != submessage_arena) {
      standardheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standardheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  standardheader_ = standardheader;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.StandardHeader)
}

// optional .GatewayProto.Logon logon = 2;
inline bool Standard_Message::_internal_has_logon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || logon_ != nullptr);
  return value;
}
inline bool Standard_Message::has_logon() const {
  return _internal_has_logon();
}
inline void Standard_Message::clear_logon() {
  if (logon_ != nullptr) logon_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::GatewayProto::Logon& Standard_Message::_internal_logon() const {
  const ::GatewayProto::Logon* p = logon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Logon*>(
      &::GatewayProto::_Logon_default_instance_);
}
inline const ::GatewayProto::Logon& Standard_Message::logon() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.logon)
  return _internal_logon();
}
inline void Standard_Message::unsafe_arena_set_allocated_logon(
    ::GatewayProto::Logon* logon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logon_);
  }
  logon_ = logon;
  if (logon) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.logon)
}
inline ::GatewayProto::Logon* Standard_Message::release_logon() {
  auto temp = unsafe_arena_release_logon();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Logon* Standard_Message::unsafe_arena_release_logon() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.logon)
  _has_bits_[0] &= ~0x00000002u;
  ::GatewayProto::Logon* temp = logon_;
  logon_ = nullptr;
  return temp;
}
inline ::GatewayProto::Logon* Standard_Message::_internal_mutable_logon() {
  _has_bits_[0] |= 0x00000002u;
  if (logon_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Logon>(GetArena());
    logon_ = p;
  }
  return logon_;
}
inline ::GatewayProto::Logon* Standard_Message::mutable_logon() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.logon)
  return _internal_mutable_logon();
}
inline void Standard_Message::set_allocated_logon(::GatewayProto::Logon* logon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logon_;
  }
  if (logon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logon);
    if (message_arena != submessage_arena) {
      logon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  logon_ = logon;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.logon)
}

// optional .GatewayProto.Logout logout = 3;
inline bool Standard_Message::_internal_has_logout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || logout_ != nullptr);
  return value;
}
inline bool Standard_Message::has_logout() const {
  return _internal_has_logout();
}
inline void Standard_Message::clear_logout() {
  if (logout_ != nullptr) logout_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::GatewayProto::Logout& Standard_Message::_internal_logout() const {
  const ::GatewayProto::Logout* p = logout_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Logout*>(
      &::GatewayProto::_Logout_default_instance_);
}
inline const ::GatewayProto::Logout& Standard_Message::logout() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.logout)
  return _internal_logout();
}
inline void Standard_Message::unsafe_arena_set_allocated_logout(
    ::GatewayProto::Logout* logout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logout_);
  }
  logout_ = logout;
  if (logout) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.logout)
}
inline ::GatewayProto::Logout* Standard_Message::release_logout() {
  auto temp = unsafe_arena_release_logout();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Logout* Standard_Message::unsafe_arena_release_logout() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.logout)
  _has_bits_[0] &= ~0x00000004u;
  ::GatewayProto::Logout* temp = logout_;
  logout_ = nullptr;
  return temp;
}
inline ::GatewayProto::Logout* Standard_Message::_internal_mutable_logout() {
  _has_bits_[0] |= 0x00000004u;
  if (logout_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Logout>(GetArena());
    logout_ = p;
  }
  return logout_;
}
inline ::GatewayProto::Logout* Standard_Message::mutable_logout() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.logout)
  return _internal_mutable_logout();
}
inline void Standard_Message::set_allocated_logout(::GatewayProto::Logout* logout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logout_;
  }
  if (logout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logout);
    if (message_arena != submessage_arena) {
      logout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  logout_ = logout;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.logout)
}

// optional .GatewayProto.Heart_Beat heart_beat = 4;
inline bool Standard_Message::_internal_has_heart_beat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || heart_beat_ != nullptr);
  return value;
}
inline bool Standard_Message::has_heart_beat() const {
  return _internal_has_heart_beat();
}
inline void Standard_Message::clear_heart_beat() {
  if (heart_beat_ != nullptr) heart_beat_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::GatewayProto::Heart_Beat& Standard_Message::_internal_heart_beat() const {
  const ::GatewayProto::Heart_Beat* p = heart_beat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Heart_Beat*>(
      &::GatewayProto::_Heart_Beat_default_instance_);
}
inline const ::GatewayProto::Heart_Beat& Standard_Message::heart_beat() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.heart_beat)
  return _internal_heart_beat();
}
inline void Standard_Message::unsafe_arena_set_allocated_heart_beat(
    ::GatewayProto::Heart_Beat* heart_beat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heart_beat_);
  }
  heart_beat_ = heart_beat;
  if (heart_beat) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.heart_beat)
}
inline ::GatewayProto::Heart_Beat* Standard_Message::release_heart_beat() {
  auto temp = unsafe_arena_release_heart_beat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Heart_Beat* Standard_Message::unsafe_arena_release_heart_beat() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.heart_beat)
  _has_bits_[0] &= ~0x00000008u;
  ::GatewayProto::Heart_Beat* temp = heart_beat_;
  heart_beat_ = nullptr;
  return temp;
}
inline ::GatewayProto::Heart_Beat* Standard_Message::_internal_mutable_heart_beat() {
  _has_bits_[0] |= 0x00000008u;
  if (heart_beat_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Heart_Beat>(GetArena());
    heart_beat_ = p;
  }
  return heart_beat_;
}
inline ::GatewayProto::Heart_Beat* Standard_Message::mutable_heart_beat() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.heart_beat)
  return _internal_mutable_heart_beat();
}
inline void Standard_Message::set_allocated_heart_beat(::GatewayProto::Heart_Beat* heart_beat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heart_beat_;
  }
  if (heart_beat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heart_beat);
    if (message_arena != submessage_arena) {
      heart_beat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heart_beat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  heart_beat_ = heart_beat;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.heart_beat)
}

// optional .GatewayProto.New_Order new_order = 5;
inline bool Standard_Message::_internal_has_new_order() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || new_order_ != nullptr);
  return value;
}
inline bool Standard_Message::has_new_order() const {
  return _internal_has_new_order();
}
inline void Standard_Message::clear_new_order() {
  if (new_order_ != nullptr) new_order_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::GatewayProto::New_Order& Standard_Message::_internal_new_order() const {
  const ::GatewayProto::New_Order* p = new_order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::New_Order*>(
      &::GatewayProto::_New_Order_default_instance_);
}
inline const ::GatewayProto::New_Order& Standard_Message::new_order() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.new_order)
  return _internal_new_order();
}
inline void Standard_Message::unsafe_arena_set_allocated_new_order(
    ::GatewayProto::New_Order* new_order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_order_);
  }
  new_order_ = new_order;
  if (new_order) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.new_order)
}
inline ::GatewayProto::New_Order* Standard_Message::release_new_order() {
  auto temp = unsafe_arena_release_new_order();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::New_Order* Standard_Message::unsafe_arena_release_new_order() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.new_order)
  _has_bits_[0] &= ~0x00000010u;
  ::GatewayProto::New_Order* temp = new_order_;
  new_order_ = nullptr;
  return temp;
}
inline ::GatewayProto::New_Order* Standard_Message::_internal_mutable_new_order() {
  _has_bits_[0] |= 0x00000010u;
  if (new_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::New_Order>(GetArena());
    new_order_ = p;
  }
  return new_order_;
}
inline ::GatewayProto::New_Order* Standard_Message::mutable_new_order() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.new_order)
  return _internal_mutable_new_order();
}
inline void Standard_Message::set_allocated_new_order(::GatewayProto::New_Order* new_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete new_order_;
  }
  if (new_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_order);
    if (message_arena != submessage_arena) {
      new_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_order, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  new_order_ = new_order;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.new_order)
}

// optional .GatewayProto.Executive_Report executive_report = 6;
inline bool Standard_Message::_internal_has_executive_report() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || executive_report_ != nullptr);
  return value;
}
inline bool Standard_Message::has_executive_report() const {
  return _internal_has_executive_report();
}
inline void Standard_Message::clear_executive_report() {
  if (executive_report_ != nullptr) executive_report_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::GatewayProto::Executive_Report& Standard_Message::_internal_executive_report() const {
  const ::GatewayProto::Executive_Report* p = executive_report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Executive_Report*>(
      &::GatewayProto::_Executive_Report_default_instance_);
}
inline const ::GatewayProto::Executive_Report& Standard_Message::executive_report() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.executive_report)
  return _internal_executive_report();
}
inline void Standard_Message::unsafe_arena_set_allocated_executive_report(
    ::GatewayProto::Executive_Report* executive_report) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executive_report_);
  }
  executive_report_ = executive_report;
  if (executive_report) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.executive_report)
}
inline ::GatewayProto::Executive_Report* Standard_Message::release_executive_report() {
  auto temp = unsafe_arena_release_executive_report();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Executive_Report* Standard_Message::unsafe_arena_release_executive_report() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.executive_report)
  _has_bits_[0] &= ~0x00000020u;
  ::GatewayProto::Executive_Report* temp = executive_report_;
  executive_report_ = nullptr;
  return temp;
}
inline ::GatewayProto::Executive_Report* Standard_Message::_internal_mutable_executive_report() {
  _has_bits_[0] |= 0x00000020u;
  if (executive_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Executive_Report>(GetArena());
    executive_report_ = p;
  }
  return executive_report_;
}
inline ::GatewayProto::Executive_Report* Standard_Message::mutable_executive_report() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.executive_report)
  return _internal_mutable_executive_report();
}
inline void Standard_Message::set_allocated_executive_report(::GatewayProto::Executive_Report* executive_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete executive_report_;
  }
  if (executive_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(executive_report);
    if (message_arena != submessage_arena) {
      executive_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executive_report, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  executive_report_ = executive_report;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.executive_report)
}

// optional .GatewayProto.Transaction_Report transaction_report = 7;
inline bool Standard_Message::_internal_has_transaction_report() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || transaction_report_ != nullptr);
  return value;
}
inline bool Standard_Message::has_transaction_report() const {
  return _internal_has_transaction_report();
}
inline void Standard_Message::clear_transaction_report() {
  if (transaction_report_ != nullptr) transaction_report_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::GatewayProto::Transaction_Report& Standard_Message::_internal_transaction_report() const {
  const ::GatewayProto::Transaction_Report* p = transaction_report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Transaction_Report*>(
      &::GatewayProto::_Transaction_Report_default_instance_);
}
inline const ::GatewayProto::Transaction_Report& Standard_Message::transaction_report() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.transaction_report)
  return _internal_transaction_report();
}
inline void Standard_Message::unsafe_arena_set_allocated_transaction_report(
    ::GatewayProto::Transaction_Report* transaction_report) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_report_);
  }
  transaction_report_ = transaction_report;
  if (transaction_report) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.transaction_report)
}
inline ::GatewayProto::Transaction_Report* Standard_Message::release_transaction_report() {
  auto temp = unsafe_arena_release_transaction_report();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Transaction_Report* Standard_Message::unsafe_arena_release_transaction_report() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.transaction_report)
  _has_bits_[0] &= ~0x00000040u;
  ::GatewayProto::Transaction_Report* temp = transaction_report_;
  transaction_report_ = nullptr;
  return temp;
}
inline ::GatewayProto::Transaction_Report* Standard_Message::_internal_mutable_transaction_report() {
  _has_bits_[0] |= 0x00000040u;
  if (transaction_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Transaction_Report>(GetArena());
    transaction_report_ = p;
  }
  return transaction_report_;
}
inline ::GatewayProto::Transaction_Report* Standard_Message::mutable_transaction_report() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.transaction_report)
  return _internal_mutable_transaction_report();
}
inline void Standard_Message::set_allocated_transaction_report(::GatewayProto::Transaction_Report* transaction_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transaction_report_;
  }
  if (transaction_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction_report);
    if (message_arena != submessage_arena) {
      transaction_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_report, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  transaction_report_ = transaction_report;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.transaction_report)
}

// optional .GatewayProto.Cancel_Order cancel_order = 8;
inline bool Standard_Message::_internal_has_cancel_order() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || cancel_order_ != nullptr);
  return value;
}
inline bool Standard_Message::has_cancel_order() const {
  return _internal_has_cancel_order();
}
inline void Standard_Message::clear_cancel_order() {
  if (cancel_order_ != nullptr) cancel_order_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::GatewayProto::Cancel_Order& Standard_Message::_internal_cancel_order() const {
  const ::GatewayProto::Cancel_Order* p = cancel_order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Cancel_Order*>(
      &::GatewayProto::_Cancel_Order_default_instance_);
}
inline const ::GatewayProto::Cancel_Order& Standard_Message::cancel_order() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.cancel_order)
  return _internal_cancel_order();
}
inline void Standard_Message::unsafe_arena_set_allocated_cancel_order(
    ::GatewayProto::Cancel_Order* cancel_order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_order_);
  }
  cancel_order_ = cancel_order;
  if (cancel_order) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.cancel_order)
}
inline ::GatewayProto::Cancel_Order* Standard_Message::release_cancel_order() {
  auto temp = unsafe_arena_release_cancel_order();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Cancel_Order* Standard_Message::unsafe_arena_release_cancel_order() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.cancel_order)
  _has_bits_[0] &= ~0x00000080u;
  ::GatewayProto::Cancel_Order* temp = cancel_order_;
  cancel_order_ = nullptr;
  return temp;
}
inline ::GatewayProto::Cancel_Order* Standard_Message::_internal_mutable_cancel_order() {
  _has_bits_[0] |= 0x00000080u;
  if (cancel_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Cancel_Order>(GetArena());
    cancel_order_ = p;
  }
  return cancel_order_;
}
inline ::GatewayProto::Cancel_Order* Standard_Message::mutable_cancel_order() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.cancel_order)
  return _internal_mutable_cancel_order();
}
inline void Standard_Message::set_allocated_cancel_order(::GatewayProto::Cancel_Order* cancel_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cancel_order_;
  }
  if (cancel_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_order);
    if (message_arena != submessage_arena) {
      cancel_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_order, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  cancel_order_ = cancel_order;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.cancel_order)
}

// optional .GatewayProto.Cancel_Order_Fail cancel_order_fail = 9;
inline bool Standard_Message::_internal_has_cancel_order_fail() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || cancel_order_fail_ != nullptr);
  return value;
}
inline bool Standard_Message::has_cancel_order_fail() const {
  return _internal_has_cancel_order_fail();
}
inline void Standard_Message::clear_cancel_order_fail() {
  if (cancel_order_fail_ != nullptr) cancel_order_fail_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::GatewayProto::Cancel_Order_Fail& Standard_Message::_internal_cancel_order_fail() const {
  const ::GatewayProto::Cancel_Order_Fail* p = cancel_order_fail_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Cancel_Order_Fail*>(
      &::GatewayProto::_Cancel_Order_Fail_default_instance_);
}
inline const ::GatewayProto::Cancel_Order_Fail& Standard_Message::cancel_order_fail() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.cancel_order_fail)
  return _internal_cancel_order_fail();
}
inline void Standard_Message::unsafe_arena_set_allocated_cancel_order_fail(
    ::GatewayProto::Cancel_Order_Fail* cancel_order_fail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_order_fail_);
  }
  cancel_order_fail_ = cancel_order_fail;
  if (cancel_order_fail) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.cancel_order_fail)
}
inline ::GatewayProto::Cancel_Order_Fail* Standard_Message::release_cancel_order_fail() {
  auto temp = unsafe_arena_release_cancel_order_fail();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Cancel_Order_Fail* Standard_Message::unsafe_arena_release_cancel_order_fail() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.cancel_order_fail)
  _has_bits_[0] &= ~0x00000100u;
  ::GatewayProto::Cancel_Order_Fail* temp = cancel_order_fail_;
  cancel_order_fail_ = nullptr;
  return temp;
}
inline ::GatewayProto::Cancel_Order_Fail* Standard_Message::_internal_mutable_cancel_order_fail() {
  _has_bits_[0] |= 0x00000100u;
  if (cancel_order_fail_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Cancel_Order_Fail>(GetArena());
    cancel_order_fail_ = p;
  }
  return cancel_order_fail_;
}
inline ::GatewayProto::Cancel_Order_Fail* Standard_Message::mutable_cancel_order_fail() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.cancel_order_fail)
  return _internal_mutable_cancel_order_fail();
}
inline void Standard_Message::set_allocated_cancel_order_fail(::GatewayProto::Cancel_Order_Fail* cancel_order_fail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cancel_order_fail_;
  }
  if (cancel_order_fail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_order_fail);
    if (message_arena != submessage_arena) {
      cancel_order_fail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_order_fail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  cancel_order_fail_ = cancel_order_fail;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.cancel_order_fail)
}

// optional .GatewayProto.Retransmission_Report retransmission_report = 10;
inline bool Standard_Message::_internal_has_retransmission_report() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || retransmission_report_ != nullptr);
  return value;
}
inline bool Standard_Message::has_retransmission_report() const {
  return _internal_has_retransmission_report();
}
inline void Standard_Message::clear_retransmission_report() {
  if (retransmission_report_ != nullptr) retransmission_report_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::GatewayProto::Retransmission_Report& Standard_Message::_internal_retransmission_report() const {
  const ::GatewayProto::Retransmission_Report* p = retransmission_report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayProto::Retransmission_Report*>(
      &::GatewayProto::_Retransmission_Report_default_instance_);
}
inline const ::GatewayProto::Retransmission_Report& Standard_Message::retransmission_report() const {
  // @@protoc_insertion_point(field_get:GatewayProto.Standard_Message.retransmission_report)
  return _internal_retransmission_report();
}
inline void Standard_Message::unsafe_arena_set_allocated_retransmission_report(
    ::GatewayProto::Retransmission_Report* retransmission_report) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retransmission_report_);
  }
  retransmission_report_ = retransmission_report;
  if (retransmission_report) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GatewayProto.Standard_Message.retransmission_report)
}
inline ::GatewayProto::Retransmission_Report* Standard_Message::release_retransmission_report() {
  auto temp = unsafe_arena_release_retransmission_report();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GatewayProto::Retransmission_Report* Standard_Message::unsafe_arena_release_retransmission_report() {
  // @@protoc_insertion_point(field_release:GatewayProto.Standard_Message.retransmission_report)
  _has_bits_[0] &= ~0x00000200u;
  ::GatewayProto::Retransmission_Report* temp = retransmission_report_;
  retransmission_report_ = nullptr;
  return temp;
}
inline ::GatewayProto::Retransmission_Report* Standard_Message::_internal_mutable_retransmission_report() {
  _has_bits_[0] |= 0x00000200u;
  if (retransmission_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayProto::Retransmission_Report>(GetArena());
    retransmission_report_ = p;
  }
  return retransmission_report_;
}
inline ::GatewayProto::Retransmission_Report* Standard_Message::mutable_retransmission_report() {
  // @@protoc_insertion_point(field_mutable:GatewayProto.Standard_Message.retransmission_report)
  return _internal_mutable_retransmission_report();
}
inline void Standard_Message::set_allocated_retransmission_report(::GatewayProto::Retransmission_Report* retransmission_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete retransmission_report_;
  }
  if (retransmission_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(retransmission_report);
    if (message_arena != submessage_arena) {
      retransmission_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retransmission_report, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  retransmission_report_ = retransmission_report;
  // @@protoc_insertion_point(field_set_allocated:GatewayProto.Standard_Message.retransmission_report)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GatewayProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Gateway_2eproto
