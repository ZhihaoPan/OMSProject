// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gateway.proto

#include "Gateway.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cancel_Order_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cancel_Order_Fail_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Executive_Report_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extend_Fields_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heart_Beat_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logon_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logout_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_New_Order_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Retransmission_Report_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Standard_Header_Gateway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Gateway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_Report_Gateway_2eproto;
namespace GatewayProto {
class Standard_HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Standard_Header> _instance;
} _Standard_Header_default_instance_;
class LogonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logon> _instance;
} _Logon_default_instance_;
class LogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logout> _instance;
} _Logout_default_instance_;
class Heart_BeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heart_Beat> _instance;
} _Heart_Beat_default_instance_;
class New_OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<New_Order> _instance;
} _New_Order_default_instance_;
class Executive_ReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Executive_Report> _instance;
} _Executive_Report_default_instance_;
class Transaction_ReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_Report> _instance;
} _Transaction_Report_default_instance_;
class Cancel_OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cancel_Order> _instance;
} _Cancel_Order_default_instance_;
class Cancel_Order_FailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cancel_Order_Fail> _instance;
} _Cancel_Order_Fail_default_instance_;
class Extend_FieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extend_Fields> _instance;
} _Extend_Fields_default_instance_;
class Retransmission_ReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Retransmission_Report> _instance;
} _Retransmission_Report_default_instance_;
class Standard_MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Standard_Message> _instance;
} _Standard_Message_default_instance_;
}  // namespace GatewayProto
static void InitDefaultsscc_info_Cancel_Order_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Cancel_Order_default_instance_;
    new (ptr) ::GatewayProto::Cancel_Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Cancel_Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cancel_Order_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cancel_Order_Gateway_2eproto}, {}};

static void InitDefaultsscc_info_Cancel_Order_Fail_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Cancel_Order_Fail_default_instance_;
    new (ptr) ::GatewayProto::Cancel_Order_Fail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Cancel_Order_Fail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cancel_Order_Fail_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cancel_Order_Fail_Gateway_2eproto}, {}};

static void InitDefaultsscc_info_Executive_Report_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Executive_Report_default_instance_;
    new (ptr) ::GatewayProto::Executive_Report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Executive_Report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Executive_Report_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Executive_Report_Gateway_2eproto}, {
      &scc_info_Extend_Fields_Gateway_2eproto.base,}};

static void InitDefaultsscc_info_Extend_Fields_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Extend_Fields_default_instance_;
    new (ptr) ::GatewayProto::Extend_Fields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Extend_Fields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extend_Fields_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extend_Fields_Gateway_2eproto}, {}};

static void InitDefaultsscc_info_Heart_Beat_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Heart_Beat_default_instance_;
    new (ptr) ::GatewayProto::Heart_Beat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Heart_Beat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heart_Beat_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Heart_Beat_Gateway_2eproto}, {}};

static void InitDefaultsscc_info_Logon_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Logon_default_instance_;
    new (ptr) ::GatewayProto::Logon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Logon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logon_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Logon_Gateway_2eproto}, {}};

static void InitDefaultsscc_info_Logout_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Logout_default_instance_;
    new (ptr) ::GatewayProto::Logout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Logout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logout_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Logout_Gateway_2eproto}, {}};

static void InitDefaultsscc_info_New_Order_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_New_Order_default_instance_;
    new (ptr) ::GatewayProto::New_Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::New_Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_New_Order_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_New_Order_Gateway_2eproto}, {
      &scc_info_Extend_Fields_Gateway_2eproto.base,}};

static void InitDefaultsscc_info_Retransmission_Report_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Retransmission_Report_default_instance_;
    new (ptr) ::GatewayProto::Retransmission_Report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Retransmission_Report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Retransmission_Report_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Retransmission_Report_Gateway_2eproto}, {}};

static void InitDefaultsscc_info_Standard_Header_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Standard_Header_default_instance_;
    new (ptr) ::GatewayProto::Standard_Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Standard_Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Standard_Header_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Standard_Header_Gateway_2eproto}, {}};

static void InitDefaultsscc_info_Standard_Message_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Standard_Message_default_instance_;
    new (ptr) ::GatewayProto::Standard_Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Standard_Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Standard_Message_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Standard_Message_Gateway_2eproto}, {
      &scc_info_Standard_Header_Gateway_2eproto.base,
      &scc_info_Logon_Gateway_2eproto.base,
      &scc_info_Logout_Gateway_2eproto.base,
      &scc_info_Heart_Beat_Gateway_2eproto.base,
      &scc_info_New_Order_Gateway_2eproto.base,
      &scc_info_Executive_Report_Gateway_2eproto.base,
      &scc_info_Transaction_Report_Gateway_2eproto.base,
      &scc_info_Cancel_Order_Gateway_2eproto.base,
      &scc_info_Cancel_Order_Fail_Gateway_2eproto.base,
      &scc_info_Retransmission_Report_Gateway_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_Report_Gateway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GatewayProto::_Transaction_Report_default_instance_;
    new (ptr) ::GatewayProto::Transaction_Report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GatewayProto::Transaction_Report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_Report_Gateway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transaction_Report_Gateway_2eproto}, {
      &scc_info_Extend_Fields_Gateway_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Gateway_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Gateway_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Gateway_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Gateway_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Header, msgtype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Header, bodylength_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logon, sendercompid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logon, targetcompid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logon, heartbtint_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logon, password_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logon, defaultapplverid_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logout, sessionstatus_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Logout, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Heart_Beat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Heart_Beat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Heart_Beat, text_),
  0,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, applid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, submittingpbuid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, securityid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, ownertype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, clearingfirm_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, transacttime_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, userinfo_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, clordid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, accountid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, branchid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, orderrestrictions_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, side_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, ordtype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, orderqty_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, price_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::New_Order, extendfields_),
  0,
  1,
  2,
  3,
  14,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  15,
  16,
  13,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, partitionno_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, reportindex_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, applid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, reportingpbuid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, submittingpbuid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, securityid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, ownertype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, clearingfirm_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, transacttime_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, userinfo_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, orderid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, clordid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, origclordid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, execid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, exectype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, ordstatus_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, ordrejreason_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, leavesqty_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, cumqty_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, side_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, ordtype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, orderqty_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, price_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, accountid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, branchid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, orderrestrictions_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Executive_Report, extendfields_),
  21,
  22,
  0,
  1,
  2,
  3,
  4,
  23,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  24,
  25,
  15,
  16,
  26,
  27,
  17,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, partitionno_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, reportindex_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, applid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, reportingpbuid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, submittingpbuid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, securityid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, ownertype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, clearingfirm_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, transacttime_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, userinfo_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, orderid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, clordid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, execid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, exectype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, ordstatus_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, lastpx_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, lastqty_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, leavesqty_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, cumqty_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, side_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, accountid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, branchid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Transaction_Report, extendfields_),
  17,
  18,
  0,
  1,
  2,
  3,
  4,
  19,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  20,
  21,
  22,
  23,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, applid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, submittingpbuid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, securityid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, ownertype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, clearingfirm_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, transacttime_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, userinfo_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, clordid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, origclordid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, side_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, orderid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order, orderqty_),
  0,
  1,
  2,
  3,
  11,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  12,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, partitionno_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, reportindex_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, applid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, reportingpbuid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, submittingpbuid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, securityid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, securityidsource_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, ownertype_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, clearingfirm_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, transacttime_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, userinfo_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, clordid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, execid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, origclordid_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, side_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, ordstatus_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, cxlrejreason_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, rejecttext_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Cancel_Order_Fail, orderid_),
  15,
  16,
  0,
  1,
  2,
  3,
  4,
  17,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  18,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Extend_Fields, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Extend_Fields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Extend_Fields, stoppx_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Extend_Fields, minqty_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Extend_Fields, maxpricelevels_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Extend_Fields, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Extend_Fields, cashmargin_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Retransmission_Report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Retransmission_Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Retransmission_Report, nopartitions_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Retransmission_Report, partitionno_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Retransmission_Report, reportindex_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, standardheader_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, logon_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, logout_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, heart_beat_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, new_order_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, executive_report_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, transaction_report_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, cancel_order_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, cancel_order_fail_),
  PROTOBUF_FIELD_OFFSET(::GatewayProto::Standard_Message, retransmission_report_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::GatewayProto::Standard_Header)},
  { 9, 19, sizeof(::GatewayProto::Logon)},
  { 24, 31, sizeof(::GatewayProto::Logout)},
  { 33, 39, sizeof(::GatewayProto::Heart_Beat)},
  { 40, 62, sizeof(::GatewayProto::New_Order)},
  { 79, 112, sizeof(::GatewayProto::Executive_Report)},
  { 140, 169, sizeof(::GatewayProto::Transaction_Report)},
  { 193, 211, sizeof(::GatewayProto::Cancel_Order)},
  { 224, 248, sizeof(::GatewayProto::Cancel_Order_Fail)},
  { 267, 277, sizeof(::GatewayProto::Extend_Fields)},
  { 282, 290, sizeof(::GatewayProto::Retransmission_Report)},
  { 293, 308, sizeof(::GatewayProto::Standard_Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Standard_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Logon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Logout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Heart_Beat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_New_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Executive_Report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Transaction_Report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Cancel_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Cancel_Order_Fail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Extend_Fields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Retransmission_Report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GatewayProto::_Standard_Message_default_instance_),
};

const char descriptor_table_protodef_Gateway_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rGateway.proto\022\014GatewayProto\"6\n\017Standar"
  "d_Header\022\017\n\007MsgType\030\001 \002(\005\022\022\n\nBodyLength\030"
  "\002 \002(\005\"s\n\005Logon\022\024\n\014SenderCompID\030\001 \002(\t\022\024\n\014"
  "TargetCompID\030\002 \002(\t\022\022\n\nHeartBtInt\030\003 \002(\r\022\020"
  "\n\010Password\030\004 \002(\t\022\030\n\020DefaultApplVerID\030\005 \002"
  "(\t\"-\n\006Logout\022\025\n\rSessionStatus\030\001 \002(\005\022\014\n\004T"
  "ext\030\002 \002(\t\"\032\n\nHeart_Beat\022\014\n\004Text\030\001 \001(\t\"\367\002"
  "\n\tNew_Order\022\016\n\006ApplID\030\001 \002(\t\022\027\n\017Submittin"
  "gPBUID\030\002 \002(\t\022\022\n\nSecurityID\030\003 \002(\t\022\030\n\020Secu"
  "rityIDSource\030\004 \002(\t\022\021\n\tOwnerType\030\005 \002(\r\022\024\n"
  "\014ClearingFirm\030\006 \002(\t\022\024\n\014TransactTime\030\007 \002("
  "\t\022\020\n\010UserInfo\030\010 \002(\t\022\017\n\007ClOrdID\030\t \002(\t\022\021\n\t"
  "AccountID\030\n \002(\t\022\020\n\010BranchID\030\013 \002(\t\022\031\n\021Ord"
  "erRestrictions\030\014 \002(\t\022\014\n\004Side\030\r \002(\t\022\017\n\007Or"
  "dType\030\016 \002(\t\022\020\n\010OrderQty\030\017 \002(\r\022\r\n\005Price\030\020"
  " \002(\002\0221\n\014ExtendFields\030\021 \001(\0132\033.GatewayProt"
  "o.Extend_Fields\"\324\004\n\020Executive_Report\022\023\n\013"
  "PartitionNo\030\002 \002(\005\022\023\n\013ReportIndex\030\003 \002(\r\022\016"
  "\n\006ApplID\030\004 \002(\t\022\026\n\016ReportingPBUID\030\005 \002(\t\022\027"
  "\n\017SubmittingPBUID\030\006 \002(\t\022\022\n\nSecurityID\030\007 "
  "\002(\t\022\030\n\020SecurityIDSource\030\010 \002(\t\022\021\n\tOwnerTy"
  "pe\030\t \002(\r\022\024\n\014ClearingFirm\030\n \002(\t\022\024\n\014Transa"
  "ctTime\030\013 \002(\t\022\020\n\010UserInfo\030\014 \002(\t\022\017\n\007OrderI"
  "D\030\r \002(\t\022\017\n\007ClOrdID\030\016 \002(\t\022\023\n\013OrigClOrdID\030"
  "\017 \002(\t\022\016\n\006ExecID\030\020 \002(\t\022\020\n\010ExecType\030\021 \002(\t\022"
  "\021\n\tOrdStatus\030\022 \002(\t\022\024\n\014OrdRejReason\030\023 \002(\t"
  "\022\021\n\tLeavesQty\030\024 \002(\005\022\016\n\006CumQty\030\025 \002(\005\022\014\n\004S"
  "ide\030\026 \002(\t\022\017\n\007OrdType\030\027 \002(\t\022\020\n\010OrderQty\030\030"
  " \002(\r\022\r\n\005Price\030\031 \002(\002\022\021\n\tAccountID\030\032 \002(\t\022\020"
  "\n\010BranchID\030\033 \002(\t\022\031\n\021OrderRestrictions\030\034 "
  "\002(\t\0221\n\014ExtendFields\030\035 \001(\0132\033.GatewayProto"
  ".Extend_Fields\"\377\003\n\022Transaction_Report\022\023\n"
  "\013PartitionNo\030\002 \002(\005\022\023\n\013ReportIndex\030\003 \002(\r\022"
  "\016\n\006ApplID\030\004 \002(\t\022\026\n\016ReportingPBUID\030\005 \002(\t\022"
  "\027\n\017SubmittingPBUID\030\006 \002(\t\022\022\n\nSecurityID\030\007"
  " \002(\t\022\030\n\020SecurityIDSource\030\010 \002(\t\022\021\n\tOwnerT"
  "ype\030\t \002(\r\022\024\n\014ClearingFirm\030\n \002(\t\022\024\n\014Trans"
  "actTime\030\013 \002(\t\022\020\n\010UserInfo\030\014 \002(\t\022\017\n\007Order"
  "ID\030\r \002(\t\022\017\n\007ClOrdID\030\016 \002(\t\022\016\n\006ExecID\030\017 \002("
  "\t\022\020\n\010ExecType\030\020 \002(\t\022\021\n\tOrdStatus\030\021 \002(\t\022\016"
  "\n\006LastPx\030\022 \002(\002\022\017\n\007LastQty\030\023 \002(\005\022\021\n\tLeave"
  "sQty\030\024 \002(\005\022\016\n\006CumQty\030\025 \002(\005\022\014\n\004Side\030\026 \002(\t"
  "\022\021\n\tAccountID\030\027 \002(\t\022\020\n\010BranchID\030\030 \002(\t\0221\n"
  "\014ExtendFields\030\031 \001(\0132\033.GatewayProto.Exten"
  "d_Fields\"\215\002\n\014Cancel_Order\022\016\n\006ApplID\030\002 \002("
  "\t\022\027\n\017SubmittingPBUID\030\003 \002(\t\022\022\n\nSecurityID"
  "\030\004 \002(\t\022\030\n\020SecurityIDSource\030\005 \002(\t\022\021\n\tOwne"
  "rType\030\006 \002(\r\022\024\n\014ClearingFirm\030\007 \002(\t\022\024\n\014Tra"
  "nsactTime\030\010 \002(\t\022\020\n\010UserInfo\030\t \002(\t\022\017\n\007ClO"
  "rdID\030\n \002(\t\022\023\n\013OrigClOrdID\030\013 \002(\t\022\014\n\004Side\030"
  "\014 \002(\t\022\017\n\007OrderID\030\r \002(\t\022\020\n\010OrderQty\030\016 \002(\r"
  "\"\217\003\n\021Cancel_Order_Fail\022\023\n\013PartitionNo\030\002 "
  "\002(\005\022\023\n\013ReportIndex\030\003 \002(\r\022\016\n\006ApplID\030\004 \002(\t"
  "\022\026\n\016ReportingPBUID\030\005 \002(\t\022\027\n\017SubmittingPB"
  "UID\030\006 \002(\t\022\022\n\nSecurityID\030\007 \002(\t\022\030\n\020Securit"
  "yIDSource\030\010 \002(\t\022\021\n\tOwnerType\030\t \002(\r\022\024\n\014Cl"
  "earingFirm\030\n \002(\t\022\024\n\014TransactTime\030\013 \002(\t\022\020"
  "\n\010UserInfo\030\014 \002(\t\022\017\n\007ClOrdID\030\r \002(\t\022\016\n\006Exe"
  "cID\030\016 \002(\t\022\023\n\013OrigClOrdID\030\017 \002(\t\022\014\n\004Side\030\020"
  " \002(\t\022\021\n\tOrdStatus\030\021 \002(\t\022\024\n\014CxlRejReason\030"
  "\022 \002(\r\022\022\n\nRejectText\030\023 \002(\t\022\017\n\007OrderID\030\024 \002"
  "(\t\"p\n\rExtend_Fields\022\016\n\006StopPx\030\001 \001(\002\022\016\n\006M"
  "inQty\030\002 \001(\002\022\026\n\016MaxPriceLevels\030\003 \001(\r\022\023\n\013T"
  "imeInForce\030\004 \001(\t\022\022\n\nCashMargin\030\005 \001(\t\"W\n\025"
  "Retransmission_Report\022\024\n\014NoPartitions\030\002 "
  "\002(\r\022\023\n\013PartitionNo\030\003 \003(\005\022\023\n\013ReportIndex\030"
  "\004 \003(\r\"\227\004\n\020Standard_Message\0225\n\016StandardHe"
  "ader\030\001 \002(\0132\035.GatewayProto.Standard_Heade"
  "r\022\"\n\005logon\030\002 \001(\0132\023.GatewayProto.Logon\022$\n"
  "\006logout\030\003 \001(\0132\024.GatewayProto.Logout\022,\n\nh"
  "eart_beat\030\004 \001(\0132\030.GatewayProto.Heart_Bea"
  "t\022*\n\tnew_order\030\005 \001(\0132\027.GatewayProto.New_"
  "Order\0228\n\020executive_report\030\006 \001(\0132\036.Gatewa"
  "yProto.Executive_Report\022<\n\022transaction_r"
  "eport\030\007 \001(\0132 .GatewayProto.Transaction_R"
  "eport\0220\n\014cancel_order\030\010 \001(\0132\032.GatewayPro"
  "to.Cancel_Order\022:\n\021cancel_order_fail\030\t \001"
  "(\0132\037.GatewayProto.Cancel_Order_Fail\022B\n\025r"
  "etransmission_report\030\n \001(\0132#.GatewayProt"
  "o.Retransmission_Report"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Gateway_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Gateway_2eproto_sccs[12] = {
  &scc_info_Cancel_Order_Gateway_2eproto.base,
  &scc_info_Cancel_Order_Fail_Gateway_2eproto.base,
  &scc_info_Executive_Report_Gateway_2eproto.base,
  &scc_info_Extend_Fields_Gateway_2eproto.base,
  &scc_info_Heart_Beat_Gateway_2eproto.base,
  &scc_info_Logon_Gateway_2eproto.base,
  &scc_info_Logout_Gateway_2eproto.base,
  &scc_info_New_Order_Gateway_2eproto.base,
  &scc_info_Retransmission_Report_Gateway_2eproto.base,
  &scc_info_Standard_Header_Gateway_2eproto.base,
  &scc_info_Standard_Message_Gateway_2eproto.base,
  &scc_info_Transaction_Report_Gateway_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Gateway_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Gateway_2eproto = {
  false, false, descriptor_table_protodef_Gateway_2eproto, "Gateway.proto", 3183,
  &descriptor_table_Gateway_2eproto_once, descriptor_table_Gateway_2eproto_sccs, descriptor_table_Gateway_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_Gateway_2eproto::offsets,
  file_level_metadata_Gateway_2eproto, 12, file_level_enum_descriptors_Gateway_2eproto, file_level_service_descriptors_Gateway_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Gateway_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Gateway_2eproto)), true);
namespace GatewayProto {

// ===================================================================

void Standard_Header::InitAsDefaultInstance() {
}
class Standard_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Standard_Header>()._has_bits_);
  static void set_has_msgtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bodylength(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Standard_Header::Standard_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Standard_Header)
}
Standard_Header::Standard_Header(const Standard_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgtype_, &from.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&bodylength_) -
    reinterpret_cast<char*>(&msgtype_)) + sizeof(bodylength_));
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Standard_Header)
}

void Standard_Header::SharedCtor() {
  ::memset(&msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bodylength_) -
      reinterpret_cast<char*>(&msgtype_)) + sizeof(bodylength_));
}

Standard_Header::~Standard_Header() {
  // @@protoc_insertion_point(destructor:GatewayProto.Standard_Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Standard_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Standard_Header::ArenaDtor(void* object) {
  Standard_Header* _this = reinterpret_cast< Standard_Header* >(object);
  (void)_this;
}
void Standard_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Standard_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Standard_Header& Standard_Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Standard_Header_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Standard_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Standard_Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&msgtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bodylength_) -
        reinterpret_cast<char*>(&msgtype_)) + sizeof(bodylength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Standard_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 MsgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msgtype(&has_bits);
          msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 BodyLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bodylength(&has_bits);
          bodylength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Standard_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Standard_Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MsgType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // required int32 BodyLength = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bodylength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Standard_Header)
  return target;
}

size_t Standard_Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GatewayProto.Standard_Header)
  size_t total_size = 0;

  if (_internal_has_msgtype()) {
    // required int32 MsgType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgtype());
  }

  if (_internal_has_bodylength()) {
    // required int32 BodyLength = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bodylength());
  }

  return total_size;
}
size_t Standard_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Standard_Header)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 MsgType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgtype());

    // required int32 BodyLength = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bodylength());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Standard_Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Standard_Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Standard_Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Standard_Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Standard_Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Standard_Header)
    MergeFrom(*source);
  }
}

void Standard_Header::MergeFrom(const Standard_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Standard_Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msgtype_ = from.msgtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      bodylength_ = from.bodylength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Standard_Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Standard_Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Standard_Header::CopyFrom(const Standard_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Standard_Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Standard_Header::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Standard_Header::InternalSwap(Standard_Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Standard_Header, bodylength_)
      + sizeof(Standard_Header::bodylength_)
      - PROTOBUF_FIELD_OFFSET(Standard_Header, msgtype_)>(
          reinterpret_cast<char*>(&msgtype_),
          reinterpret_cast<char*>(&other->msgtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Standard_Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Logon::InitAsDefaultInstance() {
}
class Logon::_Internal {
 public:
  using HasBits = decltype(std::declval<Logon>()._has_bits_);
  static void set_has_sendercompid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_targetcompid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heartbtint(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_defaultapplverid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

Logon::Logon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Logon)
}
Logon::Logon(const Logon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sendercompid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sendercompid()) {
    sendercompid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sendercompid(),
      GetArena());
  }
  targetcompid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_targetcompid()) {
    targetcompid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetcompid(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  defaultapplverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_defaultapplverid()) {
    defaultapplverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_defaultapplverid(),
      GetArena());
  }
  heartbtint_ = from.heartbtint_;
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Logon)
}

void Logon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Logon_Gateway_2eproto.base);
  sendercompid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetcompid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultapplverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heartbtint_ = 0u;
}

Logon::~Logon() {
  // @@protoc_insertion_point(destructor:GatewayProto.Logon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sendercompid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetcompid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultapplverid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Logon::ArenaDtor(void* object) {
  Logon* _this = reinterpret_cast< Logon* >(object);
  (void)_this;
}
void Logon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Logon& Logon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logon_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Logon::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Logon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sendercompid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      targetcompid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      defaultapplverid_.ClearNonDefaultToEmpty();
    }
  }
  heartbtint_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string SenderCompID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sendercompid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Logon.SenderCompID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string TargetCompID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_targetcompid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Logon.TargetCompID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 HeartBtInt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_heartbtint(&has_bits);
          heartbtint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Logon.Password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string DefaultApplVerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_defaultapplverid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Logon.DefaultApplVerID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Logon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string SenderCompID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sendercompid().data(), static_cast<int>(this->_internal_sendercompid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Logon.SenderCompID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sendercompid(), target);
  }

  // required string TargetCompID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_targetcompid().data(), static_cast<int>(this->_internal_targetcompid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Logon.TargetCompID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_targetcompid(), target);
  }

  // required uint32 HeartBtInt = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heartbtint(), target);
  }

  // required string Password = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Logon.Password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // required string DefaultApplVerID = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_defaultapplverid().data(), static_cast<int>(this->_internal_defaultapplverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Logon.DefaultApplVerID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_defaultapplverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Logon)
  return target;
}

size_t Logon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GatewayProto.Logon)
  size_t total_size = 0;

  if (_internal_has_sendercompid()) {
    // required string SenderCompID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendercompid());
  }

  if (_internal_has_targetcompid()) {
    // required string TargetCompID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetcompid());
  }

  if (_internal_has_password()) {
    // required string Password = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (_internal_has_defaultapplverid()) {
    // required string DefaultApplVerID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaultapplverid());
  }

  if (_internal_has_heartbtint()) {
    // required uint32 HeartBtInt = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heartbtint());
  }

  return total_size;
}
size_t Logon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Logon)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string SenderCompID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendercompid());

    // required string TargetCompID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetcompid());

    // required string Password = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());

    // required string DefaultApplVerID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaultapplverid());

    // required uint32 HeartBtInt = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heartbtint());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Logon)
  GOOGLE_DCHECK_NE(&from, this);
  const Logon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Logon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Logon)
    MergeFrom(*source);
  }
}

void Logon::MergeFrom(const Logon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Logon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sendercompid(from._internal_sendercompid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_targetcompid(from._internal_targetcompid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_defaultapplverid(from._internal_defaultapplverid());
    }
    if (cached_has_bits & 0x00000010u) {
      heartbtint_ = from.heartbtint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Logon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logon::CopyFrom(const Logon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logon::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Logon::InternalSwap(Logon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sendercompid_.Swap(&other->sendercompid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetcompid_.Swap(&other->targetcompid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  defaultapplverid_.Swap(&other->defaultapplverid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(heartbtint_, other->heartbtint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Logon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Logout::InitAsDefaultInstance() {
}
class Logout::_Internal {
 public:
  using HasBits = decltype(std::declval<Logout>()._has_bits_);
  static void set_has_sessionstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Logout::Logout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Logout)
}
Logout::Logout(const Logout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  sessionstatus_ = from.sessionstatus_;
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Logout)
}

void Logout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Logout_Gateway_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionstatus_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:GatewayProto.Logout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Logout::ArenaDtor(void* object) {
  Logout* _this = reinterpret_cast< Logout* >(object);
  (void)_this;
}
void Logout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Logout& Logout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logout_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Logout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  sessionstatus_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 SessionStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sessionstatus(&has_bits);
          sessionstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Logout.Text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Logout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 SessionStatus = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sessionstatus(), target);
  }

  // required string Text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Logout.Text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Logout)
  return target;
}

size_t Logout::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GatewayProto.Logout)
  size_t total_size = 0;

  if (_internal_has_text()) {
    // required string Text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (_internal_has_sessionstatus()) {
    // required int32 SessionStatus = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sessionstatus());
  }

  return total_size;
}
size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Logout)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());

    // required int32 SessionStatus = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sessionstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  const Logout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Logout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Logout)
    MergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      sessionstatus_ = from.sessionstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Logout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Logout::InternalSwap(Logout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sessionstatus_, other->sessionstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Logout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Heart_Beat::InitAsDefaultInstance() {
}
class Heart_Beat::_Internal {
 public:
  using HasBits = decltype(std::declval<Heart_Beat>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Heart_Beat::Heart_Beat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Heart_Beat)
}
Heart_Beat::Heart_Beat(const Heart_Beat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Heart_Beat)
}

void Heart_Beat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Heart_Beat_Gateway_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Heart_Beat::~Heart_Beat() {
  // @@protoc_insertion_point(destructor:GatewayProto.Heart_Beat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heart_Beat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Heart_Beat::ArenaDtor(void* object) {
  Heart_Beat* _this = reinterpret_cast< Heart_Beat* >(object);
  (void)_this;
}
void Heart_Beat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heart_Beat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Heart_Beat& Heart_Beat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Heart_Beat_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Heart_Beat::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Heart_Beat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heart_Beat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string Text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Heart_Beat.Text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heart_Beat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Heart_Beat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Heart_Beat.Text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Heart_Beat)
  return target;
}

size_t Heart_Beat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Heart_Beat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string Text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heart_Beat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Heart_Beat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heart_Beat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heart_Beat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Heart_Beat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Heart_Beat)
    MergeFrom(*source);
  }
}

void Heart_Beat::MergeFrom(const Heart_Beat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Heart_Beat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_set_text(from._internal_text());
  }
}

void Heart_Beat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Heart_Beat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heart_Beat::CopyFrom(const Heart_Beat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Heart_Beat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heart_Beat::IsInitialized() const {
  return true;
}

void Heart_Beat::InternalSwap(Heart_Beat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Heart_Beat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void New_Order::InitAsDefaultInstance() {
  ::GatewayProto::_New_Order_default_instance_._instance.get_mutable()->extendfields_ = const_cast< ::GatewayProto::Extend_Fields*>(
      ::GatewayProto::Extend_Fields::internal_default_instance());
}
class New_Order::_Internal {
 public:
  using HasBits = decltype(std::declval<New_Order>()._has_bits_);
  static void set_has_applid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_submittingpbuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_securityid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_securityidsource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ownertype(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_clearingfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transacttime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_clordid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_branchid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_orderrestrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ordtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_orderqty(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::GatewayProto::Extend_Fields& extendfields(const New_Order* msg);
  static void set_has_extendfields(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0001dfff) ^ 0x0001dfff) != 0;
  }
};

const ::GatewayProto::Extend_Fields&
New_Order::_Internal::extendfields(const New_Order* msg) {
  return *msg->extendfields_;
}
New_Order::New_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.New_Order)
}
New_Order::New_Order(const New_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_applid()) {
    applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_applid(),
      GetArena());
  }
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_submittingpbuid()) {
    submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_submittingpbuid(),
      GetArena());
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityid()) {
    securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityid(),
      GetArena());
  }
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityidsource()) {
    securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityidsource(),
      GetArena());
  }
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clearingfirm()) {
    clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clearingfirm(),
      GetArena());
  }
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transacttime()) {
    transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transacttime(),
      GetArena());
  }
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userinfo()) {
    userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userinfo(),
      GetArena());
  }
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clordid()) {
    clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clordid(),
      GetArena());
  }
  accountid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_accountid()) {
    accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_accountid(),
      GetArena());
  }
  branchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branchid()) {
    branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_branchid(),
      GetArena());
  }
  orderrestrictions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderrestrictions()) {
    orderrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderrestrictions(),
      GetArena());
  }
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_side()) {
    side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_side(),
      GetArena());
  }
  ordtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ordtype()) {
    ordtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordtype(),
      GetArena());
  }
  if (from._internal_has_extendfields()) {
    extendfields_ = new ::GatewayProto::Extend_Fields(*from.extendfields_);
  } else {
    extendfields_ = nullptr;
  }
  ::memcpy(&ownertype_, &from.ownertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&ownertype_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:GatewayProto.New_Order)
}

void New_Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_New_Order_Gateway_2eproto.base);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderrestrictions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extendfields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&extendfields_)) + sizeof(price_));
}

New_Order::~New_Order() {
  // @@protoc_insertion_point(destructor:GatewayProto.New_Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void New_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  applid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderrestrictions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete extendfields_;
}

void New_Order::ArenaDtor(void* object) {
  New_Order* _this = reinterpret_cast< New_Order* >(object);
  (void)_this;
}
void New_Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void New_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const New_Order& New_Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_New_Order_Gateway_2eproto.base);
  return *internal_default_instance();
}


void New_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.New_Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      applid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      submittingpbuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      securityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      securityidsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      clearingfirm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      transacttime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      userinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      clordid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      accountid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      branchid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      orderrestrictions_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      side_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      ordtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(extendfields_ != nullptr);
      extendfields_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&ownertype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orderqty_) -
        reinterpret_cast<char*>(&ownertype_)) + sizeof(orderqty_));
  }
  price_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* New_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string ApplID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_applid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.ApplID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SubmittingPBUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_submittingpbuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.SubmittingPBUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_securityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.SecurityID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityIDSource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_securityidsource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.SecurityIDSource");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 OwnerType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ownertype(&has_bits);
          ownertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClearingFirm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clearingfirm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.ClearingFirm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string TransactTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.TransactTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string UserInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_userinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.UserInfo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClOrdID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_clordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.ClOrdID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string AccountID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_accountid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.AccountID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string BranchID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_branchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.BranchID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrderRestrictions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_orderrestrictions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.OrderRestrictions");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Side = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_side();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.Side");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrdType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_ordtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.New_Order.OrdType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 OrderQty = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_orderqty(&has_bits);
          orderqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float Price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Extend_Fields ExtendFields = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendfields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* New_Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.New_Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ApplID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applid().data(), static_cast<int>(this->_internal_applid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.ApplID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_applid(), target);
  }

  // required string SubmittingPBUID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_submittingpbuid().data(), static_cast<int>(this->_internal_submittingpbuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.SubmittingPBUID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_submittingpbuid(), target);
  }

  // required string SecurityID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.SecurityID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_securityid(), target);
  }

  // required string SecurityIDSource = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityidsource().data(), static_cast<int>(this->_internal_securityidsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.SecurityIDSource");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_securityidsource(), target);
  }

  // required uint32 OwnerType = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ownertype(), target);
  }

  // required string ClearingFirm = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clearingfirm().data(), static_cast<int>(this->_internal_clearingfirm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.ClearingFirm");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_clearingfirm(), target);
  }

  // required string TransactTime = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.TransactTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_transacttime(), target);
  }

  // required string UserInfo = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userinfo().data(), static_cast<int>(this->_internal_userinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.UserInfo");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_userinfo(), target);
  }

  // required string ClOrdID = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clordid().data(), static_cast<int>(this->_internal_clordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.ClOrdID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_clordid(), target);
  }

  // required string AccountID = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accountid().data(), static_cast<int>(this->_internal_accountid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.AccountID");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_accountid(), target);
  }

  // required string BranchID = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branchid().data(), static_cast<int>(this->_internal_branchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.BranchID");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_branchid(), target);
  }

  // required string OrderRestrictions = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orderrestrictions().data(), static_cast<int>(this->_internal_orderrestrictions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.OrderRestrictions");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_orderrestrictions(), target);
  }

  // required string Side = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_side().data(), static_cast<int>(this->_internal_side().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.Side");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_side(), target);
  }

  // required string OrdType = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ordtype().data(), static_cast<int>(this->_internal_ordtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.New_Order.OrdType");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_ordtype(), target);
  }

  // required uint32 OrderQty = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_orderqty(), target);
  }

  // required float Price = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_price(), target);
  }

  // optional .GatewayProto.Extend_Fields ExtendFields = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::extendfields(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.New_Order)
  return target;
}

size_t New_Order::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GatewayProto.New_Order)
  size_t total_size = 0;

  if (_internal_has_applid()) {
    // required string ApplID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());
  }

  if (_internal_has_submittingpbuid()) {
    // required string SubmittingPBUID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());
  }

  if (_internal_has_securityid()) {
    // required string SecurityID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  if (_internal_has_securityidsource()) {
    // required string SecurityIDSource = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());
  }

  if (_internal_has_clearingfirm()) {
    // required string ClearingFirm = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());
  }

  if (_internal_has_transacttime()) {
    // required string TransactTime = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  if (_internal_has_userinfo()) {
    // required string UserInfo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());
  }

  if (_internal_has_clordid()) {
    // required string ClOrdID = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());
  }

  if (_internal_has_accountid()) {
    // required string AccountID = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountid());
  }

  if (_internal_has_branchid()) {
    // required string BranchID = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branchid());
  }

  if (_internal_has_orderrestrictions()) {
    // required string OrderRestrictions = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderrestrictions());
  }

  if (_internal_has_side()) {
    // required string Side = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());
  }

  if (_internal_has_ordtype()) {
    // required string OrdType = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordtype());
  }

  if (_internal_has_ownertype()) {
    // required uint32 OwnerType = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());
  }

  if (_internal_has_orderqty()) {
    // required uint32 OrderQty = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_orderqty());
  }

  if (_internal_has_price()) {
    // required float Price = 16;
    total_size += 2 + 4;
  }

  return total_size;
}
size_t New_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.New_Order)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0001dfff) ^ 0x0001dfff) == 0) {  // All required fields are present.
    // required string ApplID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());

    // required string SubmittingPBUID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());

    // required string SecurityID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());

    // required string SecurityIDSource = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());

    // required string ClearingFirm = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());

    // required string TransactTime = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());

    // required string UserInfo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());

    // required string ClOrdID = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());

    // required string AccountID = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountid());

    // required string BranchID = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branchid());

    // required string OrderRestrictions = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderrestrictions());

    // required string Side = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());

    // required string OrdType = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordtype());

    // required uint32 OwnerType = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());

    // required uint32 OrderQty = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_orderqty());

    // required float Price = 16;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GatewayProto.Extend_Fields ExtendFields = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00002000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extendfields_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void New_Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.New_Order)
  GOOGLE_DCHECK_NE(&from, this);
  const New_Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<New_Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.New_Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.New_Order)
    MergeFrom(*source);
  }
}

void New_Order::MergeFrom(const New_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.New_Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_applid(from._internal_applid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_submittingpbuid(from._internal_submittingpbuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_securityid(from._internal_securityid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_securityidsource(from._internal_securityidsource());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_clearingfirm(from._internal_clearingfirm());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_transacttime(from._internal_transacttime());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_userinfo(from._internal_userinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_clordid(from._internal_clordid());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_accountid(from._internal_accountid());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_branchid(from._internal_branchid());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_orderrestrictions(from._internal_orderrestrictions());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_side(from._internal_side());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_ordtype(from._internal_ordtype());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_extendfields()->::GatewayProto::Extend_Fields::MergeFrom(from._internal_extendfields());
    }
    if (cached_has_bits & 0x00004000u) {
      ownertype_ = from.ownertype_;
    }
    if (cached_has_bits & 0x00008000u) {
      orderqty_ = from.orderqty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_price(from._internal_price());
  }
}

void New_Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.New_Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void New_Order::CopyFrom(const New_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.New_Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool New_Order::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void New_Order::InternalSwap(New_Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applid_.Swap(&other->applid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submittingpbuid_.Swap(&other->submittingpbuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityidsource_.Swap(&other->securityidsource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clearingfirm_.Swap(&other->clearingfirm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transacttime_.Swap(&other->transacttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userinfo_.Swap(&other->userinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clordid_.Swap(&other->clordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  accountid_.Swap(&other->accountid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  branchid_.Swap(&other->branchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderrestrictions_.Swap(&other->orderrestrictions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  side_.Swap(&other->side_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordtype_.Swap(&other->ordtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(New_Order, price_)
      + sizeof(New_Order::price_)
      - PROTOBUF_FIELD_OFFSET(New_Order, extendfields_)>(
          reinterpret_cast<char*>(&extendfields_),
          reinterpret_cast<char*>(&other->extendfields_));
}

::PROTOBUF_NAMESPACE_ID::Metadata New_Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Executive_Report::InitAsDefaultInstance() {
  ::GatewayProto::_Executive_Report_default_instance_._instance.get_mutable()->extendfields_ = const_cast< ::GatewayProto::Extend_Fields*>(
      ::GatewayProto::Extend_Fields::internal_default_instance());
}
class Executive_Report::_Internal {
 public:
  using HasBits = decltype(std::declval<Executive_Report>()._has_bits_);
  static void set_has_partitionno(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_reportindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_applid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reportingpbuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_submittingpbuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_securityid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_securityidsource(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ownertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_clearingfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transacttime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_clordid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_origclordid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_execid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_exectype(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ordstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ordrejreason(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_leavesqty(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_cumqty(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ordtype(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_orderqty(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_branchid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_orderrestrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::GatewayProto::Extend_Fields& extendfields(const Executive_Report* msg);
  static void set_has_extendfields(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0fefffff) ^ 0x0fefffff) != 0;
  }
};

const ::GatewayProto::Extend_Fields&
Executive_Report::_Internal::extendfields(const Executive_Report* msg) {
  return *msg->extendfields_;
}
Executive_Report::Executive_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Executive_Report)
}
Executive_Report::Executive_Report(const Executive_Report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_applid()) {
    applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_applid(),
      GetArena());
  }
  reportingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reportingpbuid()) {
    reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reportingpbuid(),
      GetArena());
  }
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_submittingpbuid()) {
    submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_submittingpbuid(),
      GetArena());
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityid()) {
    securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityid(),
      GetArena());
  }
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityidsource()) {
    securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityidsource(),
      GetArena());
  }
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clearingfirm()) {
    clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clearingfirm(),
      GetArena());
  }
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transacttime()) {
    transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transacttime(),
      GetArena());
  }
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userinfo()) {
    userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userinfo(),
      GetArena());
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderid()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clordid()) {
    clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clordid(),
      GetArena());
  }
  origclordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_origclordid()) {
    origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_origclordid(),
      GetArena());
  }
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_execid()) {
    execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_execid(),
      GetArena());
  }
  exectype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exectype()) {
    exectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exectype(),
      GetArena());
  }
  ordstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ordstatus()) {
    ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordstatus(),
      GetArena());
  }
  ordrejreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ordrejreason()) {
    ordrejreason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordrejreason(),
      GetArena());
  }
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_side()) {
    side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_side(),
      GetArena());
  }
  ordtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ordtype()) {
    ordtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordtype(),
      GetArena());
  }
  accountid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_accountid()) {
    accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_accountid(),
      GetArena());
  }
  branchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branchid()) {
    branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_branchid(),
      GetArena());
  }
  orderrestrictions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderrestrictions()) {
    orderrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderrestrictions(),
      GetArena());
  }
  if (from._internal_has_extendfields()) {
    extendfields_ = new ::GatewayProto::Extend_Fields(*from.extendfields_);
  } else {
    extendfields_ = nullptr;
  }
  ::memcpy(&partitionno_, &from.partitionno_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&partitionno_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Executive_Report)
}

void Executive_Report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Executive_Report_Gateway_2eproto.base);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reportingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origclordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exectype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordrejreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderrestrictions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extendfields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&extendfields_)) + sizeof(price_));
}

Executive_Report::~Executive_Report() {
  // @@protoc_insertion_point(destructor:GatewayProto.Executive_Report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Executive_Report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  applid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reportingpbuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origclordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exectype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordrejreason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderrestrictions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete extendfields_;
}

void Executive_Report::ArenaDtor(void* object) {
  Executive_Report* _this = reinterpret_cast< Executive_Report* >(object);
  (void)_this;
}
void Executive_Report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Executive_Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Executive_Report& Executive_Report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Executive_Report_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Executive_Report::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Executive_Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      applid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reportingpbuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      submittingpbuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      securityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      securityidsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      clearingfirm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      transacttime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      userinfo_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      orderid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      clordid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      origclordid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      execid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      exectype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      ordstatus_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      ordrejreason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      side_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      ordtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      accountid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      branchid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      orderrestrictions_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(extendfields_ != nullptr);
      extendfields_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&partitionno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ownertype_) -
        reinterpret_cast<char*>(&partitionno_)) + sizeof(ownertype_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&leavesqty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&leavesqty_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Executive_Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PartitionNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_partitionno(&has_bits);
          partitionno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ReportIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reportindex(&has_bits);
          reportindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ApplID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_applid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.ApplID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ReportingPBUID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reportingpbuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.ReportingPBUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SubmittingPBUID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_submittingpbuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.SubmittingPBUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_securityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.SecurityID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityIDSource = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_securityidsource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.SecurityIDSource");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 OwnerType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ownertype(&has_bits);
          ownertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClearingFirm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_clearingfirm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.ClearingFirm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string TransactTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.TransactTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string UserInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_userinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.UserInfo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrderID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.OrderID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClOrdID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_clordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.ClOrdID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrigClOrdID = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_origclordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.OrigClOrdID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ExecID = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_execid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.ExecID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ExecType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_exectype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.ExecType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrdStatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_ordstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.OrdStatus");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrdRejReason = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_ordrejreason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.OrdRejReason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 LeavesQty = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_leavesqty(&has_bits);
          leavesqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 CumQty = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_cumqty(&has_bits);
          cumqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Side = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_side();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.Side");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrdType = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_ordtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.OrdType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 OrderQty = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_orderqty(&has_bits);
          orderqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float Price = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string AccountID = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_accountid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.AccountID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string BranchID = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_branchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.BranchID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrderRestrictions = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_orderrestrictions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Executive_Report.OrderRestrictions");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Extend_Fields ExtendFields = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendfields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Executive_Report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Executive_Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PartitionNo = 2;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_partitionno(), target);
  }

  // required uint32 ReportIndex = 3;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reportindex(), target);
  }

  // required string ApplID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applid().data(), static_cast<int>(this->_internal_applid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.ApplID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_applid(), target);
  }

  // required string ReportingPBUID = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reportingpbuid().data(), static_cast<int>(this->_internal_reportingpbuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.ReportingPBUID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reportingpbuid(), target);
  }

  // required string SubmittingPBUID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_submittingpbuid().data(), static_cast<int>(this->_internal_submittingpbuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.SubmittingPBUID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_submittingpbuid(), target);
  }

  // required string SecurityID = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.SecurityID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_securityid(), target);
  }

  // required string SecurityIDSource = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityidsource().data(), static_cast<int>(this->_internal_securityidsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.SecurityIDSource");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_securityidsource(), target);
  }

  // required uint32 OwnerType = 9;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ownertype(), target);
  }

  // required string ClearingFirm = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clearingfirm().data(), static_cast<int>(this->_internal_clearingfirm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.ClearingFirm");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_clearingfirm(), target);
  }

  // required string TransactTime = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.TransactTime");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_transacttime(), target);
  }

  // required string UserInfo = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userinfo().data(), static_cast<int>(this->_internal_userinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.UserInfo");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_userinfo(), target);
  }

  // required string OrderID = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.OrderID");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_orderid(), target);
  }

  // required string ClOrdID = 14;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clordid().data(), static_cast<int>(this->_internal_clordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.ClOrdID");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_clordid(), target);
  }

  // required string OrigClOrdID = 15;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_origclordid().data(), static_cast<int>(this->_internal_origclordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.OrigClOrdID");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_origclordid(), target);
  }

  // required string ExecID = 16;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_execid().data(), static_cast<int>(this->_internal_execid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.ExecID");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_execid(), target);
  }

  // required string ExecType = 17;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exectype().data(), static_cast<int>(this->_internal_exectype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.ExecType");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_exectype(), target);
  }

  // required string OrdStatus = 18;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ordstatus().data(), static_cast<int>(this->_internal_ordstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.OrdStatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_ordstatus(), target);
  }

  // required string OrdRejReason = 19;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ordrejreason().data(), static_cast<int>(this->_internal_ordrejreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.OrdRejReason");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_ordrejreason(), target);
  }

  // required int32 LeavesQty = 20;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_leavesqty(), target);
  }

  // required int32 CumQty = 21;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_cumqty(), target);
  }

  // required string Side = 22;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_side().data(), static_cast<int>(this->_internal_side().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.Side");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_side(), target);
  }

  // required string OrdType = 23;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ordtype().data(), static_cast<int>(this->_internal_ordtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.OrdType");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_ordtype(), target);
  }

  // required uint32 OrderQty = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_orderqty(), target);
  }

  // required float Price = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_price(), target);
  }

  // required string AccountID = 26;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accountid().data(), static_cast<int>(this->_internal_accountid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.AccountID");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_accountid(), target);
  }

  // required string BranchID = 27;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branchid().data(), static_cast<int>(this->_internal_branchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.BranchID");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_branchid(), target);
  }

  // required string OrderRestrictions = 28;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orderrestrictions().data(), static_cast<int>(this->_internal_orderrestrictions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Executive_Report.OrderRestrictions");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_orderrestrictions(), target);
  }

  // optional .GatewayProto.Extend_Fields ExtendFields = 29;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::extendfields(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Executive_Report)
  return target;
}

size_t Executive_Report::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GatewayProto.Executive_Report)
  size_t total_size = 0;

  if (_internal_has_applid()) {
    // required string ApplID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());
  }

  if (_internal_has_reportingpbuid()) {
    // required string ReportingPBUID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reportingpbuid());
  }

  if (_internal_has_submittingpbuid()) {
    // required string SubmittingPBUID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());
  }

  if (_internal_has_securityid()) {
    // required string SecurityID = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  if (_internal_has_securityidsource()) {
    // required string SecurityIDSource = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());
  }

  if (_internal_has_clearingfirm()) {
    // required string ClearingFirm = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());
  }

  if (_internal_has_transacttime()) {
    // required string TransactTime = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  if (_internal_has_userinfo()) {
    // required string UserInfo = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());
  }

  if (_internal_has_orderid()) {
    // required string OrderID = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (_internal_has_clordid()) {
    // required string ClOrdID = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());
  }

  if (_internal_has_origclordid()) {
    // required string OrigClOrdID = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origclordid());
  }

  if (_internal_has_execid()) {
    // required string ExecID = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execid());
  }

  if (_internal_has_exectype()) {
    // required string ExecType = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exectype());
  }

  if (_internal_has_ordstatus()) {
    // required string OrdStatus = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordstatus());
  }

  if (_internal_has_ordrejreason()) {
    // required string OrdRejReason = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordrejreason());
  }

  if (_internal_has_side()) {
    // required string Side = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());
  }

  if (_internal_has_ordtype()) {
    // required string OrdType = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordtype());
  }

  if (_internal_has_accountid()) {
    // required string AccountID = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountid());
  }

  if (_internal_has_branchid()) {
    // required string BranchID = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branchid());
  }

  if (_internal_has_orderrestrictions()) {
    // required string OrderRestrictions = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderrestrictions());
  }

  if (_internal_has_partitionno()) {
    // required int32 PartitionNo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partitionno());
  }

  if (_internal_has_reportindex()) {
    // required uint32 ReportIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportindex());
  }

  if (_internal_has_ownertype()) {
    // required uint32 OwnerType = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());
  }

  if (_internal_has_leavesqty()) {
    // required int32 LeavesQty = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leavesqty());
  }

  if (_internal_has_cumqty()) {
    // required int32 CumQty = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cumqty());
  }

  if (_internal_has_orderqty()) {
    // required uint32 OrderQty = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_orderqty());
  }

  if (_internal_has_price()) {
    // required float Price = 25;
    total_size += 2 + 4;
  }

  return total_size;
}
size_t Executive_Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Executive_Report)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0fefffff) ^ 0x0fefffff) == 0) {  // All required fields are present.
    // required string ApplID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());

    // required string ReportingPBUID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reportingpbuid());

    // required string SubmittingPBUID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());

    // required string SecurityID = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());

    // required string SecurityIDSource = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());

    // required string ClearingFirm = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());

    // required string TransactTime = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());

    // required string UserInfo = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());

    // required string OrderID = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());

    // required string ClOrdID = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());

    // required string OrigClOrdID = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origclordid());

    // required string ExecID = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execid());

    // required string ExecType = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exectype());

    // required string OrdStatus = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordstatus());

    // required string OrdRejReason = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordrejreason());

    // required string Side = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());

    // required string OrdType = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordtype());

    // required string AccountID = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountid());

    // required string BranchID = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branchid());

    // required string OrderRestrictions = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderrestrictions());

    // required int32 PartitionNo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partitionno());

    // required uint32 ReportIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportindex());

    // required uint32 OwnerType = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());

    // required int32 LeavesQty = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leavesqty());

    // required int32 CumQty = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cumqty());

    // required uint32 OrderQty = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_orderqty());

    // required float Price = 25;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GatewayProto.Extend_Fields ExtendFields = 29;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00100000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extendfields_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Executive_Report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Executive_Report)
  GOOGLE_DCHECK_NE(&from, this);
  const Executive_Report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Executive_Report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Executive_Report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Executive_Report)
    MergeFrom(*source);
  }
}

void Executive_Report::MergeFrom(const Executive_Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Executive_Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_applid(from._internal_applid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reportingpbuid(from._internal_reportingpbuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_submittingpbuid(from._internal_submittingpbuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_securityid(from._internal_securityid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_securityidsource(from._internal_securityidsource());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_clearingfirm(from._internal_clearingfirm());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_transacttime(from._internal_transacttime());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_userinfo(from._internal_userinfo());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_orderid(from._internal_orderid());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_clordid(from._internal_clordid());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_origclordid(from._internal_origclordid());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_execid(from._internal_execid());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_exectype(from._internal_exectype());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_ordstatus(from._internal_ordstatus());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_ordrejreason(from._internal_ordrejreason());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_side(from._internal_side());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_ordtype(from._internal_ordtype());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_accountid(from._internal_accountid());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_branchid(from._internal_branchid());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_orderrestrictions(from._internal_orderrestrictions());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_extendfields()->::GatewayProto::Extend_Fields::MergeFrom(from._internal_extendfields());
    }
    if (cached_has_bits & 0x00200000u) {
      partitionno_ = from.partitionno_;
    }
    if (cached_has_bits & 0x00400000u) {
      reportindex_ = from.reportindex_;
    }
    if (cached_has_bits & 0x00800000u) {
      ownertype_ = from.ownertype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      leavesqty_ = from.leavesqty_;
    }
    if (cached_has_bits & 0x02000000u) {
      cumqty_ = from.cumqty_;
    }
    if (cached_has_bits & 0x04000000u) {
      orderqty_ = from.orderqty_;
    }
    if (cached_has_bits & 0x08000000u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Executive_Report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Executive_Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Executive_Report::CopyFrom(const Executive_Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Executive_Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Executive_Report::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Executive_Report::InternalSwap(Executive_Report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applid_.Swap(&other->applid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reportingpbuid_.Swap(&other->reportingpbuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submittingpbuid_.Swap(&other->submittingpbuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityidsource_.Swap(&other->securityidsource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clearingfirm_.Swap(&other->clearingfirm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transacttime_.Swap(&other->transacttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userinfo_.Swap(&other->userinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clordid_.Swap(&other->clordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  origclordid_.Swap(&other->origclordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  execid_.Swap(&other->execid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exectype_.Swap(&other->exectype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordstatus_.Swap(&other->ordstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordrejreason_.Swap(&other->ordrejreason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  side_.Swap(&other->side_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordtype_.Swap(&other->ordtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  accountid_.Swap(&other->accountid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  branchid_.Swap(&other->branchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderrestrictions_.Swap(&other->orderrestrictions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Executive_Report, price_)
      + sizeof(Executive_Report::price_)
      - PROTOBUF_FIELD_OFFSET(Executive_Report, extendfields_)>(
          reinterpret_cast<char*>(&extendfields_),
          reinterpret_cast<char*>(&other->extendfields_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Executive_Report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction_Report::InitAsDefaultInstance() {
  ::GatewayProto::_Transaction_Report_default_instance_._instance.get_mutable()->extendfields_ = const_cast< ::GatewayProto::Extend_Fields*>(
      ::GatewayProto::Extend_Fields::internal_default_instance());
}
class Transaction_Report::_Internal {
 public:
  using HasBits = decltype(std::declval<Transaction_Report>()._has_bits_);
  static void set_has_partitionno(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_reportindex(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_applid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reportingpbuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_submittingpbuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_securityid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_securityidsource(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ownertype(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_clearingfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transacttime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_clordid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_execid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_exectype(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ordstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lastpx(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_lastqty(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_leavesqty(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_cumqty(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_branchid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::GatewayProto::Extend_Fields& extendfields(const Transaction_Report* msg);
  static void set_has_extendfields(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00feffff) ^ 0x00feffff) != 0;
  }
};

const ::GatewayProto::Extend_Fields&
Transaction_Report::_Internal::extendfields(const Transaction_Report* msg) {
  return *msg->extendfields_;
}
Transaction_Report::Transaction_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Transaction_Report)
}
Transaction_Report::Transaction_Report(const Transaction_Report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_applid()) {
    applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_applid(),
      GetArena());
  }
  reportingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reportingpbuid()) {
    reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reportingpbuid(),
      GetArena());
  }
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_submittingpbuid()) {
    submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_submittingpbuid(),
      GetArena());
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityid()) {
    securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityid(),
      GetArena());
  }
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityidsource()) {
    securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityidsource(),
      GetArena());
  }
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clearingfirm()) {
    clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clearingfirm(),
      GetArena());
  }
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transacttime()) {
    transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transacttime(),
      GetArena());
  }
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userinfo()) {
    userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userinfo(),
      GetArena());
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderid()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clordid()) {
    clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clordid(),
      GetArena());
  }
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_execid()) {
    execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_execid(),
      GetArena());
  }
  exectype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exectype()) {
    exectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exectype(),
      GetArena());
  }
  ordstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ordstatus()) {
    ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordstatus(),
      GetArena());
  }
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_side()) {
    side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_side(),
      GetArena());
  }
  accountid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_accountid()) {
    accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_accountid(),
      GetArena());
  }
  branchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_branchid()) {
    branchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_branchid(),
      GetArena());
  }
  if (from._internal_has_extendfields()) {
    extendfields_ = new ::GatewayProto::Extend_Fields(*from.extendfields_);
  } else {
    extendfields_ = nullptr;
  }
  ::memcpy(&partitionno_, &from.partitionno_,
    static_cast<size_t>(reinterpret_cast<char*>(&cumqty_) -
    reinterpret_cast<char*>(&partitionno_)) + sizeof(cumqty_));
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Transaction_Report)
}

void Transaction_Report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Report_Gateway_2eproto.base);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reportingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exectype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extendfields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cumqty_) -
      reinterpret_cast<char*>(&extendfields_)) + sizeof(cumqty_));
}

Transaction_Report::~Transaction_Report() {
  // @@protoc_insertion_point(destructor:GatewayProto.Transaction_Report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  applid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reportingpbuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exectype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete extendfields_;
}

void Transaction_Report::ArenaDtor(void* object) {
  Transaction_Report* _this = reinterpret_cast< Transaction_Report* >(object);
  (void)_this;
}
void Transaction_Report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_Report& Transaction_Report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Report_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Transaction_Report::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Transaction_Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      applid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reportingpbuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      submittingpbuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      securityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      securityidsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      clearingfirm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      transacttime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      userinfo_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      orderid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      clordid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      execid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      exectype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      ordstatus_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      side_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      accountid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      branchid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(extendfields_ != nullptr);
    extendfields_->Clear();
  }
  if (cached_has_bits & 0x00fe0000u) {
    ::memset(&partitionno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cumqty_) -
        reinterpret_cast<char*>(&partitionno_)) + sizeof(cumqty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PartitionNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_partitionno(&has_bits);
          partitionno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ReportIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reportindex(&has_bits);
          reportindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ApplID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_applid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.ApplID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ReportingPBUID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reportingpbuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.ReportingPBUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SubmittingPBUID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_submittingpbuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.SubmittingPBUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_securityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.SecurityID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityIDSource = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_securityidsource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.SecurityIDSource");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 OwnerType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ownertype(&has_bits);
          ownertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClearingFirm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_clearingfirm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.ClearingFirm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string TransactTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.TransactTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string UserInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_userinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.UserInfo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrderID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.OrderID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClOrdID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_clordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.ClOrdID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ExecID = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_execid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.ExecID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ExecType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_exectype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.ExecType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrdStatus = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_ordstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.OrdStatus");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float LastPx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_lastpx(&has_bits);
          lastpx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 LastQty = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_lastqty(&has_bits);
          lastqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 LeavesQty = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_leavesqty(&has_bits);
          leavesqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 CumQty = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_cumqty(&has_bits);
          cumqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Side = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_side();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.Side");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string AccountID = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_accountid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.AccountID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string BranchID = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_branchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Transaction_Report.BranchID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Extend_Fields ExtendFields = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendfields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Transaction_Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PartitionNo = 2;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_partitionno(), target);
  }

  // required uint32 ReportIndex = 3;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reportindex(), target);
  }

  // required string ApplID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applid().data(), static_cast<int>(this->_internal_applid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.ApplID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_applid(), target);
  }

  // required string ReportingPBUID = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reportingpbuid().data(), static_cast<int>(this->_internal_reportingpbuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.ReportingPBUID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reportingpbuid(), target);
  }

  // required string SubmittingPBUID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_submittingpbuid().data(), static_cast<int>(this->_internal_submittingpbuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.SubmittingPBUID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_submittingpbuid(), target);
  }

  // required string SecurityID = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.SecurityID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_securityid(), target);
  }

  // required string SecurityIDSource = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityidsource().data(), static_cast<int>(this->_internal_securityidsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.SecurityIDSource");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_securityidsource(), target);
  }

  // required uint32 OwnerType = 9;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ownertype(), target);
  }

  // required string ClearingFirm = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clearingfirm().data(), static_cast<int>(this->_internal_clearingfirm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.ClearingFirm");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_clearingfirm(), target);
  }

  // required string TransactTime = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.TransactTime");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_transacttime(), target);
  }

  // required string UserInfo = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userinfo().data(), static_cast<int>(this->_internal_userinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.UserInfo");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_userinfo(), target);
  }

  // required string OrderID = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.OrderID");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_orderid(), target);
  }

  // required string ClOrdID = 14;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clordid().data(), static_cast<int>(this->_internal_clordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.ClOrdID");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_clordid(), target);
  }

  // required string ExecID = 15;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_execid().data(), static_cast<int>(this->_internal_execid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.ExecID");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_execid(), target);
  }

  // required string ExecType = 16;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exectype().data(), static_cast<int>(this->_internal_exectype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.ExecType");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_exectype(), target);
  }

  // required string OrdStatus = 17;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ordstatus().data(), static_cast<int>(this->_internal_ordstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.OrdStatus");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_ordstatus(), target);
  }

  // required float LastPx = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_lastpx(), target);
  }

  // required int32 LastQty = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_lastqty(), target);
  }

  // required int32 LeavesQty = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_leavesqty(), target);
  }

  // required int32 CumQty = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_cumqty(), target);
  }

  // required string Side = 22;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_side().data(), static_cast<int>(this->_internal_side().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.Side");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_side(), target);
  }

  // required string AccountID = 23;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accountid().data(), static_cast<int>(this->_internal_accountid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.AccountID");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_accountid(), target);
  }

  // required string BranchID = 24;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_branchid().data(), static_cast<int>(this->_internal_branchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Transaction_Report.BranchID");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_branchid(), target);
  }

  // optional .GatewayProto.Extend_Fields ExtendFields = 25;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::extendfields(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Transaction_Report)
  return target;
}

size_t Transaction_Report::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GatewayProto.Transaction_Report)
  size_t total_size = 0;

  if (_internal_has_applid()) {
    // required string ApplID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());
  }

  if (_internal_has_reportingpbuid()) {
    // required string ReportingPBUID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reportingpbuid());
  }

  if (_internal_has_submittingpbuid()) {
    // required string SubmittingPBUID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());
  }

  if (_internal_has_securityid()) {
    // required string SecurityID = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  if (_internal_has_securityidsource()) {
    // required string SecurityIDSource = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());
  }

  if (_internal_has_clearingfirm()) {
    // required string ClearingFirm = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());
  }

  if (_internal_has_transacttime()) {
    // required string TransactTime = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  if (_internal_has_userinfo()) {
    // required string UserInfo = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());
  }

  if (_internal_has_orderid()) {
    // required string OrderID = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (_internal_has_clordid()) {
    // required string ClOrdID = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());
  }

  if (_internal_has_execid()) {
    // required string ExecID = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execid());
  }

  if (_internal_has_exectype()) {
    // required string ExecType = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exectype());
  }

  if (_internal_has_ordstatus()) {
    // required string OrdStatus = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordstatus());
  }

  if (_internal_has_side()) {
    // required string Side = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());
  }

  if (_internal_has_accountid()) {
    // required string AccountID = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountid());
  }

  if (_internal_has_branchid()) {
    // required string BranchID = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branchid());
  }

  if (_internal_has_partitionno()) {
    // required int32 PartitionNo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partitionno());
  }

  if (_internal_has_reportindex()) {
    // required uint32 ReportIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportindex());
  }

  if (_internal_has_ownertype()) {
    // required uint32 OwnerType = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());
  }

  if (_internal_has_lastpx()) {
    // required float LastPx = 18;
    total_size += 2 + 4;
  }

  if (_internal_has_lastqty()) {
    // required int32 LastQty = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastqty());
  }

  if (_internal_has_leavesqty()) {
    // required int32 LeavesQty = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leavesqty());
  }

  if (_internal_has_cumqty()) {
    // required int32 CumQty = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cumqty());
  }

  return total_size;
}
size_t Transaction_Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Transaction_Report)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00feffff) ^ 0x00feffff) == 0) {  // All required fields are present.
    // required string ApplID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());

    // required string ReportingPBUID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reportingpbuid());

    // required string SubmittingPBUID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());

    // required string SecurityID = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());

    // required string SecurityIDSource = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());

    // required string ClearingFirm = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());

    // required string TransactTime = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());

    // required string UserInfo = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());

    // required string OrderID = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());

    // required string ClOrdID = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());

    // required string ExecID = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execid());

    // required string ExecType = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exectype());

    // required string OrdStatus = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordstatus());

    // required string Side = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());

    // required string AccountID = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountid());

    // required string BranchID = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branchid());

    // required int32 PartitionNo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partitionno());

    // required uint32 ReportIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportindex());

    // required uint32 OwnerType = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());

    // required float LastPx = 18;
    total_size += 2 + 4;

    // required int32 LastQty = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lastqty());

    // required int32 LeavesQty = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leavesqty());

    // required int32 CumQty = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cumqty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .GatewayProto.Extend_Fields ExtendFields = 25;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extendfields_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Transaction_Report)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Transaction_Report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Transaction_Report)
    MergeFrom(*source);
  }
}

void Transaction_Report::MergeFrom(const Transaction_Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Transaction_Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_applid(from._internal_applid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reportingpbuid(from._internal_reportingpbuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_submittingpbuid(from._internal_submittingpbuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_securityid(from._internal_securityid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_securityidsource(from._internal_securityidsource());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_clearingfirm(from._internal_clearingfirm());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_transacttime(from._internal_transacttime());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_userinfo(from._internal_userinfo());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_orderid(from._internal_orderid());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_clordid(from._internal_clordid());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_execid(from._internal_execid());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_exectype(from._internal_exectype());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_ordstatus(from._internal_ordstatus());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_side(from._internal_side());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_accountid(from._internal_accountid());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_branchid(from._internal_branchid());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_extendfields()->::GatewayProto::Extend_Fields::MergeFrom(from._internal_extendfields());
    }
    if (cached_has_bits & 0x00020000u) {
      partitionno_ = from.partitionno_;
    }
    if (cached_has_bits & 0x00040000u) {
      reportindex_ = from.reportindex_;
    }
    if (cached_has_bits & 0x00080000u) {
      ownertype_ = from.ownertype_;
    }
    if (cached_has_bits & 0x00100000u) {
      lastpx_ = from.lastpx_;
    }
    if (cached_has_bits & 0x00200000u) {
      lastqty_ = from.lastqty_;
    }
    if (cached_has_bits & 0x00400000u) {
      leavesqty_ = from.leavesqty_;
    }
    if (cached_has_bits & 0x00800000u) {
      cumqty_ = from.cumqty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transaction_Report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Transaction_Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Report::CopyFrom(const Transaction_Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Transaction_Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Report::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Transaction_Report::InternalSwap(Transaction_Report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applid_.Swap(&other->applid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reportingpbuid_.Swap(&other->reportingpbuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submittingpbuid_.Swap(&other->submittingpbuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityidsource_.Swap(&other->securityidsource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clearingfirm_.Swap(&other->clearingfirm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transacttime_.Swap(&other->transacttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userinfo_.Swap(&other->userinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clordid_.Swap(&other->clordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  execid_.Swap(&other->execid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exectype_.Swap(&other->exectype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordstatus_.Swap(&other->ordstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  side_.Swap(&other->side_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  accountid_.Swap(&other->accountid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  branchid_.Swap(&other->branchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_Report, cumqty_)
      + sizeof(Transaction_Report::cumqty_)
      - PROTOBUF_FIELD_OFFSET(Transaction_Report, extendfields_)>(
          reinterpret_cast<char*>(&extendfields_),
          reinterpret_cast<char*>(&other->extendfields_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cancel_Order::InitAsDefaultInstance() {
}
class Cancel_Order::_Internal {
 public:
  using HasBits = decltype(std::declval<Cancel_Order>()._has_bits_);
  static void set_has_applid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_submittingpbuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_securityid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_securityidsource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ownertype(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_clearingfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transacttime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_clordid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_origclordid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_orderqty(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001fff) ^ 0x00001fff) != 0;
  }
};

Cancel_Order::Cancel_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Cancel_Order)
}
Cancel_Order::Cancel_Order(const Cancel_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_applid()) {
    applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_applid(),
      GetArena());
  }
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_submittingpbuid()) {
    submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_submittingpbuid(),
      GetArena());
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityid()) {
    securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityid(),
      GetArena());
  }
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityidsource()) {
    securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityidsource(),
      GetArena());
  }
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clearingfirm()) {
    clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clearingfirm(),
      GetArena());
  }
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transacttime()) {
    transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transacttime(),
      GetArena());
  }
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userinfo()) {
    userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userinfo(),
      GetArena());
  }
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clordid()) {
    clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clordid(),
      GetArena());
  }
  origclordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_origclordid()) {
    origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_origclordid(),
      GetArena());
  }
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_side()) {
    side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_side(),
      GetArena());
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderid()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  ::memcpy(&ownertype_, &from.ownertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderqty_) -
    reinterpret_cast<char*>(&ownertype_)) + sizeof(orderqty_));
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Cancel_Order)
}

void Cancel_Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cancel_Order_Gateway_2eproto.base);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origclordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ownertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderqty_) -
      reinterpret_cast<char*>(&ownertype_)) + sizeof(orderqty_));
}

Cancel_Order::~Cancel_Order() {
  // @@protoc_insertion_point(destructor:GatewayProto.Cancel_Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cancel_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  applid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origclordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Cancel_Order::ArenaDtor(void* object) {
  Cancel_Order* _this = reinterpret_cast< Cancel_Order* >(object);
  (void)_this;
}
void Cancel_Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cancel_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cancel_Order& Cancel_Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cancel_Order_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Cancel_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Cancel_Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      applid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      submittingpbuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      securityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      securityidsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      clearingfirm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      transacttime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      userinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      clordid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      origclordid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      side_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      orderid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001800u) {
    ::memset(&ownertype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orderqty_) -
        reinterpret_cast<char*>(&ownertype_)) + sizeof(orderqty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cancel_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string ApplID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_applid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.ApplID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SubmittingPBUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_submittingpbuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.SubmittingPBUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_securityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.SecurityID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityIDSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_securityidsource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.SecurityIDSource");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 OwnerType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ownertype(&has_bits);
          ownertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClearingFirm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_clearingfirm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.ClearingFirm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string TransactTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.TransactTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string UserInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_userinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.UserInfo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClOrdID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_clordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.ClOrdID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrigClOrdID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_origclordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.OrigClOrdID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Side = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_side();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.Side");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrderID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order.OrderID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 OrderQty = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_orderqty(&has_bits);
          orderqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cancel_Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Cancel_Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ApplID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applid().data(), static_cast<int>(this->_internal_applid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.ApplID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_applid(), target);
  }

  // required string SubmittingPBUID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_submittingpbuid().data(), static_cast<int>(this->_internal_submittingpbuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.SubmittingPBUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_submittingpbuid(), target);
  }

  // required string SecurityID = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.SecurityID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_securityid(), target);
  }

  // required string SecurityIDSource = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityidsource().data(), static_cast<int>(this->_internal_securityidsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.SecurityIDSource");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_securityidsource(), target);
  }

  // required uint32 OwnerType = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ownertype(), target);
  }

  // required string ClearingFirm = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clearingfirm().data(), static_cast<int>(this->_internal_clearingfirm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.ClearingFirm");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_clearingfirm(), target);
  }

  // required string TransactTime = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.TransactTime");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_transacttime(), target);
  }

  // required string UserInfo = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userinfo().data(), static_cast<int>(this->_internal_userinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.UserInfo");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_userinfo(), target);
  }

  // required string ClOrdID = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clordid().data(), static_cast<int>(this->_internal_clordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.ClOrdID");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_clordid(), target);
  }

  // required string OrigClOrdID = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_origclordid().data(), static_cast<int>(this->_internal_origclordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.OrigClOrdID");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_origclordid(), target);
  }

  // required string Side = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_side().data(), static_cast<int>(this->_internal_side().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.Side");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_side(), target);
  }

  // required string OrderID = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order.OrderID");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_orderid(), target);
  }

  // required uint32 OrderQty = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_orderqty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Cancel_Order)
  return target;
}

size_t Cancel_Order::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GatewayProto.Cancel_Order)
  size_t total_size = 0;

  if (_internal_has_applid()) {
    // required string ApplID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());
  }

  if (_internal_has_submittingpbuid()) {
    // required string SubmittingPBUID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());
  }

  if (_internal_has_securityid()) {
    // required string SecurityID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  if (_internal_has_securityidsource()) {
    // required string SecurityIDSource = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());
  }

  if (_internal_has_clearingfirm()) {
    // required string ClearingFirm = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());
  }

  if (_internal_has_transacttime()) {
    // required string TransactTime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  if (_internal_has_userinfo()) {
    // required string UserInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());
  }

  if (_internal_has_clordid()) {
    // required string ClOrdID = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());
  }

  if (_internal_has_origclordid()) {
    // required string OrigClOrdID = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origclordid());
  }

  if (_internal_has_side()) {
    // required string Side = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());
  }

  if (_internal_has_orderid()) {
    // required string OrderID = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (_internal_has_ownertype()) {
    // required uint32 OwnerType = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());
  }

  if (_internal_has_orderqty()) {
    // required uint32 OrderQty = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_orderqty());
  }

  return total_size;
}
size_t Cancel_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Cancel_Order)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required string ApplID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());

    // required string SubmittingPBUID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());

    // required string SecurityID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());

    // required string SecurityIDSource = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());

    // required string ClearingFirm = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());

    // required string TransactTime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());

    // required string UserInfo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());

    // required string ClOrdID = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());

    // required string OrigClOrdID = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origclordid());

    // required string Side = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());

    // required string OrderID = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());

    // required uint32 OwnerType = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());

    // required uint32 OrderQty = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_orderqty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cancel_Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Cancel_Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Cancel_Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cancel_Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Cancel_Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Cancel_Order)
    MergeFrom(*source);
  }
}

void Cancel_Order::MergeFrom(const Cancel_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Cancel_Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_applid(from._internal_applid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_submittingpbuid(from._internal_submittingpbuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_securityid(from._internal_securityid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_securityidsource(from._internal_securityidsource());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_clearingfirm(from._internal_clearingfirm());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_transacttime(from._internal_transacttime());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_userinfo(from._internal_userinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_clordid(from._internal_clordid());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_origclordid(from._internal_origclordid());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_side(from._internal_side());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_orderid(from._internal_orderid());
    }
    if (cached_has_bits & 0x00000800u) {
      ownertype_ = from.ownertype_;
    }
    if (cached_has_bits & 0x00001000u) {
      orderqty_ = from.orderqty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Cancel_Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Cancel_Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cancel_Order::CopyFrom(const Cancel_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Cancel_Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cancel_Order::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Cancel_Order::InternalSwap(Cancel_Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applid_.Swap(&other->applid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submittingpbuid_.Swap(&other->submittingpbuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityidsource_.Swap(&other->securityidsource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clearingfirm_.Swap(&other->clearingfirm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transacttime_.Swap(&other->transacttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userinfo_.Swap(&other->userinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clordid_.Swap(&other->clordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  origclordid_.Swap(&other->origclordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  side_.Swap(&other->side_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cancel_Order, orderqty_)
      + sizeof(Cancel_Order::orderqty_)
      - PROTOBUF_FIELD_OFFSET(Cancel_Order, ownertype_)>(
          reinterpret_cast<char*>(&ownertype_),
          reinterpret_cast<char*>(&other->ownertype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cancel_Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cancel_Order_Fail::InitAsDefaultInstance() {
}
class Cancel_Order_Fail::_Internal {
 public:
  using HasBits = decltype(std::declval<Cancel_Order_Fail>()._has_bits_);
  static void set_has_partitionno(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_reportindex(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_applid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reportingpbuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_submittingpbuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_securityid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_securityidsource(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ownertype(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_clearingfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transacttime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clordid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_execid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_origclordid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ordstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cxlrejreason(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rejecttext(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0007ffff) ^ 0x0007ffff) != 0;
  }
};

Cancel_Order_Fail::Cancel_Order_Fail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Cancel_Order_Fail)
}
Cancel_Order_Fail::Cancel_Order_Fail(const Cancel_Order_Fail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_applid()) {
    applid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_applid(),
      GetArena());
  }
  reportingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reportingpbuid()) {
    reportingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reportingpbuid(),
      GetArena());
  }
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_submittingpbuid()) {
    submittingpbuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_submittingpbuid(),
      GetArena());
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityid()) {
    securityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityid(),
      GetArena());
  }
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_securityidsource()) {
    securityidsource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_securityidsource(),
      GetArena());
  }
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clearingfirm()) {
    clearingfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clearingfirm(),
      GetArena());
  }
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transacttime()) {
    transacttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transacttime(),
      GetArena());
  }
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userinfo()) {
    userinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userinfo(),
      GetArena());
  }
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clordid()) {
    clordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clordid(),
      GetArena());
  }
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_execid()) {
    execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_execid(),
      GetArena());
  }
  origclordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_origclordid()) {
    origclordid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_origclordid(),
      GetArena());
  }
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_side()) {
    side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_side(),
      GetArena());
  }
  ordstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ordstatus()) {
    ordstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordstatus(),
      GetArena());
  }
  rejecttext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rejecttext()) {
    rejecttext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rejecttext(),
      GetArena());
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderid()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  ::memcpy(&partitionno_, &from.partitionno_,
    static_cast<size_t>(reinterpret_cast<char*>(&cxlrejreason_) -
    reinterpret_cast<char*>(&partitionno_)) + sizeof(cxlrejreason_));
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Cancel_Order_Fail)
}

void Cancel_Order_Fail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cancel_Order_Fail_Gateway_2eproto.base);
  applid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reportingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origclordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rejecttext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&partitionno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cxlrejreason_) -
      reinterpret_cast<char*>(&partitionno_)) + sizeof(cxlrejreason_));
}

Cancel_Order_Fail::~Cancel_Order_Fail() {
  // @@protoc_insertion_point(destructor:GatewayProto.Cancel_Order_Fail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cancel_Order_Fail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  applid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reportingpbuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submittingpbuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityidsource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clearingfirm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  execid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origclordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rejecttext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Cancel_Order_Fail::ArenaDtor(void* object) {
  Cancel_Order_Fail* _this = reinterpret_cast< Cancel_Order_Fail* >(object);
  (void)_this;
}
void Cancel_Order_Fail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cancel_Order_Fail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cancel_Order_Fail& Cancel_Order_Fail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cancel_Order_Fail_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Cancel_Order_Fail::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Cancel_Order_Fail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      applid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reportingpbuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      submittingpbuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      securityid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      securityidsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      clearingfirm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      transacttime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      userinfo_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      clordid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      execid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      origclordid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      side_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      ordstatus_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      rejecttext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      orderid_.ClearNonDefaultToEmpty();
    }
  }
  partitionno_ = 0;
  if (cached_has_bits & 0x00070000u) {
    ::memset(&reportindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cxlrejreason_) -
        reinterpret_cast<char*>(&reportindex_)) + sizeof(cxlrejreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cancel_Order_Fail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 PartitionNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_partitionno(&has_bits);
          partitionno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ReportIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reportindex(&has_bits);
          reportindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ApplID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_applid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.ApplID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ReportingPBUID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reportingpbuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.ReportingPBUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SubmittingPBUID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_submittingpbuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.SubmittingPBUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_securityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.SecurityID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SecurityIDSource = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_securityidsource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.SecurityIDSource");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 OwnerType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ownertype(&has_bits);
          ownertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClearingFirm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_clearingfirm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.ClearingFirm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string TransactTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.TransactTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string UserInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_userinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.UserInfo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClOrdID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_clordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.ClOrdID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ExecID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_execid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.ExecID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrigClOrdID = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_origclordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.OrigClOrdID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Side = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_side();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.Side");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrdStatus = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_ordstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.OrdStatus");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 CxlRejReason = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_cxlrejreason(&has_bits);
          cxlrejreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string RejectText = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_rejecttext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.RejectText");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string OrderID = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Cancel_Order_Fail.OrderID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cancel_Order_Fail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Cancel_Order_Fail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 PartitionNo = 2;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_partitionno(), target);
  }

  // required uint32 ReportIndex = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reportindex(), target);
  }

  // required string ApplID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applid().data(), static_cast<int>(this->_internal_applid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.ApplID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_applid(), target);
  }

  // required string ReportingPBUID = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reportingpbuid().data(), static_cast<int>(this->_internal_reportingpbuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.ReportingPBUID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reportingpbuid(), target);
  }

  // required string SubmittingPBUID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_submittingpbuid().data(), static_cast<int>(this->_internal_submittingpbuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.SubmittingPBUID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_submittingpbuid(), target);
  }

  // required string SecurityID = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.SecurityID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_securityid(), target);
  }

  // required string SecurityIDSource = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_securityidsource().data(), static_cast<int>(this->_internal_securityidsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.SecurityIDSource");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_securityidsource(), target);
  }

  // required uint32 OwnerType = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ownertype(), target);
  }

  // required string ClearingFirm = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clearingfirm().data(), static_cast<int>(this->_internal_clearingfirm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.ClearingFirm");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_clearingfirm(), target);
  }

  // required string TransactTime = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.TransactTime");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_transacttime(), target);
  }

  // required string UserInfo = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userinfo().data(), static_cast<int>(this->_internal_userinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.UserInfo");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_userinfo(), target);
  }

  // required string ClOrdID = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clordid().data(), static_cast<int>(this->_internal_clordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.ClOrdID");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_clordid(), target);
  }

  // required string ExecID = 14;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_execid().data(), static_cast<int>(this->_internal_execid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.ExecID");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_execid(), target);
  }

  // required string OrigClOrdID = 15;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_origclordid().data(), static_cast<int>(this->_internal_origclordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.OrigClOrdID");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_origclordid(), target);
  }

  // required string Side = 16;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_side().data(), static_cast<int>(this->_internal_side().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.Side");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_side(), target);
  }

  // required string OrdStatus = 17;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ordstatus().data(), static_cast<int>(this->_internal_ordstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.OrdStatus");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_ordstatus(), target);
  }

  // required uint32 CxlRejReason = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_cxlrejreason(), target);
  }

  // required string RejectText = 19;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rejecttext().data(), static_cast<int>(this->_internal_rejecttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.RejectText");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_rejecttext(), target);
  }

  // required string OrderID = 20;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Cancel_Order_Fail.OrderID");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Cancel_Order_Fail)
  return target;
}

size_t Cancel_Order_Fail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GatewayProto.Cancel_Order_Fail)
  size_t total_size = 0;

  if (_internal_has_applid()) {
    // required string ApplID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());
  }

  if (_internal_has_reportingpbuid()) {
    // required string ReportingPBUID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reportingpbuid());
  }

  if (_internal_has_submittingpbuid()) {
    // required string SubmittingPBUID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());
  }

  if (_internal_has_securityid()) {
    // required string SecurityID = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  if (_internal_has_securityidsource()) {
    // required string SecurityIDSource = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());
  }

  if (_internal_has_clearingfirm()) {
    // required string ClearingFirm = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());
  }

  if (_internal_has_transacttime()) {
    // required string TransactTime = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  if (_internal_has_userinfo()) {
    // required string UserInfo = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());
  }

  if (_internal_has_clordid()) {
    // required string ClOrdID = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());
  }

  if (_internal_has_execid()) {
    // required string ExecID = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execid());
  }

  if (_internal_has_origclordid()) {
    // required string OrigClOrdID = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origclordid());
  }

  if (_internal_has_side()) {
    // required string Side = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());
  }

  if (_internal_has_ordstatus()) {
    // required string OrdStatus = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordstatus());
  }

  if (_internal_has_rejecttext()) {
    // required string RejectText = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rejecttext());
  }

  if (_internal_has_orderid()) {
    // required string OrderID = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (_internal_has_partitionno()) {
    // required int32 PartitionNo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partitionno());
  }

  if (_internal_has_reportindex()) {
    // required uint32 ReportIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportindex());
  }

  if (_internal_has_ownertype()) {
    // required uint32 OwnerType = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());
  }

  if (_internal_has_cxlrejreason()) {
    // required uint32 CxlRejReason = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cxlrejreason());
  }

  return total_size;
}
size_t Cancel_Order_Fail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Cancel_Order_Fail)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0007ffff) ^ 0x0007ffff) == 0) {  // All required fields are present.
    // required string ApplID = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applid());

    // required string ReportingPBUID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reportingpbuid());

    // required string SubmittingPBUID = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submittingpbuid());

    // required string SecurityID = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());

    // required string SecurityIDSource = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityidsource());

    // required string ClearingFirm = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clearingfirm());

    // required string TransactTime = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());

    // required string UserInfo = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());

    // required string ClOrdID = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());

    // required string ExecID = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execid());

    // required string OrigClOrdID = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origclordid());

    // required string Side = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side());

    // required string OrdStatus = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordstatus());

    // required string RejectText = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rejecttext());

    // required string OrderID = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());

    // required int32 PartitionNo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partitionno());

    // required uint32 ReportIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reportindex());

    // required uint32 OwnerType = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ownertype());

    // required uint32 CxlRejReason = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cxlrejreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cancel_Order_Fail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Cancel_Order_Fail)
  GOOGLE_DCHECK_NE(&from, this);
  const Cancel_Order_Fail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cancel_Order_Fail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Cancel_Order_Fail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Cancel_Order_Fail)
    MergeFrom(*source);
  }
}

void Cancel_Order_Fail::MergeFrom(const Cancel_Order_Fail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Cancel_Order_Fail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_applid(from._internal_applid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reportingpbuid(from._internal_reportingpbuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_submittingpbuid(from._internal_submittingpbuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_securityid(from._internal_securityid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_securityidsource(from._internal_securityidsource());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_clearingfirm(from._internal_clearingfirm());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_transacttime(from._internal_transacttime());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_userinfo(from._internal_userinfo());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_clordid(from._internal_clordid());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_execid(from._internal_execid());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_origclordid(from._internal_origclordid());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_side(from._internal_side());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_ordstatus(from._internal_ordstatus());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_rejecttext(from._internal_rejecttext());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_orderid(from._internal_orderid());
    }
    if (cached_has_bits & 0x00008000u) {
      partitionno_ = from.partitionno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      reportindex_ = from.reportindex_;
    }
    if (cached_has_bits & 0x00020000u) {
      ownertype_ = from.ownertype_;
    }
    if (cached_has_bits & 0x00040000u) {
      cxlrejreason_ = from.cxlrejreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Cancel_Order_Fail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Cancel_Order_Fail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cancel_Order_Fail::CopyFrom(const Cancel_Order_Fail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Cancel_Order_Fail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cancel_Order_Fail::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Cancel_Order_Fail::InternalSwap(Cancel_Order_Fail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applid_.Swap(&other->applid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reportingpbuid_.Swap(&other->reportingpbuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submittingpbuid_.Swap(&other->submittingpbuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityid_.Swap(&other->securityid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  securityidsource_.Swap(&other->securityidsource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clearingfirm_.Swap(&other->clearingfirm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transacttime_.Swap(&other->transacttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userinfo_.Swap(&other->userinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clordid_.Swap(&other->clordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  execid_.Swap(&other->execid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  origclordid_.Swap(&other->origclordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  side_.Swap(&other->side_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordstatus_.Swap(&other->ordstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rejecttext_.Swap(&other->rejecttext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cancel_Order_Fail, cxlrejreason_)
      + sizeof(Cancel_Order_Fail::cxlrejreason_)
      - PROTOBUF_FIELD_OFFSET(Cancel_Order_Fail, partitionno_)>(
          reinterpret_cast<char*>(&partitionno_),
          reinterpret_cast<char*>(&other->partitionno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cancel_Order_Fail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extend_Fields::InitAsDefaultInstance() {
}
class Extend_Fields::_Internal {
 public:
  using HasBits = decltype(std::declval<Extend_Fields>()._has_bits_);
  static void set_has_stoppx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_minqty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxpricelevels(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timeinforce(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cashmargin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Extend_Fields::Extend_Fields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Extend_Fields)
}
Extend_Fields::Extend_Fields(const Extend_Fields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeinforce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timeinforce()) {
    timeinforce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timeinforce(),
      GetArena());
  }
  cashmargin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cashmargin()) {
    cashmargin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cashmargin(),
      GetArena());
  }
  ::memcpy(&stoppx_, &from.stoppx_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxpricelevels_) -
    reinterpret_cast<char*>(&stoppx_)) + sizeof(maxpricelevels_));
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Extend_Fields)
}

void Extend_Fields::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extend_Fields_Gateway_2eproto.base);
  timeinforce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cashmargin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stoppx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxpricelevels_) -
      reinterpret_cast<char*>(&stoppx_)) + sizeof(maxpricelevels_));
}

Extend_Fields::~Extend_Fields() {
  // @@protoc_insertion_point(destructor:GatewayProto.Extend_Fields)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extend_Fields::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeinforce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cashmargin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Extend_Fields::ArenaDtor(void* object) {
  Extend_Fields* _this = reinterpret_cast< Extend_Fields* >(object);
  (void)_this;
}
void Extend_Fields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extend_Fields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extend_Fields& Extend_Fields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extend_Fields_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Extend_Fields::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Extend_Fields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeinforce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cashmargin_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&stoppx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxpricelevels_) -
        reinterpret_cast<char*>(&stoppx_)) + sizeof(maxpricelevels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extend_Fields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float StopPx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_stoppx(&has_bits);
          stoppx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MinQty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_minqty(&has_bits);
          minqty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 MaxPriceLevels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxpricelevels(&has_bits);
          maxpricelevels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string TimeInForce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_timeinforce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Extend_Fields.TimeInForce");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string CashMargin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cashmargin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GatewayProto.Extend_Fields.CashMargin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extend_Fields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Extend_Fields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float StopPx = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_stoppx(), target);
  }

  // optional float MinQty = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_minqty(), target);
  }

  // optional uint32 MaxPriceLevels = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxpricelevels(), target);
  }

  // optional string TimeInForce = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timeinforce().data(), static_cast<int>(this->_internal_timeinforce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Extend_Fields.TimeInForce");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timeinforce(), target);
  }

  // optional string CashMargin = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cashmargin().data(), static_cast<int>(this->_internal_cashmargin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GatewayProto.Extend_Fields.CashMargin");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cashmargin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Extend_Fields)
  return target;
}

size_t Extend_Fields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Extend_Fields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string TimeInForce = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeinforce());
    }

    // optional string CashMargin = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cashmargin());
    }

    // optional float StopPx = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float MinQty = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 MaxPriceLevels = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxpricelevels());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extend_Fields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Extend_Fields)
  GOOGLE_DCHECK_NE(&from, this);
  const Extend_Fields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extend_Fields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Extend_Fields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Extend_Fields)
    MergeFrom(*source);
  }
}

void Extend_Fields::MergeFrom(const Extend_Fields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Extend_Fields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timeinforce(from._internal_timeinforce());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cashmargin(from._internal_cashmargin());
    }
    if (cached_has_bits & 0x00000004u) {
      stoppx_ = from.stoppx_;
    }
    if (cached_has_bits & 0x00000008u) {
      minqty_ = from.minqty_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxpricelevels_ = from.maxpricelevels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Extend_Fields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Extend_Fields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extend_Fields::CopyFrom(const Extend_Fields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Extend_Fields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extend_Fields::IsInitialized() const {
  return true;
}

void Extend_Fields::InternalSwap(Extend_Fields* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timeinforce_.Swap(&other->timeinforce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cashmargin_.Swap(&other->cashmargin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extend_Fields, maxpricelevels_)
      + sizeof(Extend_Fields::maxpricelevels_)
      - PROTOBUF_FIELD_OFFSET(Extend_Fields, stoppx_)>(
          reinterpret_cast<char*>(&stoppx_),
          reinterpret_cast<char*>(&other->stoppx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extend_Fields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Retransmission_Report::InitAsDefaultInstance() {
}
class Retransmission_Report::_Internal {
 public:
  using HasBits = decltype(std::declval<Retransmission_Report>()._has_bits_);
  static void set_has_nopartitions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Retransmission_Report::Retransmission_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partitionno_(arena),
  reportindex_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Retransmission_Report)
}
Retransmission_Report::Retransmission_Report(const Retransmission_Report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      partitionno_(from.partitionno_),
      reportindex_(from.reportindex_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nopartitions_ = from.nopartitions_;
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Retransmission_Report)
}

void Retransmission_Report::SharedCtor() {
  nopartitions_ = 0u;
}

Retransmission_Report::~Retransmission_Report() {
  // @@protoc_insertion_point(destructor:GatewayProto.Retransmission_Report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Retransmission_Report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Retransmission_Report::ArenaDtor(void* object) {
  Retransmission_Report* _this = reinterpret_cast< Retransmission_Report* >(object);
  (void)_this;
}
void Retransmission_Report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Retransmission_Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Retransmission_Report& Retransmission_Report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Retransmission_Report_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Retransmission_Report::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Retransmission_Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitionno_.Clear();
  reportindex_.Clear();
  nopartitions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Retransmission_Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 NoPartitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nopartitions(&has_bits);
          nopartitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 PartitionNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_partitionno(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_partitionno(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ReportIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reportindex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reportindex(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Retransmission_Report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Retransmission_Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 NoPartitions = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nopartitions(), target);
  }

  // repeated int32 PartitionNo = 3;
  for (int i = 0, n = this->_internal_partitionno_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_partitionno(i), target);
  }

  // repeated uint32 ReportIndex = 4;
  for (int i = 0, n = this->_internal_reportindex_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_reportindex(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Retransmission_Report)
  return target;
}

size_t Retransmission_Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Retransmission_Report)
  size_t total_size = 0;

  // required uint32 NoPartitions = 2;
  if (_internal_has_nopartitions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nopartitions());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 PartitionNo = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->partitionno_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_partitionno_size());
    total_size += data_size;
  }

  // repeated uint32 ReportIndex = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->reportindex_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reportindex_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Retransmission_Report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Retransmission_Report)
  GOOGLE_DCHECK_NE(&from, this);
  const Retransmission_Report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Retransmission_Report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Retransmission_Report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Retransmission_Report)
    MergeFrom(*source);
  }
}

void Retransmission_Report::MergeFrom(const Retransmission_Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Retransmission_Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitionno_.MergeFrom(from.partitionno_);
  reportindex_.MergeFrom(from.reportindex_);
  if (from._internal_has_nopartitions()) {
    _internal_set_nopartitions(from._internal_nopartitions());
  }
}

void Retransmission_Report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Retransmission_Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Retransmission_Report::CopyFrom(const Retransmission_Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Retransmission_Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Retransmission_Report::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Retransmission_Report::InternalSwap(Retransmission_Report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  partitionno_.InternalSwap(&other->partitionno_);
  reportindex_.InternalSwap(&other->reportindex_);
  swap(nopartitions_, other->nopartitions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Retransmission_Report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Standard_Message::InitAsDefaultInstance() {
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->standardheader_ = const_cast< ::GatewayProto::Standard_Header*>(
      ::GatewayProto::Standard_Header::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->logon_ = const_cast< ::GatewayProto::Logon*>(
      ::GatewayProto::Logon::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->logout_ = const_cast< ::GatewayProto::Logout*>(
      ::GatewayProto::Logout::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->heart_beat_ = const_cast< ::GatewayProto::Heart_Beat*>(
      ::GatewayProto::Heart_Beat::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->new_order_ = const_cast< ::GatewayProto::New_Order*>(
      ::GatewayProto::New_Order::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->executive_report_ = const_cast< ::GatewayProto::Executive_Report*>(
      ::GatewayProto::Executive_Report::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->transaction_report_ = const_cast< ::GatewayProto::Transaction_Report*>(
      ::GatewayProto::Transaction_Report::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->cancel_order_ = const_cast< ::GatewayProto::Cancel_Order*>(
      ::GatewayProto::Cancel_Order::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->cancel_order_fail_ = const_cast< ::GatewayProto::Cancel_Order_Fail*>(
      ::GatewayProto::Cancel_Order_Fail::internal_default_instance());
  ::GatewayProto::_Standard_Message_default_instance_._instance.get_mutable()->retransmission_report_ = const_cast< ::GatewayProto::Retransmission_Report*>(
      ::GatewayProto::Retransmission_Report::internal_default_instance());
}
class Standard_Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Standard_Message>()._has_bits_);
  static const ::GatewayProto::Standard_Header& standardheader(const Standard_Message* msg);
  static void set_has_standardheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GatewayProto::Logon& logon(const Standard_Message* msg);
  static void set_has_logon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GatewayProto::Logout& logout(const Standard_Message* msg);
  static void set_has_logout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::GatewayProto::Heart_Beat& heart_beat(const Standard_Message* msg);
  static void set_has_heart_beat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::GatewayProto::New_Order& new_order(const Standard_Message* msg);
  static void set_has_new_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::GatewayProto::Executive_Report& executive_report(const Standard_Message* msg);
  static void set_has_executive_report(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::GatewayProto::Transaction_Report& transaction_report(const Standard_Message* msg);
  static void set_has_transaction_report(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::GatewayProto::Cancel_Order& cancel_order(const Standard_Message* msg);
  static void set_has_cancel_order(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::GatewayProto::Cancel_Order_Fail& cancel_order_fail(const Standard_Message* msg);
  static void set_has_cancel_order_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::GatewayProto::Retransmission_Report& retransmission_report(const Standard_Message* msg);
  static void set_has_retransmission_report(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::GatewayProto::Standard_Header&
Standard_Message::_Internal::standardheader(const Standard_Message* msg) {
  return *msg->standardheader_;
}
const ::GatewayProto::Logon&
Standard_Message::_Internal::logon(const Standard_Message* msg) {
  return *msg->logon_;
}
const ::GatewayProto::Logout&
Standard_Message::_Internal::logout(const Standard_Message* msg) {
  return *msg->logout_;
}
const ::GatewayProto::Heart_Beat&
Standard_Message::_Internal::heart_beat(const Standard_Message* msg) {
  return *msg->heart_beat_;
}
const ::GatewayProto::New_Order&
Standard_Message::_Internal::new_order(const Standard_Message* msg) {
  return *msg->new_order_;
}
const ::GatewayProto::Executive_Report&
Standard_Message::_Internal::executive_report(const Standard_Message* msg) {
  return *msg->executive_report_;
}
const ::GatewayProto::Transaction_Report&
Standard_Message::_Internal::transaction_report(const Standard_Message* msg) {
  return *msg->transaction_report_;
}
const ::GatewayProto::Cancel_Order&
Standard_Message::_Internal::cancel_order(const Standard_Message* msg) {
  return *msg->cancel_order_;
}
const ::GatewayProto::Cancel_Order_Fail&
Standard_Message::_Internal::cancel_order_fail(const Standard_Message* msg) {
  return *msg->cancel_order_fail_;
}
const ::GatewayProto::Retransmission_Report&
Standard_Message::_Internal::retransmission_report(const Standard_Message* msg) {
  return *msg->retransmission_report_;
}
Standard_Message::Standard_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GatewayProto.Standard_Message)
}
Standard_Message::Standard_Message(const Standard_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_standardheader()) {
    standardheader_ = new ::GatewayProto::Standard_Header(*from.standardheader_);
  } else {
    standardheader_ = nullptr;
  }
  if (from._internal_has_logon()) {
    logon_ = new ::GatewayProto::Logon(*from.logon_);
  } else {
    logon_ = nullptr;
  }
  if (from._internal_has_logout()) {
    logout_ = new ::GatewayProto::Logout(*from.logout_);
  } else {
    logout_ = nullptr;
  }
  if (from._internal_has_heart_beat()) {
    heart_beat_ = new ::GatewayProto::Heart_Beat(*from.heart_beat_);
  } else {
    heart_beat_ = nullptr;
  }
  if (from._internal_has_new_order()) {
    new_order_ = new ::GatewayProto::New_Order(*from.new_order_);
  } else {
    new_order_ = nullptr;
  }
  if (from._internal_has_executive_report()) {
    executive_report_ = new ::GatewayProto::Executive_Report(*from.executive_report_);
  } else {
    executive_report_ = nullptr;
  }
  if (from._internal_has_transaction_report()) {
    transaction_report_ = new ::GatewayProto::Transaction_Report(*from.transaction_report_);
  } else {
    transaction_report_ = nullptr;
  }
  if (from._internal_has_cancel_order()) {
    cancel_order_ = new ::GatewayProto::Cancel_Order(*from.cancel_order_);
  } else {
    cancel_order_ = nullptr;
  }
  if (from._internal_has_cancel_order_fail()) {
    cancel_order_fail_ = new ::GatewayProto::Cancel_Order_Fail(*from.cancel_order_fail_);
  } else {
    cancel_order_fail_ = nullptr;
  }
  if (from._internal_has_retransmission_report()) {
    retransmission_report_ = new ::GatewayProto::Retransmission_Report(*from.retransmission_report_);
  } else {
    retransmission_report_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GatewayProto.Standard_Message)
}

void Standard_Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Standard_Message_Gateway_2eproto.base);
  ::memset(&standardheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retransmission_report_) -
      reinterpret_cast<char*>(&standardheader_)) + sizeof(retransmission_report_));
}

Standard_Message::~Standard_Message() {
  // @@protoc_insertion_point(destructor:GatewayProto.Standard_Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Standard_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete standardheader_;
  if (this != internal_default_instance()) delete logon_;
  if (this != internal_default_instance()) delete logout_;
  if (this != internal_default_instance()) delete heart_beat_;
  if (this != internal_default_instance()) delete new_order_;
  if (this != internal_default_instance()) delete executive_report_;
  if (this != internal_default_instance()) delete transaction_report_;
  if (this != internal_default_instance()) delete cancel_order_;
  if (this != internal_default_instance()) delete cancel_order_fail_;
  if (this != internal_default_instance()) delete retransmission_report_;
}

void Standard_Message::ArenaDtor(void* object) {
  Standard_Message* _this = reinterpret_cast< Standard_Message* >(object);
  (void)_this;
}
void Standard_Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Standard_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Standard_Message& Standard_Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Standard_Message_Gateway_2eproto.base);
  return *internal_default_instance();
}


void Standard_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:GatewayProto.Standard_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(standardheader_ != nullptr);
      standardheader_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(logon_ != nullptr);
      logon_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(logout_ != nullptr);
      logout_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(heart_beat_ != nullptr);
      heart_beat_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(new_order_ != nullptr);
      new_order_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(executive_report_ != nullptr);
      executive_report_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(transaction_report_ != nullptr);
      transaction_report_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(cancel_order_ != nullptr);
      cancel_order_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(cancel_order_fail_ != nullptr);
      cancel_order_fail_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(retransmission_report_ != nullptr);
      retransmission_report_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Standard_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .GatewayProto.Standard_Header StandardHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_standardheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Logon logon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Logout logout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_logout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Heart_Beat heart_beat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heart_beat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.New_Order new_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Executive_Report executive_report = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_executive_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Transaction_Report transaction_report = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Cancel_Order cancel_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Cancel_Order_Fail cancel_order_fail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_order_fail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GatewayProto.Retransmission_Report retransmission_report = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_retransmission_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Standard_Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GatewayProto.Standard_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GatewayProto.Standard_Header StandardHeader = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::standardheader(this), target, stream);
  }

  // optional .GatewayProto.Logon logon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::logon(this), target, stream);
  }

  // optional .GatewayProto.Logout logout = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::logout(this), target, stream);
  }

  // optional .GatewayProto.Heart_Beat heart_beat = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::heart_beat(this), target, stream);
  }

  // optional .GatewayProto.New_Order new_order = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::new_order(this), target, stream);
  }

  // optional .GatewayProto.Executive_Report executive_report = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::executive_report(this), target, stream);
  }

  // optional .GatewayProto.Transaction_Report transaction_report = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::transaction_report(this), target, stream);
  }

  // optional .GatewayProto.Cancel_Order cancel_order = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cancel_order(this), target, stream);
  }

  // optional .GatewayProto.Cancel_Order_Fail cancel_order_fail = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cancel_order_fail(this), target, stream);
  }

  // optional .GatewayProto.Retransmission_Report retransmission_report = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::retransmission_report(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GatewayProto.Standard_Message)
  return target;
}

size_t Standard_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GatewayProto.Standard_Message)
  size_t total_size = 0;

  // required .GatewayProto.Standard_Header StandardHeader = 1;
  if (_internal_has_standardheader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *standardheader_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .GatewayProto.Logon logon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logon_);
    }

    // optional .GatewayProto.Logout logout = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logout_);
    }

    // optional .GatewayProto.Heart_Beat heart_beat = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heart_beat_);
    }

    // optional .GatewayProto.New_Order new_order = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_order_);
    }

    // optional .GatewayProto.Executive_Report executive_report = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *executive_report_);
    }

    // optional .GatewayProto.Transaction_Report transaction_report = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_report_);
    }

    // optional .GatewayProto.Cancel_Order cancel_order = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cancel_order_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .GatewayProto.Cancel_Order_Fail cancel_order_fail = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cancel_order_fail_);
    }

    // optional .GatewayProto.Retransmission_Report retransmission_report = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *retransmission_report_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Standard_Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GatewayProto.Standard_Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Standard_Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Standard_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GatewayProto.Standard_Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GatewayProto.Standard_Message)
    MergeFrom(*source);
  }
}

void Standard_Message::MergeFrom(const Standard_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GatewayProto.Standard_Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_standardheader()->::GatewayProto::Standard_Header::MergeFrom(from._internal_standardheader());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_logon()->::GatewayProto::Logon::MergeFrom(from._internal_logon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_logout()->::GatewayProto::Logout::MergeFrom(from._internal_logout());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_heart_beat()->::GatewayProto::Heart_Beat::MergeFrom(from._internal_heart_beat());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_new_order()->::GatewayProto::New_Order::MergeFrom(from._internal_new_order());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_executive_report()->::GatewayProto::Executive_Report::MergeFrom(from._internal_executive_report());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_transaction_report()->::GatewayProto::Transaction_Report::MergeFrom(from._internal_transaction_report());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_cancel_order()->::GatewayProto::Cancel_Order::MergeFrom(from._internal_cancel_order());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_cancel_order_fail()->::GatewayProto::Cancel_Order_Fail::MergeFrom(from._internal_cancel_order_fail());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_retransmission_report()->::GatewayProto::Retransmission_Report::MergeFrom(from._internal_retransmission_report());
    }
  }
}

void Standard_Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GatewayProto.Standard_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Standard_Message::CopyFrom(const Standard_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GatewayProto.Standard_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Standard_Message::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_standardheader()) {
    if (!standardheader_->IsInitialized()) return false;
  }
  if (_internal_has_logon()) {
    if (!logon_->IsInitialized()) return false;
  }
  if (_internal_has_logout()) {
    if (!logout_->IsInitialized()) return false;
  }
  if (_internal_has_new_order()) {
    if (!new_order_->IsInitialized()) return false;
  }
  if (_internal_has_executive_report()) {
    if (!executive_report_->IsInitialized()) return false;
  }
  if (_internal_has_transaction_report()) {
    if (!transaction_report_->IsInitialized()) return false;
  }
  if (_internal_has_cancel_order()) {
    if (!cancel_order_->IsInitialized()) return false;
  }
  if (_internal_has_cancel_order_fail()) {
    if (!cancel_order_fail_->IsInitialized()) return false;
  }
  if (_internal_has_retransmission_report()) {
    if (!retransmission_report_->IsInitialized()) return false;
  }
  return true;
}

void Standard_Message::InternalSwap(Standard_Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Standard_Message, retransmission_report_)
      + sizeof(Standard_Message::retransmission_report_)
      - PROTOBUF_FIELD_OFFSET(Standard_Message, standardheader_)>(
          reinterpret_cast<char*>(&standardheader_),
          reinterpret_cast<char*>(&other->standardheader_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Standard_Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GatewayProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GatewayProto::Standard_Header* Arena::CreateMaybeMessage< ::GatewayProto::Standard_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Standard_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Logon* Arena::CreateMaybeMessage< ::GatewayProto::Logon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Logon >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Logout* Arena::CreateMaybeMessage< ::GatewayProto::Logout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Logout >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Heart_Beat* Arena::CreateMaybeMessage< ::GatewayProto::Heart_Beat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Heart_Beat >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::New_Order* Arena::CreateMaybeMessage< ::GatewayProto::New_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::New_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Executive_Report* Arena::CreateMaybeMessage< ::GatewayProto::Executive_Report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Executive_Report >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Transaction_Report* Arena::CreateMaybeMessage< ::GatewayProto::Transaction_Report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Transaction_Report >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Cancel_Order* Arena::CreateMaybeMessage< ::GatewayProto::Cancel_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Cancel_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Cancel_Order_Fail* Arena::CreateMaybeMessage< ::GatewayProto::Cancel_Order_Fail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Cancel_Order_Fail >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Extend_Fields* Arena::CreateMaybeMessage< ::GatewayProto::Extend_Fields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Extend_Fields >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Retransmission_Report* Arena::CreateMaybeMessage< ::GatewayProto::Retransmission_Report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Retransmission_Report >(arena);
}
template<> PROTOBUF_NOINLINE ::GatewayProto::Standard_Message* Arena::CreateMaybeMessage< ::GatewayProto::Standard_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GatewayProto::Standard_Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
